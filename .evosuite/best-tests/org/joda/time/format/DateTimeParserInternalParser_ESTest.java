/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 03:14:09 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimeParserInternalParser;
import org.joda.time.format.InternalParser;
import org.joda.time.format.InternalParserDateTimeParser;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeParserInternalParser_ESTest extends DateTimeParserInternalParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2717);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Locale locale0 = Locale.CHINA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2717, islamicChronology0, locale0, (Integer) islamicChronology0.AH, 0);
      int int0 = internalParser0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 219);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-917)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2717);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Locale locale0 = Locale.CHINA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2717, islamicChronology0, locale0, (Integer) islamicChronology0.AH, 0);
      int int0 = internalParser0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 219);
      assertEquals((-917), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InternalParser[] internalParserArray0 = new InternalParser[4];
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(2717, 2717).when(dateTimeParser0).estimateParsedLength();
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      internalParserArray0[2] = internalParser0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      int int0 = internalParser0.estimateParsedLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-691)).when(dateTimeParser0).estimateParsedLength();
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      int int0 = internalParser0.estimateParsedLength();
      assertEquals((-3328), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-1L), 1);
      Locale locale0 = Locale.CANADA;
      Integer integer0 = new Integer(1);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, gJChronology0, locale0, integer0, 65535);
      // Undeclared exception!
      try { 
        internalParser0.parseInto(dateTimeParserBucket0, (CharSequence) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserInternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InternalParser[] internalParserArray0 = new InternalParser[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 2717, false);
      internalParserArray0[0] = (InternalParser) dateTimeFormatterBuilder_UnpaddedNumber0;
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(internalParserArray0[0]);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(2717);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      Locale locale0 = Locale.CHINA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2717, islamicChronology0, locale0, (Integer) islamicChronology0.AH, 0);
      // Undeclared exception!
      try { 
        internalParserDateTimeParser0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 219);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 219, false);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_FixedNumber0);
      // Undeclared exception!
      try { 
        dateTimeParser0.estimateParsedLength();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(2717).when(dateTimeParser0).estimateParsedLength();
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      int int0 = internalParser0.estimateParsedLength();
      assertEquals(2717, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InternalParser internalParser0 = DateTimeParserInternalParser.of((DateTimeParser) null);
      assertNull(internalParser0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InternalParser[] internalParserArray0 = new InternalParser[3];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_MatchingParser0);
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      assertSame(internalParser0, dateTimeParser0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(2702).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Locale locale0 = Locale.TAIWAN;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2702, islamicChronology0, locale0, (Integer) 1, 1);
      int int0 = internalParser0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 2702);
      assertEquals(2702, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeParser0).toString();
      DateTimeParserInternalParser dateTimeParserInternalParser0 = (DateTimeParserInternalParser)DateTimeParserInternalParser.of(dateTimeParser0);
      DateTimeParser dateTimeParser1 = dateTimeParserInternalParser0.getUnderlying();
      assertEquals(2702, dateTimeParser1.estimateParsedLength());
  }
}
