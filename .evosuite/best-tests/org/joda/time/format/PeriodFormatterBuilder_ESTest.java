/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 00:58:46 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.function.Consumer;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Foo;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.YearMonth;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.PeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("F/| $NdV", "F/| $NdV");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add(periodFormatterBuilder_PluralAffix0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_CompositeAffix0.getAffixes();
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder1);
      
      Seconds seconds0 = Seconds.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength((-3148));
      assertEquals(16, int0);
      
      String string0 = periodFormatter0.print(seconds0);
      assertEquals("", string0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals(Integer.MIN_VALUE, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(string0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder3);
      
      PeriodParser periodParser0 = periodFormatterBuilder2.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodParser0);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder_Composite0);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(292272984);
      assertEquals(16, int1);
      assertTrue(int1 == int0);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder1.appendYears();
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder2.maximumParsedDigits(16);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder8);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendSuffix(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertNotSame(stringArray0, stringArray1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotSame(stringArray1, stringArray0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder9);
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder3.appendSuffix(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotSame(stringArray1, stringArray0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder10);
      
      MockFile mockFile0 = new MockFile("x!RGSfo5LtD]{:(");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      periodFormatterBuilder_Literal0.printTo((Writer) mockFileWriter0, (ReadablePeriod) seconds0, (Locale) null);
      assertEquals(Integer.MIN_VALUE, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals("x!RGSfo5LtD]{:(", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("x!RGSfo5LtD]{:(", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(6, 16, 1992, 292272984, (-3148), 44, 21, 2480);
      assertNotNull(mutablePeriod0);
      
      int int2 = periodFormatterBuilder_Composite0.parseInto(mutablePeriod0, "", 292272984, (Locale) null);
      assertEquals((-292272985), int2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("91xXoa2Bk^E<'ARA>z");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("91xXoa2Bk^E<'ARA>z", 6);
      assertEquals((-7), int0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix((String) null, "Sd|t@R=L+oV`/!");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix1 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_CompositeAffix0);
      assertFalse(periodFormatterBuilder_CompositeAffix1.equals((Object)periodFormatterBuilder_CompositeAffix0));
      assertNotNull(periodFormatterBuilder_CompositeAffix1);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(669, (-7), 669, false, 699, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_CompositeAffix1);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertFalse(periodFormatterBuilder_CompositeAffix0.equals((Object)periodFormatterBuilder_CompositeAffix1));
      assertFalse(periodFormatterBuilder_CompositeAffix1.equals((Object)periodFormatterBuilder_CompositeAffix0));
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "Sd|t@R=L+oV`/!";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = null;
      try {
        periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YearMonthDayTime";
      stringArray0[1] = "YearMonthDayTime";
      stringArray0[2] = "rQJI2/9S`KI9";
      stringArray0[3] = "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("YearMonthDayTime", "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendMillis();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendHours();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendYears();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder6.toParser();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      Period period0 = Period.seconds(354);
      assertNotNull(period0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("YearMonthDayTime", "pj=}_vhzf", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Locale locale1 = Locale.ITALY;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertNotNull(locale1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.calculatePrintedLength(period0, locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "x!f/| $ndvd]{:(";
      stringArray0[1] = "g";
      stringArray0[2] = "g";
      stringArray0[3] = "sfo5ltd]";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("Dp", "g", stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal((String) null);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("x6\"pB&y9I5_J8", "<Ltc|u\"'4#I-#]?", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("sfo5ltd]"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains("sfo5ltd]"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.append((PeriodPrinter) periodFormatterBuilder_Separator0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertFalse(linkedList0.contains("sfo5ltd]"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendSuffix("*Vu&hB)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      System.setCurrentTimeMillis((-1017L));
      Foo foo0 = Foo.FIVE;
      assertEquals(1, foo0.size());
      assertNotNull(foo0);
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("PeriodFormat.hours", "org.joda.time.format.PeriodFormatterBuilder$RegExAffix");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(Integer.MAX_VALUE, (-3379), 12, true, (-304), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      PeriodType periodType0 = PeriodType.years();
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      boolean boolean0 = periodFormatterBuilder_FieldFormatter1.isSupported(periodType0, (-3379));
      assertFalse(boolean0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("F/| $NdV", "F/| $NdV");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add(periodFormatterBuilder_PluralAffix0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_CompositeAffix0.getAffixes();
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder1);
      
      Seconds seconds0 = Seconds.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength((-3148));
      assertEquals(16, int0);
      
      String string0 = periodFormatter0.print(seconds0);
      assertEquals("", string0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals(Integer.MIN_VALUE, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(string0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder3);
      
      PeriodParser periodParser0 = periodFormatterBuilder2.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodParser0);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder4);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodPrinter0);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(292272984);
      assertEquals(16, int1);
      assertTrue(int1 == int0);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder1.appendYears();
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder2.maximumParsedDigits(16);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder8);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendSuffix(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertNotSame(stringArray0, stringArray1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertNotSame(stringArray1, stringArray0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder9);
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      MockFile mockFile0 = new MockFile("x!RGSfo5LtD]{:(");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      periodFormatterBuilder_Literal0.printTo((Writer) mockFileWriter0, (ReadablePeriod) seconds0, (Locale) null);
      assertEquals(Integer.MIN_VALUE, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("x!RGSfo5LtD]{:(", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals("x!RGSfo5LtD]{:(", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      
      int int2 = periodFormatterBuilder_CompositeAffix0.scan("x!RGSfo5LtD]{:(", (-3148));
      assertEquals(3147, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Builder has created neither a printer nor a parser", "Builder has created neither a printer nor a parser", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      assertEquals(0, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertEquals(0, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      String string0 = "O}9hID:&N.+w]JD$kw";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Duration duration0 = new Duration(1985L);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1985L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      Seconds seconds0 = Seconds.TWO;
      assertEquals(1, seconds0.size());
      assertEquals(2, seconds0.getSeconds());
      assertNotNull(seconds0);
      
      PeriodType periodType0 = seconds0.getPeriodType();
      assertEquals(1, seconds0.size());
      assertEquals(2, seconds0.getSeconds());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertEquals(1, seconds0.size());
      assertEquals(2, seconds0.getSeconds());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      PeriodType periodType2 = PeriodType.hours();
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertEquals("Hours", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertNotNull(periodType2);
      
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) seconds0, locale0);
      assertEquals(0, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertEquals(1, seconds0.size());
      assertEquals(2, seconds0.getSeconds());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0, periodType1);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1985L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1, seconds0.size());
      assertEquals(2, seconds0.getSeconds());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(mutablePeriod0);
      
      Locale locale1 = Locale.US;
      assertSame(locale1, locale0);
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "Builder has created neither a printer nor a parser", (-1792), locale1);
      assertEquals((-1792), int0);
      assertEquals(0, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertSame(locale1, locale0);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1985L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1, seconds0.size());
      assertEquals(2, seconds0.getSeconds());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator2 = periodFormatterBuilder_Separator1.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Separator0);
      assertEquals(0, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator2, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator2, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator2);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator2);
      assertNotNull(periodFormatterBuilder_Separator2);
      
      // Undeclared exception!
      try { 
        Period.parse("O}9hID:&N.+w]JD$kw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"O}9hID:&N.+w]JD$kw\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "TdXI6x";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("TdXI6x", "z,zszv");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "z,zszv");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("z,zszv", stringWriter0.toString());
      assertEquals("z,zszv", stringWriter1.toString());
      assertNotNull(stringWriter1);
      
      StringWriter stringWriter2 = stringWriter0.append('V');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertEquals("z,zszvV", stringWriter0.toString());
      assertEquals("z,zszvV", stringWriter2.toString());
      assertNotNull(stringWriter2);
      
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertEquals("z,zszvV", stringWriter0.toString());
      assertEquals("z,zszvV", stringWriter2.toString());
      assertEquals(7, stringBuffer0.length());
      assertEquals("z,zszvV", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertEquals("z,zszvVTdXI6xTdXI6x", stringWriter0.toString());
      assertEquals("z,zszvVTdXI6xTdXI6x", stringWriter2.toString());
      assertEquals("z,zszvVTdXI6xTdXI6x", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(1);
      assertEquals(12, int0);
      
      // Undeclared exception!
      try { 
        stringBuffer0.insert((int) 'V', (CharSequence) "TdXI6x");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 86
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YearMonthDayTime";
      stringArray0[1] = "YearMonthDayTime";
      stringArray0[2] = "rQJI2/9S`KI9";
      stringArray0[3] = "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("YearMonthDayTime", "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendYears();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendYears();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder6.toParser();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(354, (-2631), (-1008), false, 354, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", "rQJI2/9S`KI9", stringArray0, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0, false, false);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator1);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Separator1.countFieldsToPrint(period0, (-2631), locale0);
      assertEquals(0, int0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      int int1 = periodFormatterBuilder_RegExAffix0.parse("rQJI2/9S`KI9", 0);
      assertEquals(12, int1);
      assertEquals(4, stringArray0.length);
      assertFalse(int1 == int0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.for", "YearMonthDayTime");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int2 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength((-2631));
      assertEquals(16, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("'MN>`x\"se\"e");
      assertNotNull(mockFileWriter0);
      
      periodFormatterBuilder_Composite0.printTo((Writer) mockFileWriter0, (ReadablePeriod) period0, locale0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YearMonthDayTime";
      stringArray0[1] = "YearMonthDayTime";
      stringArray0[2] = "rQJI2/9S`KI9";
      stringArray0[3] = "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("YearMonthDayTime", "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodParser periodParser0 = periodFormatterBuilder5.toParser();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodParser0);
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(354, 3680, (-1008), false, 354, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", "rQJI2/9S`KI9", stringArray0, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0, false, false);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator1);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Separator1.countFieldsToPrint(period0, 3680, locale0);
      assertEquals(0, int0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      int int1 = periodFormatterBuilder_RegExAffix0.parse("rQJI2/9S`KI9", 0);
      assertEquals(12, int1);
      assertEquals(4, stringArray0.length);
      assertFalse(int1 == int0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.for", "YearMonthDayTime");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int2 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(3680);
      assertEquals(16, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotSame(periodPrinter0, periodParser0);
      assertFalse(periodPrinter0.equals((Object)periodParser0));
      assertNotNull(periodPrinter0);
      
      int int3 = periodPrinter0.countFieldsToPrint(period0, 4153, locale0);
      assertEquals(1, int3);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotSame(periodPrinter0, periodParser0);
      assertFalse(periodPrinter0.equals((Object)periodParser0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "YearMonthDayTime";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendPrefix("YearMonthDayTime", "YearMonthDayTime");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("YearMonthDayTime"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains("YearMonthDayTime"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, locale0, periodType0);
      assertFalse(linkedList0.contains("YearMonthDayTime"));
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.append(periodFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "TdXI6x";
      String string1 = "z\\,zszv";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("TdXI6x", "z,zszv");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "z,zszv");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("z,zszv", stringWriter0.toString());
      assertEquals("z,zszv", stringWriter1.toString());
      assertNotNull(stringWriter1);
      
      StringWriter stringWriter2 = stringWriter0.append('V');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertEquals("z,zszvV", stringWriter0.toString());
      assertEquals("z,zszvV", stringWriter2.toString());
      assertNotNull(stringWriter2);
      
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertEquals("z,zszvV", stringWriter0.toString());
      assertEquals("z,zszvV", stringWriter2.toString());
      assertEquals(7, stringBuffer0.length());
      assertEquals("z,zszvV", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertEquals("z,zszvVTdXI6xTdXI6x", stringWriter0.toString());
      assertEquals("z,zszvVTdXI6xTdXI6x", stringWriter2.toString());
      assertEquals("z,zszvVTdXI6xTdXI6x", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(0);
      assertEquals(12, int0);
      
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (CharSequence) "TdXI6x");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("TdXI6xz,zszvVTdXI6xTdXI6x", stringWriter0.toString());
      assertEquals("TdXI6xz,zszvVTdXI6xTdXI6x", stringWriter2.toString());
      assertEquals(25, stringBuffer0.length());
      assertEquals("TdXI6xz,zszvVTdXI6xTdXI6x", stringBuffer0.toString());
      assertEquals(25, stringBuffer1.length());
      assertEquals("TdXI6xz,zszvVTdXI6xTdXI6x", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      periodFormatterBuilder_CompositeAffix0.finish(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = null;
      try {
        periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YearMonthDayTime";
      stringArray0[1] = "YearMonthDayTime";
      stringArray0[2] = "rQJI2/9S`KI9";
      stringArray0[3] = "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("YearMonthDayTime", "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.appendSecondsWithMillis();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendHours();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendYears();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder6.toParser();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(354, 3680, (-1008), false, 354, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", "rQJI2/9S`KI9", stringArray0, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0, false, false);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator1);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(period0, locale0);
      assertEquals(0, int0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.CHINESE;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh", locale1.toString());
      assertNotNull(locale1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale2 = Locale.lookup(linkedList0, (Collection<Locale>) null);
      assertEquals(0, linkedList0.size());
      assertNull(locale2);
      
      int int1 = periodFormatterBuilder_Separator1.countFieldsToPrint(period0, 3680, locale1);
      assertEquals(0, int1);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(locale1, locale0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(int1 == int0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh", locale1.toString());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo((Writer) null, (ReadablePeriod) period0, locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[13];
      stringArray0[0] = "YearMonthDayTime";
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "YearMonthDayTime";
      stringArray1[1] = "YearMonthDayTime";
      stringArray1[2] = "YearMonthDayTime";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendPrefix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YearMonthDayTime";
      stringArray0[1] = "YearMonthDayTime";
      stringArray0[2] = "rQJI2/9S`KI9";
      stringArray0[3] = "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("YearMonthDayTime", "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uut 0");
      assertFalse(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder5.toParser();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(354, 3680, (-1008), false, 354, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", "rQJI2/9S`KI9", stringArray0, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0, false, false);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator1);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSeparatorIfFieldsAfter("Pjqi~i(Ey%,1");
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder6);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "YearMonthDayTime");
      assertEquals(16, stringBuffer0.length());
      assertEquals("YearMonthDayTime", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertNotNull(locale0);
      
      periodFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertEquals("YearMonthDayTimeorg.joda.time.format.DateTimeFormatterBuilder$StringLiteral0", stringBuffer0.toString());
      assertEquals(76, stringBuffer0.length());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder3.appendSeconds();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder7);
      
      Locale locale1 = Locale.KOREAN;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.getLanguage());
      assertNotNull(locale1);
      
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(period0, locale1);
      assertEquals(0, int0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(locale1, locale0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.getLanguage());
      
      Locale locale2 = Locale.CHINESE;
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertNotNull(locale2);
      
      int int1 = periodFormatterBuilder_Separator1.countFieldsToPrint(period0, 3680, locale2);
      assertEquals(0, int1);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertTrue(int1 == int0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo((Writer) null, (ReadablePeriod) period0, locale2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<?25+D{+@ Kmh-_m9";
      stringArray0[1] = "<?25+D{+@ Kmh-_m9";
      stringArray0[2] = "ART";
      stringArray0[3] = "ART";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("ART", "<?25+D{+@ Kmh-_m9", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) null, "ART", (-1620), locale0);
      assertEquals((-1620), int0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("ART", "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendLiteral("F");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparatorIfFieldsAfter("<?25+D{+@ Kmh-_m9");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendLiteral("<?25+D{+@ Kmh-_m9");
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YearMonthDayTime";
      stringArray0[1] = "YearMonthDayTime";
      stringArray0[2] = "rQJI2/9S`KI9";
      stringArray0[3] = "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("YearMonthDayTime", "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendYears();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendYears();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder6.toParser();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(354, 3680, (-1008), false, 354, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", "rQJI2/9S`KI9", stringArray0, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0, false, false);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator1);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Separator1.countFieldsToPrint(period0, 3680, locale0);
      assertEquals(0, int0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      int int1 = periodFormatterBuilder_RegExAffix0.parse("rQJI2/9S`KI9", 0);
      assertEquals(12, int1);
      assertEquals(4, stringArray0.length);
      assertFalse(int1 == int0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.for", "YearMonthDayTime");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int2 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(3680);
      assertEquals(16, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("'MN>`x\"se\"e");
      assertNotNull(mockFileWriter0);
      
      periodFormatterBuilder_Composite0.printTo((Writer) mockFileWriter0, (ReadablePeriod) period0, locale0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      System.setCurrentTimeMillis(9223372036854775807L);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder$PluralAffix";
      stringArray0[1] = "ALO@4^d%i@hy";
      stringArray0[2] = "minuteOfHour";
      stringArray0[3] = "PeriodFormat.regex.separator";
      stringArray0[4] = "Q^q<e5UuDwTyECQHi3";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1901), (-2305), (-1901), true, (-2305), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_RegExAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals(5, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      Minutes minutes0 = Minutes.MIN_VALUE;
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MIN_VALUE, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      periodFormatterBuilder_FieldFormatter1.printTo((StringBuffer) null, (ReadablePeriod) minutes0, locale0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertEquals(5, stringArray0.length);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MIN_VALUE, minutes0.getMinutes());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[1];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      stringArray0[0] = "F";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMonths();
      assertEquals(1, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendPrefix("F");
      assertEquals(1, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.printZeroAlways();
      assertEquals(1, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendYears();
      assertEquals(1, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder8);
      
      System.setCurrentTimeMillis(11);
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder3.appendSeparator("beS6*YIF #iPETgI", "F");
      assertEquals(1, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder9);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("beS6*YIF #iPETgI", "F");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.scan("*.>tHK,.l4", 12);
      assertEquals((-13), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = null;
      String[] stringArray0 = new String[0];
      String string1 = "N<=`4n%XMhGGN(+";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNotNull(periodPrinter0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "bbA%:CWV8S";
      stringArray0[1] = "bbA%:CWV8S";
      stringArray0[2] = "bbA%:CWV8S";
      stringArray0[3] = "bbA%:CWV8S";
      stringArray0[4] = "bbA%:CWV8S";
      stringArray0[5] = "bbA%:CWV8S";
      stringArray0[6] = "bbA%:CWV8S";
      stringArray0[7] = "bbA%:CWV8S";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("bbA%:CWV8S", "bbA%:CWV8S", stringArray0);
      assertEquals(8, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsBefore("bbA%:CWV8S");
      assertEquals(8, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      periodFormatterBuilder3.clear();
      assertEquals(8, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("bbA%:CWV8S");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.parse("YearMothDayTime", 402);
      assertEquals((-403), int0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = null;
      String string1 = ",EO[kg|ok)xp)";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix((String) null, ",EO[kg|ok)xp)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[3];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      stringArray0[0] = "S,m]UUT 0";
      stringArray0[1] = "I;\"&:^";
      stringArray0[2] = "YearWeekDayTime";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      LinkedList<PeriodFormatterBuilder.PeriodFieldAffix> linkedList0 = new LinkedList<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Consumer<PeriodFormatterBuilder.PeriodFieldAffix> consumer0 = (Consumer<PeriodFormatterBuilder.PeriodFieldAffix>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.forEach(consumer0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean1 = linkedHashSet0.add(periodFormatterBuilder_RegExAffix0);
      assertTrue(boolean1);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      boolean boolean2 = linkedHashSet0.addAll(linkedList0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      periodFormatterBuilder_RegExAffix0.finish(linkedHashSet0);
      assertEquals(3, stringArray0.length);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      int int0 = periodFormatterBuilder_RegExAffix0.scan("S,m]UUT 0", (-278));
      assertEquals(277, int0);
      assertEquals(3, stringArray0.length);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("l");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendYears();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("q-2bA~BX](FW*xe@9K");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append(periodFormatter0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMinutes();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendHours();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.maximumParsedDigits((-278));
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendPrefix("I;\"&:^");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder7);
      
      int int1 = periodFormatterBuilder_RegExAffix0.parse("S,m]UUT 0", 48);
      assertEquals((-49), int1);
      assertEquals(3, stringArray0.length);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = periodFormatterBuilder_RegExAffix0.getAffixes();
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder3.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder8);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YearMonthDayTime";
      stringArray0[1] = "YearMonthDayTime";
      stringArray0[2] = "rQJI2/9S`KI9";
      stringArray0[3] = "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeconds();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendHours();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendYears();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder4.toParser();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(354, 3680, (-1008), false, 354, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", "rQJI2/9S`KI9", stringArray0, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0, false, false);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator1);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Separator1.countFieldsToPrint(period0, 3680, locale0);
      assertEquals(0, int0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      int int1 = periodFormatterBuilder_Composite0.countFieldsToPrint(period0, (-1008), locale0);
      assertEquals(0, int1);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertTrue(int1 == int0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      System.setCurrentTimeMillis((-1017L));
      Foo foo0 = Foo.FIVE;
      assertEquals(1, foo0.size());
      assertNotNull(foo0);
      
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = 24;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix((String) null, "Types array must not contain duplicate: ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(Integer.MAX_VALUE, 24, 3805, true, 4, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_CompositeAffix0);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter1.finish((PeriodFormatterBuilder.FieldFormatter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendLiteral("ql4$=y;\"gg:rxr?");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ql4$=y;\"gg:rxr?";
      stringArray0[1] = ";";
      stringArray0[2] = "ql4$=y;\"gg:rxr?";
      stringArray0[3] = "ql4$=y;\"gg:rxr?";
      stringArray0[4] = "ql4$=y;\"gg:rxr?";
      stringArray0[5] = "ql4$=y;\"gg:rxr?";
      stringArray0[6] = "ql4$=y;\"gg:rxr?";
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparator("ql4$=y;\"gg:rxr?", "ql4$=y;\"gg:rxr?", stringArray0);
      assertEquals(7, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSeparatorIfFieldsAfter("Hr&U^,gG,~ ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("JyZ9>Z%_]V@*");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_SimpleAffix0.getAffixes();
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      periodFormatterBuilder_CompositeAffix0.finish(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      int int0 = periodFormatterBuilder_CompositeAffix0.parse("JyZ9>Z%_]V@*", 2147483645);
      assertEquals((-2147483646), int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("s", "org.joda.time.format.PeriodFormatterBuilder$PluralAffix", stringArray0);
      assertEquals(1, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.minimumPrintedDigits((-1537));
      assertEquals(1, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "s";
      stringArray1[1] = "s";
      stringArray1[2] = "org.joda.time.chrono.ZonedChronology";
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(754, 10, 4, false, 2147483645, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_CompositeAffix0);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("F", "sg#Dt@,]SCk:DW*0>", stringArray1, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter1, false, false);
      assertEquals(3, stringArray1.length);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      assertEquals(3, stringArray1.length);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      assertEquals(3, stringArray1.length);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertNotNull(periodFormatter1);
      
      PeriodFormatter periodFormatter2 = periodFormatter1.withLocale(locale0);
      assertEquals(3, stringArray1.length);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatter0, periodFormatter2);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatter1, periodFormatter2);
      assertSame(periodFormatter2, periodFormatter0);
      assertSame(periodFormatter2, periodFormatter1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter2.isParser());
      assertTrue(periodFormatter2.isPrinter());
      assertNotNull(periodFormatter2);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.append(periodFormatter2);
      assertEquals(1, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatter0, periodFormatter2);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatter1, periodFormatter2);
      assertSame(periodFormatter2, periodFormatter0);
      assertSame(periodFormatter2, periodFormatter1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter2.isParser());
      assertTrue(periodFormatter2.isPrinter());
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YearMonthDayTime";
      stringArray0[1] = "YearMonthDayTime";
      stringArray0[2] = "rQJI2/9S`KI9";
      stringArray0[3] = "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("YearMonthDayTime", "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodParser periodParser0 = periodFormatterBuilder5.toParser();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodParser0);
      
      int int0 = (-1008);
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(354, 3680, (-1008), false, 354, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      Hours hours0 = Hours.TWO;
      assertEquals(1, hours0.size());
      assertEquals(2, hours0.getHours());
      assertNotNull(hours0);
      
      long long0 = periodFormatterBuilder_FieldFormatter1.getFieldValue(hours0);
      assertEquals(9223372036854775807L, long0);
      assertEquals(4, stringArray0.length);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals(1, hours0.size());
      assertEquals(2, hours0.getHours());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", "rQJI2/9S`KI9", stringArray0, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0, false, false);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.countFieldsToPrint(period0, 3680, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      System.setCurrentTimeMillis((-1017L));
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("QEB4?MpXXg>^T");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-3409), (-305), (-3409), true, Integer.MAX_VALUE, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_CompositeAffix0);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      Foo foo0 = Foo.FIVE;
      assertEquals(1, foo0.size());
      assertNotNull(foo0);
      
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_FieldFormatter1.calculatePrintedLength(foo0, locale0);
      assertEquals(0, int0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals(1, foo0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{?^\"tbtH2n@}+AeRnMp");
      assertFalse(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.rejectSignedValues(false);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("{?^\"tbtH2n@}+AeRnMp"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains("{?^\"tbtH2n@}+AeRnMp"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, (Locale) null, periodType0);
      assertFalse(linkedList0.contains("{?^\"tbtH2n@}+AeRnMp"));
      assertEquals(0, linkedList0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertFalse(linkedList0.contains("{?^\"tbtH2n@}+AeRnMp"));
      assertEquals(0, linkedList0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertNotNull(periodFormatter1);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.append(periodFormatter1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertFalse(linkedList0.contains("{?^\"tbtH2n@}+AeRnMp"));
      assertEquals(0, linkedList0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertNotNull(periodFormatterBuilder7);
      
      PeriodParser periodParser0 = periodFormatterBuilder7.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder_Composite0, periodParser0);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertNotSame(periodParser0, periodFormatterBuilder_Composite0);
      assertFalse(linkedList0.contains("{?^\"tbtH2n@}+AeRnMp"));
      assertFalse(periodParser0.equals((Object)periodFormatterBuilder_Composite0));
      assertEquals(0, linkedList0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertNotNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YearMonthDayTime";
      stringArray0[1] = "YearMonthDayTime";
      stringArray0[2] = "rQJI2/9S`KI9";
      stringArray0[3] = "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("YearMonthDayTime", "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodParser periodParser0 = periodFormatterBuilder5.toParser();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodParser0);
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(354, 3680, (-1008), false, 354, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", "rQJI2/9S`KI9", stringArray0, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0, false, false);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator1);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      periodFormatterBuilder_Separator0.printTo((Writer) null, (ReadablePeriod) period0, locale0);
      assertEquals(4, stringArray0.length);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      
      Locale locale1 = Locale.CHINESE;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertNotNull(locale1);
      
      int int0 = periodFormatterBuilder_Separator1.countFieldsToPrint(period0, 3680, locale1);
      assertEquals(0, int0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(locale1, locale0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YearMonthDayTime";
      stringArray0[1] = "YearMonthDayTime";
      stringArray0[2] = "rQJI2/9S`KI9";
      stringArray0[3] = "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("YearMonthDayTime", "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodParser periodParser0 = periodFormatterBuilder5.toParser();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodParser0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(354, 3680, (-1008), false, 354, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_RegExAffix0);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", "rQJI2/9S`KI9", stringArray0, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0, false, false);
      assertEquals(4, stringArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_Separator1);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Separator1.countFieldsToPrint(period0, 3680, locale0);
      assertEquals(0, int0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      
      int int1 = periodFormatterBuilder_RegExAffix0.scan("\"", 354);
      assertEquals((-355), int1);
      assertEquals(4, stringArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SbOrBA.@ NhsTx";
      stringArray0[1] = "e.T\"Hy";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      File file0 = MockFile.createTempFile("e.T\"Hy", "M?o,i&1jZ%q2Mr_");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/e.T\"Hy0M?o,i&1jZ%q2Mr_", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("e.T\"Hy0M?o,i&1jZ%q2Mr_", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append(':');
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/e.T\"Hy0M?o,i&1jZ%q2Mr_", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("e.T\"Hy0M?o,i&1jZ%q2Mr_", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(printWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0, 1942);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/e.T\"Hy0M?o,i&1jZ%q2Mr_", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("e.T\"Hy0M?o,i&1jZ%q2Mr_", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(bufferedWriter0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal((String) null);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("e.T\"Hy", "M?o,i&1jZ%q2Mr_", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Separator0, (PeriodParser) periodFormatterBuilder_Separator0);
      assertEquals(2, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroAlways();
      assertEquals(2, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertEquals(2, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("e.T\"Hy");
      assertEquals(2, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMillis();
      assertEquals(2, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendPrefix(stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder6);
      
      periodFormatterBuilder_RegExAffix0.printTo((Writer) bufferedWriter0, 221);
      assertEquals(2, stringArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/e.T\"Hy0M?o,i&1jZ%q2Mr_", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("e.T\"Hy0M?o,i&1jZ%q2Mr_", file0.getName());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      
      int int0 = periodFormatterBuilder_RegExAffix0.calculatePrintedLength(6);
      assertEquals(6, int0);
      assertEquals(2, stringArray0.length);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal1 = new PeriodFormatterBuilder.Literal("");
      assertFalse(periodFormatterBuilder_Literal1.equals((Object)periodFormatterBuilder_Literal0));
      assertNotNull(periodFormatterBuilder_Literal1);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "e.T\"Hy");
      assertEquals(6, stringBuffer0.length());
      assertEquals("e.T\"Hy", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter((OutputStream) null, "e.T\"Hy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.calculatePrintedLength((-192));
      assertEquals(0, int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "TAEE+].&sZ:KR;W";
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("Cannot have two adjacent separators");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator("TAEE+].&sZ:KR;W");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.rejectSignedValues(false);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$Separator", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int1 = periodFormatterBuilder_PluralAffix0.scan("TAEE+].&sZ:KR;W", (-160));
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "e5R@X.V_!x-";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int2 = periodFormatterBuilder_RegExAffix0.parse("gMK^];`OP!&!l/", 2147);
      assertEquals((-2148), int2);
      assertEquals(5, stringArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", "Illegal instant due to time zone offset transition (");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(Integer.MAX_VALUE, 5337, 5337, false, 5337, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      Months months0 = Months.ZERO;
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5337
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[5];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("3T", "3T");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1), 0, 1860, true, (-1), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(5, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter0;
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      assertEquals(5, periodFormatterBuilder_FieldFormatterArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      periodFormatterBuilder_FieldFormatterArray0[4] = periodFormatterBuilder_FieldFormatter1;
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter2 = new PeriodFormatterBuilder.FieldFormatter(0, 270, 270, true, (-786), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(5, periodFormatterBuilder_FieldFormatterArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter2.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertFalse(periodFormatterBuilder_FieldFormatter2.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertNotNull(periodFormatterBuilder_FieldFormatter2);
      
      periodFormatterBuilder_FieldFormatterArray0[2] = periodFormatterBuilder_FieldFormatter2;
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, (-3398), 40, 292272708, 40, 292272708, 1860, 121, (PeriodType) null);
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "3T", (-25), locale0);
      assertEquals((-25), int0);
      assertEquals(5, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter2);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter2));
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("%~4OZ]c7\u0003fE7R");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter3 = new PeriodFormatterBuilder.FieldFormatter(1860, 121, 1860, true, 121, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      assertEquals(5, periodFormatterBuilder_FieldFormatterArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter3.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertFalse(periodFormatterBuilder_FieldFormatter3.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter3.equals((Object)periodFormatterBuilder_FieldFormatter2));
      assertNotNull(periodFormatterBuilder_FieldFormatter3);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("%~4OZ]c7\u0003fE7R", "perman (germany)");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "Cannot have two adjacent separators";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("Cannot have two adjacent separators", "Cannot have two adjacent separators");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<O 9iz:";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("<O 9iz:", "<O 9iz:", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, true);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Separator0, locale0, periodType0);
      assertEquals(1, stringArray0.length);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      // Undeclared exception!
      try { 
        Period.parse("<O 9iz:", periodFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.calculatePrintedLength((-192));
      assertEquals(0, int0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string1 = "TAEE+].&sZ:KR;W";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("TAEE+].&sZ:KR;W");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator((String) null, "TAEE+].&sZ:KR;W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("z", "z");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.parse("z", 10);
      assertEquals((-11), int0);
      
      StringBuffer stringBuffer0 = new StringBuffer("mK$9oh");
      assertEquals(6, stringBuffer0.length());
      assertEquals("mK$9oh", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = stringBuffer0.insert(4, (-11));
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(9, stringBuffer0.length());
      assertEquals("mK$9-11oh", stringBuffer0.toString());
      assertEquals(9, stringBuffer1.length());
      assertEquals("mK$9-11oh", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-2094));
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals("mK$9-11ohz", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      
      int int1 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(48);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(2030);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparatorIfFieldsBefore("mK$9oh");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.maximumParsedDigits((-11));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder6.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparatorIfFieldsAfter("org.joda.time.format.PeriodFormatterBuilder$PluralAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendPrefix("'!.f&ef^", "org.joda.time.format.PeriodFormatterBuilder$PluralAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("'!.f&ef^");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.parse("x[CH;`h]{#tx/a{", 2531);
      assertEquals((-2532), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "SbOrBA.@ NhsTx";
      stringArray0[0] = "SbOrBA.@ NhsTx";
      stringArray0[1] = "SbOrBA.@ NhsTx";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        periodFormatterBuilder_RegExAffix0.printTo((Writer) pipedWriter0, (-54));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$PluralAffix";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4147L, 6L);
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.getSeconds();
      assertEquals((-4), int0);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod((Object) null);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertNotNull(mutablePeriod1);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      mutablePeriod0.clear();
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      
      Locale locale1 = Locale.JAPANESE;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("ja", locale1.getLanguage());
      assertNotNull(locale1);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      Set<Character> set0 = locale1.getExtensionKeys();
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("ja", locale1.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("vE;mliM&%lA<");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("vE;mliM&%lA<", "vE;mliM&%lA<");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) stringWriter0, 46);
      assertEquals("vE;mliM&%lA<vE;mliM&%lA<", stringWriter0.toString());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "vE;mliM&%lA<";
      stringArray0[1] = "vE;mliM&%lA<";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      String[] stringArray1 = periodFormatterBuilder_RegExAffix0.getAffixes();
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray0.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "zR5unPki=T9!Bq";
      stringArray0[1] = "9bNt`";
      stringArray0[2] = "9bNt`";
      stringArray0[3] = "9bNt`";
      stringArray0[5] = "9bNt`";
      stringArray0[6] = "q?kVXL]HQmCl";
      stringArray0[7] = "9bNt`";
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSeparator("9bNt`", "9bNt`", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("d");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("The calendar must not be null", 7);
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$Separator";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("h(D!U^_-9B");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparatorIfFieldsBefore((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = " < ";
      stringArray0[2] = "C-I&nQ";
      stringArray0[3] = "";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int0 = periodFormatterBuilder_RegExAffix0.scan("", 0);
      assertEquals((-1), int0);
      assertEquals(4, stringArray0.length);
      
      String string0 = "2X;bs;)|";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(",.~.ec+m");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "2X;bs;)|", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Duration duration0 = Duration.millis(0L);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(zonedChronology0);
      
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, 80, 0, 0, 48, zonedChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 80 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = " Y@LAKZSER\"Q)A";
      String string1 = "";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(" Y@LAKZSER\"Q)A", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.scan("", 0);
      assertEquals((-1), int0);
      
      String string2 = "org.joda.time.Minutes";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.Minutes");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2020));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("sH++':SBi");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("sH++':SBi", "sH++':SBi", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, true);
      assertEquals(0, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = mutablePeriod0.getFieldType(0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "sH++':SBi", 1, locale0);
      assertEquals((-2), int0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "Mwv8.g";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator("=(f&$c=cvw9>]zi", "Mwv8.g");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix("Mwv8.g", "=(f&$c=cvw9>]zi");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("L+NRc2^!");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_SimpleAffix0.scan("]bVf):-V*Cr", (-225));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      Seconds seconds0 = Seconds.THREE;
      assertEquals(3, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Duration duration0 = seconds0.toStandardDuration();
      assertEquals(3, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(3L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(3000L, duration0.getMillis());
      assertNotNull(duration0);
      
      Duration duration1 = Duration.millis(1760L);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(1L, duration1.getStandardSeconds());
      assertEquals(1760L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertNotNull(duration1);
      
      Duration duration2 = duration0.withDurationAdded((ReadableDuration) duration1, 1691);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertEquals(3, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(3L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(3000L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(1L, duration1.getStandardSeconds());
      assertEquals(1760L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals(49L, duration2.getStandardMinutes());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(2979L, duration2.getStandardSeconds());
      assertEquals(2979160L, duration2.getMillis());
      assertNotNull(duration2);
      
      YearMonth yearMonth0 = new YearMonth();
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth0);
      
      LocalDate localDate0 = yearMonth0.toLocalDate(9);
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(3, localDate0.size());
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(localDate0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(9);
      assertEquals("+00:00:00.009", dateTimeZone0.getID());
      assertEquals("+00:00:00.009", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(3, localDate0.size());
      assertEquals("+00:00:00.009", dateTimeZone0.getID());
      assertEquals("+00:00:00.009", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1391977281320L, dateTime0.getMillis());
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(dateTime0);
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(3, localDate0.size());
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(localDate_Property0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration2, dateTime0, (PeriodType) null);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertEquals(3, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(3L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(3000L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(1L, duration1.getStandardSeconds());
      assertEquals(1760L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals(49L, duration2.getStandardMinutes());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(2979L, duration2.getStandardSeconds());
      assertEquals(2979160L, duration2.getMillis());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(3, localDate0.size());
      assertEquals("+00:00:00.009", dateTimeZone0.getID());
      assertEquals("+00:00:00.009", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1391977281320L, dateTime0.getMillis());
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.parseInto(mutablePeriod0, "@b4wk?\"", 0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "org.joda.time.field.PreciseDateTimeField";
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.field.PreciseDateTimeField", "org.joda.time.field.PreciseDateTimeField", stringArray0, (PeriodPrinter) null, (PeriodParser) null, false, false);
      assertEquals(0, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Separator0);
      assertEquals(0, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMonths();
      assertEquals(0, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder2.toFormatter();
      assertEquals(0, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertTrue(periodFormatter0.isParser());
      assertFalse(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyFirst();
      assertEquals(0, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendSuffix(";");
      assertEquals(0, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 4;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      String string0 = "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-4385), (-4385), (-4385), false, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset");
      assertEquals("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", stringBuffer0.toString());
      assertEquals(60, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      ReadablePeriod readablePeriod0 = null;
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset"));
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.printTo(stringBuffer0, (ReadablePeriod) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("system");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(272, 355, 272, false, 355, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("L&Z+a-f/\"e@", "system", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, false);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      StringBuffer stringBuffer0 = new StringBuffer("L&Z+a-f/\"e@");
      assertEquals(12, stringBuffer0.length());
      assertEquals("L&Z+a-f/\"e@", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Months months0 = Months.FIVE;
      assertEquals(1, months0.size());
      assertEquals(5, months0.getMonths());
      assertNotNull(months0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) months0, locale0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertEquals(12, stringBuffer0.length());
      assertEquals("L&Z+a-f/\"e@", stringBuffer0.toString());
      assertEquals(1, months0.size());
      assertEquals(5, months0.getMonths());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("org.joda.time.Instant", "L&Z+a-f/\"e@");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparator("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.minimumPrintedDigits(355);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      String string1 = "org.joda.time.format.PeriodFormatterBuilder$Separator";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null, "org.joda.time.format.PeriodFormatterBuilder$Separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0);
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder5);
      
      String string0 = "z,[/p>')[b~&AC";
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSeparator("z,[/p>')[b~&AC");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder6);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("z,[/p>')[b~&AC"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains("z,[/p>')[b~&AC"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = null;
      try {
        period0 = new Period(0, 0, 0, 0, 57, 1138, 1810, 0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'minutes'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal((String) null);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0);
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Cannot have two adjacent separators", "PeriodType[");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.parse("gq-PFt1:>&C$", 2905);
      assertEquals((-2906), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[3];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.offerFirst(object0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = null;
      try {
        periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Q*},u(Yu}q^'5{3F\"6", "Q*},u(Yu}q^'5{3F\"6");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Q*},u(Yu}q^'5{3F\"6");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("Q*},u(Yu}q^'5{3F\"6", stringWriter0.toString());
      assertEquals("Q*},u(Yu}q^'5{3F\"6", stringWriter1.toString());
      assertNotNull(stringWriter1);
      
      StringWriter stringWriter2 = stringWriter1.append('s');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertEquals("Q*},u(Yu}q^'5{3F\"6s", stringWriter0.toString());
      assertEquals("Q*},u(Yu}q^'5{3F\"6s", stringWriter1.toString());
      assertEquals("Q*},u(Yu}q^'5{3F\"6s", stringWriter2.toString());
      assertNotNull(stringWriter2);
      
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertEquals("Q*},u(Yu}q^'5{3F\"6s", stringWriter0.toString());
      assertEquals("Q*},u(Yu}q^'5{3F\"6s", stringWriter1.toString());
      assertEquals("Q*},u(Yu}q^'5{3F\"6s", stringWriter2.toString());
      assertEquals("Q*},u(Yu}q^'5{3F\"6s", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_PluralAffix0.printTo((Writer) stringWriter2, (-1144));
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertEquals("Q*},u(Yu}q^'5{3F\"6sQ*},u(Yu}q^'5{3F\"6", stringWriter0.toString());
      assertEquals("Q*},u(Yu}q^'5{3F\"6sQ*},u(Yu}q^'5{3F\"6", stringWriter1.toString());
      assertEquals("Q*},u(Yu}q^'5{3F\"6sQ*},u(Yu}q^'5{3F\"6", stringWriter2.toString());
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-1144));
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertEquals("Q*},u(Yu}q^'5{3F\"6sQ*},u(Yu}q^'5{3F\"6Q*},u(Yu}q^'5{3F\"6", stringWriter0.toString());
      assertEquals("Q*},u(Yu}q^'5{3F\"6sQ*},u(Yu}q^'5{3F\"6Q*},u(Yu}q^'5{3F\"6", stringWriter1.toString());
      assertEquals("Q*},u(Yu}q^'5{3F\"6sQ*},u(Yu}q^'5{3F\"6Q*},u(Yu}q^'5{3F\"6", stringWriter2.toString());
      assertEquals(55, stringBuffer0.length());
      assertEquals("Q*},u(Yu}q^'5{3F\"6sQ*},u(Yu}q^'5{3F\"6Q*},u(Yu}q^'5{3F\"6", stringBuffer0.toString());
      
      int int0 = periodFormatterBuilder_PluralAffix0.scan("", 0);
      assertEquals((-1), int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.maximumParsedDigits((-1));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendPrefix((String[]) null, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("$-");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.minimumPrintedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendPrefix("$-", "$-");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodParser periodParser0 = periodFormatterBuilder6.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertNotNull(periodParser0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("$-");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 0, false, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      int int0 = periodFormatterBuilder_FieldFormatter1.getFieldType();
      assertEquals(0, int0);
      assertEquals(0, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder2.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder7);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("$-"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains("$-"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      Minutes minutes0 = Minutes.ZERO;
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.countFieldsToPrint(minutes0, 0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSeparatorIfFieldsAfter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendPrefix(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendPrefix("");
      assertEquals(3, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.printZeroIfSupported();
      assertEquals(3, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.printZeroNever();
      assertEquals(3, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertNotNull(periodFormatterBuilder9);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(" > ", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>(0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Period period0 = Period.weeks(28265625);
      assertNotNull(period0);
      
      Period period1 = period0.withDays(1769);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.minusWeeks(625);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      Days days0 = period2.toStandardDays();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertEquals(197856769, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Locale locale0 = null;
      try {
        locale0 = new Locale("", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("zP:N[vbs=n~");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('5');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("5", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("5", charArrayWriter1.toString());
      assertNotNull(charArrayWriter1);
      
      int int0 = 1217;
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) charArrayWriter1, 1217);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("5zP:N[vbs=n~", charArrayWriter0.toString());
      assertEquals(12, charArrayWriter0.size());
      assertEquals("5zP:N[vbs=n~", charArrayWriter1.toString());
      assertEquals(12, charArrayWriter1.size());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_SimpleAffix0.finish((Set<PeriodFormatterBuilder.PeriodFieldAffix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSeparator("org.joda.time.format.PeriodFormat", "org.joda.time.format.PeriodFormat");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormat", "8SqdHl(#M9cl6j");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = 0;
      int int1 = 1993;
      PeriodFormatter periodFormatter0 = periodFormatterBuilder6.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      StringBuffer stringBuffer0 = new StringBuffer(1993);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 0);
      assertEquals("8SqdHl(#M9cl6j", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder1.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder8.appendPrefix("org.joda.time.format.PeriodFormat");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder9);
      
      PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder1.maximumParsedDigits(1993);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder10);
      
      int int2 = periodFormatterBuilder_PluralAffix0.parse("org.joda.time.format.PeriodFormat", 0);
      assertEquals(33, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder2.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertNotNull(periodFormatterBuilder11);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.joda.time.format.PeriodFormat";
      stringArray0[1] = null;
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        periodFormatterBuilder6.appendSeparator("org.joda.time.format.PeriodFormat", (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = null;
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("", "N<=`4n%XMhGG(+");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator((String) null, (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("(b0r*.+");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Period period0 = Period.hours((-3189));
      assertNotNull(period0);
      
      Period period1 = period0.plusMinutes((-1868));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.minusHours(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertSame(period1, period2);
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertNotNull(period2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Period period3 = period2.withFieldAdded(durationFieldType0, 0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertSame(period1, period2);
      assertSame(period1, period3);
      assertSame(period2, period3);
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertSame(period3, period1);
      assertSame(period3, period2);
      assertNotSame(period3, period0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period0));
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(period3);
      
      Period period4 = period3.withDays((-1868));
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertSame(period1, period2);
      assertSame(period1, period3);
      assertSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertSame(period3, period1);
      assertSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(period4);
      
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      periodFormatterBuilder_Literal0.printTo((Writer) stringWriter0, (ReadablePeriod) period4, locale0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period3);
      assertNotSame(period0, period4);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(period1, period4);
      assertSame(period1, period2);
      assertSame(period1, period3);
      assertSame(period2, period3);
      assertNotSame(period2, period4);
      assertNotSame(period2, period0);
      assertSame(period2, period1);
      assertSame(period3, period1);
      assertSame(period3, period2);
      assertNotSame(period3, period4);
      assertNotSame(period3, period0);
      assertNotSame(period4, period2);
      assertNotSame(period4, period1);
      assertNotSame(period4, period3);
      assertNotSame(period4, period0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period3));
      assertFalse(period0.equals((Object)period4));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period4));
      assertFalse(period2.equals((Object)period4));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period3.equals((Object)period4));
      assertFalse(period3.equals((Object)period0));
      assertFalse(period4.equals((Object)period2));
      assertFalse(period4.equals((Object)period1));
      assertFalse(period4.equals((Object)period3));
      assertFalse(period4.equals((Object)period0));
      assertEquals("(b0r*.+", stringWriter0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      
      Minutes minutes0 = Minutes.MIN_VALUE;
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MIN_VALUE, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      periodFormatterBuilder_Literal0.printTo((Writer) stringWriter0, (ReadablePeriod) minutes0, (Locale) null);
      assertEquals("(b0r*.+(b0r*.+", stringWriter0.toString());
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MIN_VALUE, minutes0.getMinutes());
      
      Minutes minutes1 = Minutes.TWO;
      assertNotSame(minutes1, minutes0);
      assertFalse(minutes1.equals((Object)minutes0));
      assertEquals(2, minutes1.getMinutes());
      assertEquals(1, minutes1.size());
      assertNotNull(minutes1);
      
      int int0 = periodFormatterBuilder_Literal0.countFieldsToPrint(minutes1, 0, (Locale) null);
      assertEquals(0, int0);
      assertNotSame(minutes1, minutes0);
      assertFalse(minutes1.equals((Object)minutes0));
      assertEquals(2, minutes1.getMinutes());
      assertEquals(1, minutes1.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "^W7S']z/cN@i";
      stringArray0[2] = "";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      assertEquals(3, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix("^W7S']z/cN@i");
      assertEquals(3, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.maximumParsedDigits(1541);
      assertEquals(3, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendDays();
      assertEquals(3, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSuffix("");
      assertEquals(3, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2862L));
      assertNotNull(mutablePeriod0);
      
      MutablePeriod mutablePeriod1 = mutablePeriod0.toMutablePeriod();
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertNotNull(mutablePeriod1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.lookup(linkedList0, (Collection<Locale>) null);
      assertEquals(0, linkedList0.size());
      assertNull(locale0);
      
      int int0 = periodFormatterBuilder_Literal0.parseInto(mutablePeriod1, ")2^`nxVi", 1, (Locale) null);
      assertEquals(1, int0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(")2^`nxVi");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_CompositeAffix0.getAffixes();
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Ny`wEYXK`-5a{% ", "Ny`wEYXK`-5a{% ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_PluralAffix0.scan("Ny`wEYXK`-5a{% ", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Ny`wEYXK`-5a{% ";
      stringArray0[1] = "Ny`wEYXK`-5a{% ";
      stringArray0[2] = "Ny`wEYXK`-5a{% ";
      stringArray0[3] = "";
      stringArray0[4] = "Ny`wEYXK`-5a{% ";
      stringArray0[5] = "Ny`wEYXK`-5a{% ";
      stringArray0[6] = "Ny`wEYXK`-5a{% ";
      String[] stringArray1 = null;
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix(stringArray0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Minutes minutes0 = Minutes.ONE;
      assertEquals(1, minutes0.size());
      assertEquals(1, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      Locale locale0 = Locale.forLanguageTag("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayScript();
      assertEquals("", string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(string0);
      
      int int0 = periodFormatterBuilder_Literal0.calculatePrintedLength(minutes0, locale0);
      assertEquals(0, int0);
      assertEquals(1, minutes0.size());
      assertEquals(1, minutes0.getMinutes());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[5];
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodPrinter0);
      
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string1 = "_-F<{X";
      stringArray0[3] = "_-F<{X";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // _-F<{X
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Ny`wEYXK`-5a{% ", "Ny`wEYXK`-5a{% ");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.scan("Ny`wEYXK`-5a{% ", 0);
      assertEquals(0, int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Ny`wEYXK`-5a{% ";
      stringArray0[1] = "Ny`wEYXK`-5a{% ";
      stringArray0[2] = "Ny`wEYXK`-5a{% ";
      stringArray0[3] = "";
      stringArray0[4] = "Ny`wEYXK`-5a{% ";
      stringArray0[5] = "Ny`wEYXK`-5a{% ";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ny`wEYXK`-5a{% ");
      assertFalse(boolean0);
      
      stringArray0[6] = "Ny`wEYXK`-5a{% ";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix(stringArray0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "Instant must not be null";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Instant must not be null", "org.joda.time.format.PeriodFormatterBuilder$RegExAffix");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(0);
      assertEquals(108, int0);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(0);
      assertEquals(108, int1);
      assertTrue(int1 == int0);
      
      int int2 = (-57);
      int int3 = periodFormatterBuilder_CompositeAffix0.parse("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", (-57));
      assertEquals((-57), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("Instant must not be null"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("DateTimeZone.setDefault");
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.joda.time.format.PeriodFormatterBuilder$RegExAffix";
      PrintStream printStream0 = mockPrintStream0.format("DateTimeZone.setDefault", objectArray0);
      assertEquals(1, objectArray0.length);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      assertEquals(1, objectArray0.length);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$RegExAffix", 837, 837);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSuffix(" ]/[D=*", " ]/[D=*");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(" ]/[D=*");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("must be in the range [", "$r':Jq");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // $r':Jq
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(" P;ahjl_0X4e/a%_^Ma", " P;ahjl_0X4e/a%_^Ma");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      boolean boolean0 = periodFormatterBuilder_PluralAffix0.matchesOtherAffix(30, "=()-id]}%Gt)'c^NH", 30);
      assertFalse(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(" P;ahjl_0X4e/a%_^Ma"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertFalse(linkedList0.contains(" P;ahjl_0X4e/a%_^Ma"));
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      Foo foo0 = Foo.days(30);
      assertEquals(1, foo0.size());
      assertNotNull(foo0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayName();
      assertEquals("Chinese (China)", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.calculatePrintedLength(foo0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.joda.time.base.AbstractPeriod";
      stringArray0[3] = "";
      stringArray0[4] = "ReadablePartial objects must have matching field types";
      stringArray0[5] = "qV7n SWVF.IJh+C-0";
      stringArray0[6] = "";
      stringArray0[7] = "org.joda.time.base.BaseDateTime";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int0 = periodFormatterBuilder_RegExAffix0.scan("ReadablePartial objects must have matching field types", 46);
      assertEquals(46, int0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(2948);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.rejectSignedValues(false);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("3BttRb( 4W)~8j", "3BttRb( 4W)~8j");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "fuH8EQWJ!G{O[&z'W`";
      stringArray0[1] = "";
      stringArray0[2] = "fuH8EQWJ!G{O[&z'W`";
      stringArray0[3] = "YearMonthDayTime";
      stringArray0[4] = "YearMonthDayTime";
      stringArray0[5] = "fuH8EQWJ!G{O[&z'W`";
      stringArray0[6] = "fuH8EQWJ!G{O[&z'W`";
      stringArray0[7] = "YearMonthDayTime";
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSeparator("YearMonthDayTime", "fuH8EQWJ!G{O[&z'W`", stringArray0);
      assertEquals(8, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendPrefix("=sZs");
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder7);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder7.appendLiteral("3BttRb( 4W)~8j");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1";
      stringArray0[1] = "n6Dlc_tCXSL5G +";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix";
      stringArray0[5] = "g##ERuF_|o=DW=s2";
      stringArray0[6] = "~1";
      stringArray0[7] = "Fcrr+";
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodParser periodParser0 = periodFormatterBuilder6.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendLiteral("Invalid min days in first week: ");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("Invalid min days in first week: ", "Invalid min days in first week: ");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendPrefix("Invalid min days in first week: ", "Invalid min days in first week: ");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder5.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparator("Invalid min days in first week: ", "Invalid min days in first week: ");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodParser periodParser0 = periodFormatterBuilder5.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodParser0);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertNotNull(periodFormatterBuilder8);
      
      periodFormatterBuilder5.clear();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder3.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertNotNull(periodFormatterBuilder9);
      
      PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder9.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder10);
      
      PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder4.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder11);
      
      PeriodParser periodParser1 = periodFormatterBuilder9.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertNotSame(periodParser1, periodParser0);
      assertFalse(periodParser1.equals((Object)periodParser0));
      assertNotNull(periodParser1);
      
      PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder2.appendHours();
      assertSame(periodFormatterBuilder12, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder12);
      
      PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder13);
      
      PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder1.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder14, periodFormatterBuilder9);
      assertNotNull(periodFormatterBuilder14);
      
      PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder13.appendSeparator("Invalid min days in first week: ", "8:*^p");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder13, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder15, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder15);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder5.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodPrinter0);
      
      PeriodFormatter periodFormatter1 = periodFormatterBuilder3.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertNotNull(periodFormatter1);
      
      PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder6.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder16, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder16);
      assertNotNull(periodFormatterBuilder16);
      
      PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder10.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder17);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder17);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder17);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder17);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder17, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder17);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder17);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder15);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder16);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder13);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder14);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder17);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Invalid min days in first week: ";
      stringArray0[1] = "8:*^p";
      stringArray0[2] = "8:*^p";
      stringArray0[3] = "8:*^p";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int0 = periodFormatterBuilder_RegExAffix0.parse("", (-1063));
      assertEquals(1062, int0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.tz.DefaultNameProvider");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", (String) null, (String[]) null, periodFormatterBuilder_Literal0, (PeriodParser) null, true, false);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, (PeriodParser) null);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-659));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer0, 2556);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      int int0 = periodFormatterBuilder_SimpleAffix0.calculatePrintedLength((-250));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.joda.time.UTCDateTimeZone";
      stringArray0[1] = "<`4";
      stringArray0[2] = "";
      stringArray0[3] = "bU+Xs8n&9R`xQ";
      stringArray0[4] = "";
      stringArray0[5] = "d6CY%J`vZq5IUFtqQ&";
      stringArray0[6] = "No field to apply suffix to";
      stringArray0[7] = "C!t7Jz gD>A$Fq7}Ru#";
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "No field to apply suffix to";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSeparator("Printing is not supported", "Printing is not supported", (String[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("$a5R!yP M1Rj`rn!j");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$a5R!yP M1Rj`rn!j";
      stringArray0[1] = "$a5R!yP M1Rj`rn!j";
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "$a5R!yP M1Rj`rn!j";
      stringArray1[1] = "$a5R!yP M1Rj`rn!j";
      stringArray1[2] = "$a5R!yP M1Rj`rn!j";
      stringArray1[3] = "$a5R!yP M1Rj`rn!j";
      stringArray1[4] = "$a5R!yP M1Rj`rn!j";
      stringArray1[5] = "$a5R!yP M1Rj`rn!j";
      stringArray1[6] = "$a5R!yP M1Rj`rn!j";
      stringArray1[7] = "$a5R!yP M1Rj`rn!j";
      stringArray1[8] = "$a5R!yP M1Rj`rn!j";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = null;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = null;
      try {
        periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("i;\"&:^", (String) null, stringArray0, periodFormatterBuilder_Literal0, (PeriodParser) null, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Zk=H";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_RegExAffix0.parse("Zk=H", 0);
      assertEquals(4, int1);
      assertEquals(1, stringArray0.length);
      assertFalse(int1 == int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("Zk=H", "0:8q\"M=h{@H&");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix((String) null, "G");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer("G");
      assertEquals(1, stringBuffer0.length());
      assertEquals("G", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('d');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("d", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("d", charArrayWriter1.toString());
      assertNotNull(charArrayWriter1);
      
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) charArrayWriter1, 0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("dGG", charArrayWriter0.toString());
      assertEquals(3, charArrayWriter0.size());
      assertEquals(3, charArrayWriter1.size());
      assertEquals("dGG", charArrayWriter1.toString());
      
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, (-6438));
      assertEquals(3, stringBuffer0.length());
      assertEquals("GGG", stringBuffer0.toString());
      
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 1980);
      assertEquals(5, stringBuffer0.length());
      assertEquals("GGGGG", stringBuffer0.toString());
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "G";
      stringArray0[1] = "G";
      stringArray0[2] = "G";
      stringArray0[3] = null;
      stringArray0[4] = "G";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("K0gtUQH?r8D~- 8");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      int int0 = 70;
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.minimumPrintedDigits(70);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendPrefix("1W$'?c)b%>ZW o5Yn");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter";
      stringArray0[1] = "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter";
      stringArray0[2] = "S:(TC_+lV*`76>@w";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", "S:(TC_+lV*`76>@w", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(mutableDateTime0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period(mutableDateTime0, (ReadableInstant) null, periodType0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(period0);
      
      Period period1 = period0.plusYears(1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(period1);
      
      Period period2 = period1.minusYears(1);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertNotNull(period2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.calculatePrintedLength(period2, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix((String) null, "G");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer("G");
      assertEquals(1, stringBuffer0.length());
      assertEquals("G", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('d');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("d", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("d", charArrayWriter1.toString());
      assertNotNull(charArrayWriter1);
      
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) charArrayWriter1, 0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals(3, charArrayWriter0.size());
      assertEquals("dGG", charArrayWriter0.toString());
      assertEquals(3, charArrayWriter1.size());
      assertEquals("dGG", charArrayWriter1.toString());
      
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 0);
      assertEquals(3, stringBuffer0.length());
      assertEquals("GGG", stringBuffer0.toString());
      
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 1980);
      assertEquals(5, stringBuffer0.length());
      assertEquals("GGGGG", stringBuffer0.toString());
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "G";
      stringArray0[1] = "G";
      stringArray0[2] = "G";
      stringArray0[3] = null;
      stringArray0[4] = "G";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 0;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("halfdayOfDay", "halfdayOfDay");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Stream<PeriodFormatterBuilder.PeriodFieldAffix> stream0 = linkedHashSet0.stream();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(stream0);
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("halfdayOfDay");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("halfdayOfDay", 0);
      assertEquals(0, int0);
      
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      StringWriter stringWriter0 = new StringWriter(44);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('3');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("3", stringWriter0.toString());
      assertEquals("3", stringWriter1.toString());
      assertNotNull(stringWriter1);
      
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "halfdayOfDay", 44, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "zR5unPki=T9!Bq";
      stringArray0[1] = "9bNt`";
      stringArray0[2] = "9bNt`";
      stringArray0[3] = "9bNt`";
      stringArray0[4] = "df^tC4pr`8SmnS|kP-";
      stringArray0[5] = "9bNt`";
      stringArray0[6] = "q?kVXL]HQmCl";
      stringArray0[7] = "9bNt`";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendSeparator("9bNt`", "9bNt`", stringArray0);
      assertEquals(8, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSeparator("1A|v[K(>_a!");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      StringBuffer stringBuffer0 = new StringBuffer(3600000);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Foo foo0 = Foo.FIVE;
      assertEquals(1, foo0.size());
      assertNotNull(foo0);
      
      StringBuffer stringBuffer1 = stringBuffer0.append("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      assertEquals(55, stringBuffer0.length());
      assertEquals(55, stringBuffer1.length());
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      periodFormatterBuilder_Literal0.printTo(stringBuffer0, (ReadablePeriod) foo0, locale0);
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", stringBuffer0.toString());
      assertEquals(55, stringBuffer0.length());
      assertEquals(1, foo0.size());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix";
      stringArray0[1] = "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix";
      stringArray0[2] = "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix";
      stringArray0[3] = "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix";
      stringArray0[4] = "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3600000, 3600000, 3600000, false, 2124, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      boolean boolean0 = periodFormatterBuilder_FieldFormatter0.isZero(foo0);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      assertEquals(1, foo0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(";U>m6;TxE4M)O?");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer(468);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(";U>m6;TxE4M)O?");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodType periodType1 = PeriodType.yearWeekDayTime();
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("YearWeekDayTime", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertNotNull(periodType1);
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals("YearWeekDayTime", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertNotNull(periodFormatter1);
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals("YearWeekDayTime", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertNotNull(periodFormat_DynamicWordBased0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((-266L), periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("YearWeekDayTime", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = periodFormatter1.parseInto(mutablePeriod0, "", 468);
      assertEquals((-469), int0);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals("YearWeekDayTime", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      
      MutablePeriod mutablePeriod1 = new MutablePeriod();
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertNotNull(mutablePeriod1);
      
      PeriodType periodType2 = periodType0.withWeeksRemoved();
      assertNotSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      assertSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType1));
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertEquals("YearDay", periodType2.getName());
      assertEquals(2, periodType2.size());
      assertNotNull(periodType2);
      
      periodFormat_DynamicWordBased0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod1, locale0);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertEquals(";U>m6;TxE4M)O?", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals("YearWeekDayTime", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      
      // Undeclared exception!
      try { 
        stringBuffer0.insert(468, (Object) periodFormat_DynamicWordBased0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 468
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      LocalDate localDate0 = new LocalDate(0L);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertEquals(3, localDate0.size());
      assertEquals(73281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      int int0 = 1744;
      DateTime dateTime1 = dateTime0.withYear(1744);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(3, localDate0.size());
      assertEquals(73281320L, dateTime0.getMillis());
      assertEquals((-7131814718680L), dateTime1.getMillis());
      assertNotNull(dateTime1);
      
      Months months0 = Months.monthsBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(3, localDate0.size());
      assertEquals(73281320L, dateTime0.getMillis());
      assertEquals((-7131814718680L), dateTime1.getMillis());
      assertEquals(2712, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo((Writer) null, (ReadablePeriod) months0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(0);
      assertEquals(0, int0);
      
      String string0 = "org.joda.time.format.DateTimeFormatterBuilder";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("org.joda.time.format.DateTimeFormatterBuilder");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      periodFormatterBuilder1.clear();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      int int1 = periodFormatterBuilder_PluralAffix0.scan("Illegal rounding mode: ", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "PP+R2!!8kIyYS";
      stringArray0[1] = "Illegal rounding mode: ";
      stringArray0[2] = "PP+R2!!8kIyYS";
      stringArray0[3] = "PP+R2!!8kIyYS";
      stringArray0[4] = "org.joda.time.format.DateTimeFormatterBuilder";
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased((PeriodFormatter) null);
      assertNotNull(periodFormat_DynamicWordBased0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("PP+R2!!8kIyYS", "org.joda.time.format.DateTimeFormatterBuilder", stringArray0, (PeriodPrinter) null, periodFormat_DynamicWordBased0, true, true);
      assertEquals(5, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Separator0, (PeriodParser) periodFormatterBuilder_Separator0);
      assertEquals(5, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      assertSame(periodPrinter0, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodPrinter0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("Illegal rounding mode: ", "!E]g");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth0);
      
      Foo foo0 = Foo.days(0);
      assertEquals(1, foo0.size());
      assertNotNull(foo0);
      
      YearMonth yearMonth1 = yearMonth0.plus(foo0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertTrue(yearMonth1.equals((Object)yearMonth0));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, foo0.size());
      assertEquals(2014, yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth1);
      
      StringBuffer stringBuffer0 = new StringBuffer("org/joda/time/tz/data");
      assertEquals("org/joda/time/tz/data", stringBuffer0.toString());
      assertEquals(21, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) null, instant0, (PeriodType) null);
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.forLanguageTag("org/joda/time/tz/data");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("doPER%?;P=7r.");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = 4437;
      int int1 = periodFormatterBuilder_SimpleAffix0.scan("doPER%?;P=7r.", 4437);
      assertEquals((-4438), int1);
      assertFalse(int1 == int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertNotNull(periodFormatter1);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertFalse(periodFormatter0.equals((Object)periodFormatter1));
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("doPER%?;P=7r.", "doPER%?;P=7r.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "XS.N";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("XS.N");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("XS.N", 0);
      assertEquals(0, int0);
      
      String[] stringArray0 = periodFormatterBuilder_SimpleAffix0.getAffixes();
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "XS.N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix((String) null);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_SimpleAffix0.scan((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.append(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(0);
      assertEquals(0, int0);
      
      periodFormatterBuilder0.clear();
      String string0 = "Illegal rounding mode: ";
      int int1 = periodFormatterBuilder_PluralAffix0.scan("Illegal rounding mode: ", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased((PeriodFormatter) null);
      assertNotNull(periodFormat_DynamicWordBased0);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNotNull(periodPrinter0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("Illegal rounding mode: ", "!E]g");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "V]w";
      stringArray0[1] = "PeriodFormat.weeks.list";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      boolean boolean0 = periodFormatterBuilder_RegExAffix0.matchesOtherAffix(0, "%", 1941);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("OUTgR_sBdAK", "OUTgR_sBdAK");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("OUTgR_sBdAK");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.println('n');
      periodFormatterBuilder_PluralAffix0.printTo((Writer) mockPrintWriter0, 0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "OUTgR_sBdAK";
      stringArray0[1] = "OUTgR_sBdAK";
      stringArray0[2] = "OUTgR_sBdAK";
      stringArray0[3] = "OUTgR_sBdAK";
      stringArray0[4] = "OUTgR_sBdAK";
      stringArray0[5] = "OUTgR_sBdAK";
      stringArray0[6] = "OUTgR_sBdAK";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int0 = periodFormatterBuilder_RegExAffix0.parse("OUTgR_sBdAK", 467);
      assertEquals((-468), int0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix((String) null, (String) null);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("a");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      PrintWriter printWriter0 = mockPrintWriter1.append('');
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertNotNull(printWriter0);
      
      mockPrintWriter0.close();
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter0.equals((Object)printWriter0));
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_PluralAffix0.printTo((Writer) printWriter0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Illegal instant due to time zone offset transition (");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.calculatePrintedLength(0);
      assertEquals(52, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSuffix("{}VpxDfuS,6IM-jGROs");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      String string0 = "6";
      String string1 = "QE82P%2F*l7dD_";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("6", "QE82P%2F*l7dD_");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = 3786;
      int int1 = periodFormatterBuilder_PluralAffix0.scan("QE82P%2F*l7dD_", 3786);
      assertEquals((-3787), int1);
      assertFalse(int1 == int0);
      
      int int2 = (-986);
      boolean boolean0 = true;
      int int3 = (-636);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[8];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = null;
      try {
        periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((PeriodFormatterBuilder.FieldFormatter) null, periodFormatterBuilder_PluralAffix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix((String[]) null, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(12740625);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("Pw8o%Z[");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.maximumParsedDigits((-2402));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("", "Pw8o%Z[");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Literal0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^6mGa";
      stringArray0[1] = "";
      stringArray0[2] = "%G^v3IHEg(";
      stringArray0[3] = "-R";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "9";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 10
         // %G^v3IHEg(
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("?");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "?";
      stringArray0[1] = "?";
      stringArray0[2] = "?";
      stringArray0[3] = "?";
      stringArray0[4] = "?";
      stringArray0[5] = "?";
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '?' near index 0
         // ?
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("?k$$C``F");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(410);
      assertEquals(16, int0);
      
      StringBuffer stringBuffer0 = new StringBuffer("Days");
      assertEquals(4, stringBuffer0.length());
      assertEquals("Days", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 0);
      assertEquals(20, stringBuffer0.length());
      assertEquals("Days?k$$C``F?k$$C``F", stringBuffer0.toString());
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(410, 410, 410, false, 410, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      int int1 = periodFormatterBuilder_FieldFormatter0.getFieldType();
      assertEquals(410, int1);
      assertFalse(int1 == int0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix1 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertFalse(periodFormatterBuilder_CompositeAffix1.equals((Object)periodFormatterBuilder_CompositeAffix0));
      assertNotNull(periodFormatterBuilder_CompositeAffix1);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(false);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.maximumParsedDigits(1072);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder5.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodPrinter0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_CompositeAffix0.parse((String) null, 410);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[3];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("3T", "3T");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1), 0, 1860, true, (-1), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(3, periodFormatterBuilder_FieldFormatterArray0.length);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter0;
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      assertEquals(3, periodFormatterBuilder_FieldFormatterArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      periodFormatterBuilder_FieldFormatterArray0[1] = periodFormatterBuilder_FieldFormatter1;
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter2 = new PeriodFormatterBuilder.FieldFormatter(0, 270, 270, true, (-786), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertEquals(3, periodFormatterBuilder_FieldFormatterArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter2.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertFalse(periodFormatterBuilder_FieldFormatter2.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertNotNull(periodFormatterBuilder_FieldFormatter2);
      
      periodFormatterBuilder_FieldFormatterArray0[2] = periodFormatterBuilder_FieldFormatter2;
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("%~4OZ]c7\u0003fE7R");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter3 = new PeriodFormatterBuilder.FieldFormatter(1860, 121, 1860, true, 121, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      assertEquals(3, periodFormatterBuilder_FieldFormatterArray0.length);
      assertFalse(periodFormatterBuilder_FieldFormatter3.equals((Object)periodFormatterBuilder_FieldFormatter2));
      assertFalse(periodFormatterBuilder_FieldFormatter3.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter3.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparator("Builder has created neither a printer nor a parser", "Builder has created neither a printer nor a parser");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder5);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Builder has created neither a printer nor a parser";
      stringArray0[1] = "Builder has created neither a printer nor a parser";
      stringArray0[2] = "Builder has created neither a printer nor a parser";
      stringArray0[3] = "Builder has created neither a printer nor a parser";
      stringArray0[4] = "Builder has created neither a printer nor a parser";
      stringArray0[5] = "Builder has created neither a printer nor a parser";
      stringArray0[6] = "Builder has created neither a printer nor a parser";
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSeparator("Builder has created neither a printer nor a parser", "Builder has created neither a printer nor a parser", stringArray0);
      assertEquals(7, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendMillis3Digit();
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder2.appendPrefix("Builder has created neither a printer nor a parser", "wj,$wmbX?IO?Gec1i");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertNotNull(periodFormatterBuilder9);
      
      PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder1.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder10);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      StringBuffer stringBuffer0 = new StringBuffer("wj,$wmbX?IO?Gec1i");
      assertEquals(17, stringBuffer0.length());
      assertEquals("wj,$wmbX?IO?Gec1i", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gregorianChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfMonth(2549);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2549 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("PeriodFormat.commandand");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_SimpleAffix0.getAffixes();
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 0;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodParser periodParser0 = periodFormatterBuilder1.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertNotNull(periodParser0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSeparatorIfFieldsBefore("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendLiteral("AS;");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "H34-";
      stringArray0[1] = "H34-";
      stringArray0[2] = "H34-";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("AS;", "H34-", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append((PeriodPrinter) periodFormatterBuilder_Separator0, (PeriodParser) periodFormatterBuilder_Separator0);
      assertEquals(3, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMonths();
      assertEquals(3, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendDays();
      assertEquals(3, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSeparator("", "bo3bm}qa-\"'M#GlzE", stringArray0);
      assertEquals(3, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "M<%Io>*274OI|";
      stringArray0[1] = "U5M`|LXN";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("M<%Io>*274OI|", "U5M`|LXN", stringArray0);
      assertEquals(2, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "z2";
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("z2");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ":";
      stringArray0[1] = ":";
      stringArray0[2] = ":";
      stringArray0[3] = ":";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(":", ":", stringArray0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparatorIfFieldsAfter(":");
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendPrefix(":", ":");
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder5.toFormatter();
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparatorIfFieldsAfter("org.joda.time.format.PeriodFormatterBuilder$PluralAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendPrefix("'!.f&ef^", "org.joda.time.format.PeriodFormatterBuilder$PluralAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("XXZ;QABIXl'l", "Hzz `RPq}1A");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add(periodFormatterBuilder_PluralAffix0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "XXZ;QABIXl'l");
      assertEquals("XXZ;QABIXl'l", stringBuffer0.toString());
      assertEquals(12, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-1561));
      assertEquals(23, stringBuffer0.length());
      assertEquals("XXZ;QABIXl'lHzz `RPq}1A", stringBuffer0.toString());
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet1 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      
      boolean boolean1 = linkedHashSet1.add(periodFormatterBuilder_PluralAffix0);
      assertTrue(boolean1);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet1.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      
      Stream<PeriodFormatterBuilder.PeriodFieldAffix> stream0 = linkedHashSet1.parallelStream();
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(linkedHashSet1.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      assertNotNull(stream0);
      
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet1);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(linkedHashSet1.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringWriter stringWriter0 = new StringWriter(3688);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) stringWriter0, 37);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.write("w$[-", 0, 0);
      assertEquals("", stringWriter0.toString());
      
      periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer0, (-1015));
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      String[] stringArray0 = periodFormatterBuilder_SimpleAffix0.getAffixes();
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) stringWriter0, 2084);
      assertEquals("", stringWriter0.toString());
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparator("", "$p9");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.minimumPrintedDigits(1387);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSeparatorIfFieldsBefore("$p9");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "bbA%:CWV8S";
      stringArray0[1] = "bbA%:CWV8S";
      stringArray0[2] = "bbA%:CWV8S";
      stringArray0[3] = "bbA%:CWV8S";
      stringArray0[4] = "bbA%:CWV8S";
      stringArray0[5] = "bbA%:CWV8S";
      stringArray0[6] = "bbA%:CWV8S";
      stringArray0[7] = "bbA%:CWV8S";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("bbA%:CWV8S", "bbA%:CWV8S", stringArray0);
      assertEquals(8, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsBefore("bbA%:CWV8S");
      assertEquals(8, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("1/", "Parsing not supported");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength((-1043));
      assertEquals(21, int0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 21);
      assertEquals("Parsing not supported", stringWriter0.toString());
      assertEquals(21, stringBuffer0.length());
      assertEquals("Parsing not supported", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      int int0 = 15;
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.minimumPrintedDigits(15);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.rejectSignedValues(false);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      // Undeclared exception!
      try { 
        MutablePeriod.parse("A#+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"A#+\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      periodFormatterBuilder1.clear();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[5];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("]b;h", "Literal must not be null");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",(rW>");
      assertNotNull(mockPrintWriter0);
      
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) mockPrintWriter0, (-2421));
      try { 
        MockURI.URI("7iBcTFTK", "org.joda.time.MonthDay$Property", "(He(/P", "(He(/P", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 7iBcTFTK://org.joda.time.MonthDay$Property(He(/P?(He(/P#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("p->[pbdRZ?A]Ij");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "Y`WGZ<";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator("p->[pbdRZ?A]Ij", "Y`WGZ<");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("se&?la", "se&?la");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("se&?la", 86400);
      assertEquals((-86401), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix((String) null, (String) null);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("nKYE9;H{e*en");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      String string0 = "7:l";
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix("7:l");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.maximumParsedDigits(1321);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|/d(WVi_$L<8~";
      stringArray0[1] = "";
      stringArray0[2] = "Style '--' is invalid";
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 13
         // |/d(WVi_$L<8~
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparator("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix((String[]) null, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("org.joda.time.format.PeriodFormatterBuilder");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder";
      stringArray0[1] = "org.joda.time.format.PeriodFormatterBuilder";
      stringArray0[2] = "org.joda.time.format.PeriodFormatterBuilder";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int0 = periodFormatterBuilder_RegExAffix0.parse("", 153692453);
      assertEquals((-153692454), int0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.MonthDay$Property");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.MonthDay$Property");
      assertEquals(31, stringBuffer0.length());
      assertEquals("org.joda.time.MonthDay$Property", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = stringBuffer0.append('8');
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(32, stringBuffer0.length());
      assertEquals("org.joda.time.MonthDay$Property8", stringBuffer0.toString());
      assertEquals("org.joda.time.MonthDay$Property8", stringBuffer1.toString());
      assertEquals(32, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      
      periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer0, 44);
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals(63, stringBuffer0.length());
      assertEquals("org.joda.time.MonthDay$Property8org.joda.time.MonthDay$Property", stringBuffer0.toString());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder$RegExAffix";
      stringArray0[1] = "";
      stringArray0[2] = "org.joda.time.format.PeriodFormatterBuilder$RegExAffix";
      stringArray0[3] = "org.joda.time.MonthDay$Property";
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1, 2679, 57, true, 88, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", "org.joda.time.format.PeriodFormatterBuilder$RegExAffix", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      assertEquals(4, stringArray0.length);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Separator1.countFieldsToPrint((ReadablePeriod) null, 0, locale0);
      assertEquals(0, int0);
      assertEquals(4, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormat_DynamicWordBased0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("EvL%7<p{`/Z mYMcF)", "org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1", stringArray0, periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0, true, true);
      assertEquals(0, stringArray0.length);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1"));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormat_DynamicWordBased0);
      assertEquals(0, stringArray0.length);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertFalse(linkedList0.contains("org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1"));
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder_Separator1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator1.countFieldsToPrint((ReadablePeriod) null, 0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.minimumPrintedDigits(538);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "h(D!U^_-9B";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("h(D!U^_-9B", "K{PGvw&2&a", stringArray0);
      assertEquals(1, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeconds();
      assertEquals(1, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroAlways();
      assertEquals(1, stringArray0.length);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder6);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("org.joda.time.format.PeriodFormatterBuilder$CompositeAffix");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      String string1 = "";
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparator("org.joda.time.format.PeriodFormatterBuilder$CompositeAffix", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSuffix("", "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(1512);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "B<gZXHLWed--{`";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)7;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-50), (byte)7}, byteArray0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("B<gZXHLWed--{`");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      String string1 = "!~5IyNKB3sMY";
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix("B<gZXHLWed--{`", "!~5IyNKB3sMY");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      stringArray0[0] = "S,m]UUT 0";
      stringArray0[1] = "I;\"&:^";
      stringArray0[2] = "YearWeekDayTime";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      LinkedList<PeriodFormatterBuilder.PeriodFieldAffix> linkedList0 = new LinkedList<PeriodFormatterBuilder.PeriodFieldAffix>();
      Consumer<PeriodFormatterBuilder.PeriodFieldAffix> consumer0 = (Consumer<PeriodFormatterBuilder.PeriodFieldAffix>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.forEach(consumer0);
      linkedHashSet0.add(periodFormatterBuilder_RegExAffix0);
      linkedHashSet0.addAll(linkedList0);
      periodFormatterBuilder_RegExAffix0.finish(linkedHashSet0);
      periodFormatterBuilder_RegExAffix0.scan("S,m]UUT 0", (-278));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("YearWeekDayTime");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendYears();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("q-2bA~BX](FW*xe@9K");
      Locale locale0 = Locale.CANADA_FRENCH;
      PeriodType periodType0 = PeriodType.days();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.append(periodFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendHours();
      periodFormatterBuilder5.maximumParsedDigits((-278));
      periodFormatterBuilder5.appendPrefix("I;\"&:^");
      periodFormatterBuilder_RegExAffix0.parse("S,m]UUT 0", 48);
      periodFormatterBuilder_RegExAffix0.getAffixes();
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder1 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      System.setCurrentTimeMillis((-1017L));
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("QEB4?MpXXg>^T");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-3409), (-305), (-3409), true, Integer.MAX_VALUE, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_CompositeAffix0);
      Foo foo0 = Foo.FIVE;
      StringWriter stringWriter0 = new StringWriter(7);
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) stringWriter0, 7);
      Locale locale0 = Locale.US;
      int int0 = periodFormatterBuilder_FieldFormatter1.calculatePrintedLength(foo0, locale0);
      assertEquals(0, int0);
      
      PeriodType periodType0 = PeriodType.millis();
      boolean boolean0 = periodFormatterBuilder_FieldFormatter1.isSupported(periodType0, (-2341));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YearMonthDayTime";
      stringArray0[1] = "YearMonthDayTime";
      stringArray0[2] = "rQJI2/9S`KI9";
      stringArray0[3] = "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("YearMonthDayTime", "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      periodFormatterBuilder2.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder5.toParser();
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      Period period0 = Period.ZERO;
      Locale locale0 = Locale.CHINESE;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("YearMonthDayTime", "pj=}_vhzf", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
      Locale locale1 = Locale.ITALY;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.calculatePrintedLength(period0, locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "YearMonthDayTime";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "YearMonthDayTime";
      stringArray1[1] = "YearMonthDayTime";
      stringArray1[2] = "YearMonthDayTime";
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendPrefix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YearMonthDayTime";
      stringArray0[1] = "YearMonthDayTime";
      stringArray0[2] = "rQJI2/9S`KI9";
      stringArray0[3] = "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("YearMonthDayTime", "org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix(stringArray0, stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder5.toParser();
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(354, 3680, (-1008), false, 354, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_RegExAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", "rQJI2/9S`KI9", stringArray0, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      Period period0 = Period.ZERO;
      Locale locale0 = Locale.KOREAN;
      periodFormatterBuilder_Separator1.calculatePrintedLength(period0, locale0);
      Locale locale1 = Locale.CHINESE;
      periodFormatterBuilder_Separator1.countFieldsToPrint(period0, 3680, locale1);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo((Writer) null, (ReadablePeriod) period0, locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      periodFormatterBuilder1.printZeroRarelyLast();
      String string0 = null;
      String[] stringArray0 = new String[0];
      periodFormatterBuilder1.appendPrefix("", "N<=`4n%XMhGG(+");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix("N<=`4n%XMhGG(+");
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("F/| $NdV", "F/| $NdV");
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      linkedHashSet0.add(periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      String[] stringArray0 = periodFormatterBuilder_CompositeAffix0.getAffixes();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      Seconds seconds0 = Seconds.MIN_VALUE;
      periodFormatterBuilder_CompositeAffix0.calculatePrintedLength((-3148));
      periodFormatter0.print(seconds0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.printZeroIfSupported();
      PeriodParser periodParser0 = periodFormatterBuilder2.toParser();
      assertNotNull(periodParser0);
      
      periodFormatterBuilder2.appendYears();
      periodFormatterBuilder0.toPrinter();
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(292272984);
      assertEquals(16, int0);
      
      periodFormatterBuilder2.appendYears();
      periodFormatterBuilder2.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.appendYears();
      periodFormatterBuilder2.maximumParsedDigits(913);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      periodFormatterBuilder4.appendSuffix(stringArray1, stringArray0);
      periodFormatterBuilder_PluralAffix0.finish(linkedHashSet0);
      periodFormatterBuilder3.appendSuffix(stringArray1, stringArray0);
      MockFile mockFile0 = new MockFile("x!RGSfo5LtD]{:(");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      periodFormatterBuilder_Literal0.printTo((Writer) mockFileWriter0, (ReadablePeriod) seconds0, (Locale) null);
      int int1 = periodFormatterBuilder_CompositeAffix0.scan("x!RGSfo5LtD]{:(", 9);
      assertEquals((-10), int1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.base.BasePeriod");
      periodFormatterBuilder_SimpleAffix0.calculatePrintedLength((-192));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String string0 = "TAEE+].&sZ:KR;W";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("TAEE+].&sZ:KR;W");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.rejectSignedValues(false);
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix("org.joda.time.base.BasePeriod");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      periodFormatterBuilder3.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMillis3Digit();
      String string0 = "org.joda.time.format.PeriodFormat";
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparator("org.joda.time.format.PeriodFormat", "org.joda.time.format.PeriodFormat");
      periodFormatterBuilder5.printZeroRarelyFirst();
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormat", "8SqdHl(#M9cl6j");
      periodFormatterBuilder5.toFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1993);
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 0);
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder1.appendSeconds();
      periodFormatterBuilder6.appendPrefix("org.joda.time.format.PeriodFormat");
      periodFormatterBuilder1.maximumParsedDigits(1993);
      periodFormatterBuilder_PluralAffix0.parse("org.joda.time.format.PeriodFormat", 0);
      periodFormatterBuilder2.printZeroRarelyLast();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.joda.time.format.PeriodFormat";
      stringArray0[1] = null;
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendSeparator("org.joda.time.format.PeriodFormat", (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<?25+D{+@ Kmh-_m9";
      stringArray0[1] = "<?25+D{+@ Kmh-_m9";
      stringArray0[2] = "ART";
      stringArray0[3] = "ART";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("ART", "<?25+D{+@ Kmh-_m9", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) null, "ART", (-1620), locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Instant must not be null", "org.joda.time.format.PeriodFormatterBuilder$RegExAffix");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(0);
      Integer integer0 = new Integer(108);
      periodFormatterBuilder_CompositeAffix0.parse("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", (-57));
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSecondsWithMillis();
      periodFormatterBuilder1.printZeroNever();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("DateTimeZone.setDefault");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.joda.time.format.PeriodFormatterBuilder$RegExAffix";
      PrintStream printStream0 = mockPrintStream0.format("DateTimeZone.setDefault", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      periodFormatterBuilder_PluralAffix0.printTo((Writer) mockPrintWriter0, 108);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "pj=}_vhzf";
      stringArray0[1] = "DateTimeZone.setDefault";
      stringArray0[2] = "DateTimeZone.setDefault";
      stringArray0[3] = "DateTimeZone.setDefault";
      stringArray0[4] = "Instant must not be null";
      stringArray0[5] = "DateTimeZone.setDefault";
      stringArray0[6] = "Instant must not be null";
      stringArray0[7] = "DateTimeZone.setDefault";
      stringArray0[8] = "!,si1?OI";
      periodFormatterBuilder2.appendPrefix(stringArray0, stringArray0);
      periodFormatterBuilder1.appendWeeks();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      StringWriter stringWriter0 = new StringWriter(108);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "Instant must not be null", 108, (int) integer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "g";
      stringArray0[1] = "g";
      stringArray0[2] = "g";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("g", "g", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, false, false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "g");
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      strictChronology0.withUTC();
      // Undeclared exception!
      try { 
        MutablePeriod.parse("g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"g\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SbOrBA.@ NhsTx";
      stringArray0[1] = "e.T\"Hy";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      periodFormatterBuilder_RegExAffix0.calculatePrintedLength(6);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "e.T\"Hy");
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter((OutputStream) null, "e.T\"Hy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.maximumParsedDigits(0);
      periodFormatterBuilder2.appendSeparator("", "");
      periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(533);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      periodFormatterBuilder_RegExAffix0.printTo(stringBuffer0, (-1168));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      Days days0 = Days.TWO;
      Period period0 = days0.toPeriod();
      Period period1 = period0.minusSeconds(964);
      period1.plusMinutes((-1168));
      int int0 = (-627);
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }
}
