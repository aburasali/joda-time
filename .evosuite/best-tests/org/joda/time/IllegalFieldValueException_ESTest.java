/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 02:37:06 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IllegalFieldValueException_ESTest extends IllegalFieldValueException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      Byte byte0 = new Byte((byte)1);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, (Number) null, byte0, (Number) null);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value null for minuteOfHour must not be smaller than 1", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      Byte byte0 = new Byte((byte)76);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, byte0, byte0, byte0);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value 76 for weekyears must be in the range [76,76]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      Double double0 = new Double((-1.0));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, double0, double0, double0);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value -1.0 for clockhourOfHalfday must be in the range [-1.0,-1.0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      Short short0 = new Short((short)0);
      Float float0 = new Float((float) (short)0);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, short0, float0, float0);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value 0 for weekOfWeekyear must be in the range [0.0,0.0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Short short0 = new Short((short) (-3318));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, short0, short0, short0);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value -3318 for year must be in the range [-3318,-3318]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Float float0 = new Float(408.70288F);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, float0, float0, float0);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value 408.70288 for secondOfDay must be in the range [408.70288,408.70288]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("org.joda.time.IllegalFieldValueException", "");
      String string0 = illegalFieldValueException0.getIllegalValueAsString();
      assertEquals("Value \"\" for org.joda.time.IllegalFieldValueException is not supported", illegalFieldValueException0.getMessage());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      Integer integer0 = new Integer(0);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, integer0, "+'glWObzH[{?bC");
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value 0 for monthOfYear is not supported: +'glWObzH[{?bC", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("org.joda.time.IllegalFieldValueException", "");
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value \"\" for org.joda.time.IllegalFieldValueException is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      Byte byte0 = new Byte((byte)1);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, (Number) null, byte0, (Number) null);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value null for minuteOfHour must not be smaller than 1", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = new Double(3060.76);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("q<.)/CEO _", double0, double0, double0);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value 3060.76 for q<.)/CEO _ must be in the range [3060.76,3060.76]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Short short0 = new Short((short)0);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", short0, short0, short0);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value 0 for  must be in the range [0,0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Short short0 = new Short((short) (-3318));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, short0, short0, short0);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value -3318 for year must be in the range [-3318,-3318]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Float float0 = new Float((-2513.337F));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException((String) null, float0, float0, float0);
      illegalFieldValueException0.getFieldName();
      assertEquals("Value -2513.337 for null must be in the range [-2513.337,-2513.337]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", "H!5$yjTc4X#U8;8W");
      illegalFieldValueException0.getFieldName();
      assertEquals("Value \"H!5$yjTc4X#U8;8W\" for  is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, "");
      illegalFieldValueException0.getDurationFieldType();
      assertEquals("Value \"\" for millis is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      Integer integer0 = new Integer(890);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, integer0, integer0, integer0);
      illegalFieldValueException0.getDateTimeFieldType();
      assertEquals("Value 890 for minutes must be in the range [890,890]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DurationFieldType) null, "org.joda.time.chrono.IslamicChronology");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Float float0 = new Float(0.0F);
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DurationFieldType) null, float0, float0, float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, "org.joda.time.chrono.ISOYearOfEraDateTimeField");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Short short0 = new Short((short)2622);
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, short0, short0, short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      Byte byte0 = new Byte((byte) (-33));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, byte0, byte0, byte0);
      illegalFieldValueException0.prependMessage((String) null);
      assertEquals("Value -33 for weekyearOfCentury must be in the range [-33,-33]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      Byte byte0 = new Byte((byte) (-33));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, byte0, byte0, byte0);
      String string0 = illegalFieldValueException0.getIllegalValueAsString();
      assertEquals("Value -33 for weekyearOfCentury must be in the range [-33,-33]", illegalFieldValueException0.getMessage());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, "La{O$0=!)\":adu7JP!");
      String string0 = illegalFieldValueException0.getIllegalValueAsString();
      assertEquals("Value \"La{O$0=!)\":adu7JP!\" for yearOfEra is not supported", illegalFieldValueException0.getMessage());
      assertEquals("La{O$0=!)\":adu7JP!", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, 1, "");
      illegalFieldValueException0.prependMessage("");
      assertEquals(": Value 1 for era is not supported: ", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      Short short0 = new Short((short)0);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, short0, short0, short0);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value 0 for seconds must be in the range [0,0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, byte0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("-33", (String) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, "La{O$0=!)\":adu7JP!");
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value \"La{O$0=!)\":adu7JP!\" for yearOfEra is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      Byte byte0 = new Byte((byte) (-33));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, byte0, byte0, byte0);
      String string0 = illegalFieldValueException0.getMessage();
      assertEquals("Value -33 for weekyearOfCentury must be in the range [-33,-33]", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      Byte byte0 = new Byte((byte) (-33));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, byte0, byte0, byte0);
      illegalFieldValueException0.getDurationFieldType();
      assertEquals("Value -33 for weekyearOfCentury must be in the range [-33,-33]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      Short short0 = new Short((short)0);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, short0, short0, short0);
      illegalFieldValueException0.getFieldName();
      assertEquals("Value 0 for seconds must be in the range [0,0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, 1, (Number) null, 1);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value 1 for minuteOfDay must not be larger than 1", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      Byte byte0 = new Byte((byte) (-33));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, byte0, byte0, byte0);
      illegalFieldValueException0.getDateTimeFieldType();
      assertEquals("Value -33 for weekyearOfCentury must be in the range [-33,-33]", illegalFieldValueException0.getMessage());
  }
}
