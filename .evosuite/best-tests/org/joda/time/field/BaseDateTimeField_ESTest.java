/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 01:21:57 GMT 2019
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.DelegatedDurationField;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.StrictDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.field.ZeroIsMaxDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.Provider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseDateTimeField_ESTest extends BaseDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      dateTimeFieldType0.getRangeDurationType();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.add((long) 1, (long) 1);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-292269054));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1420, 1, 1420, 10, (-1));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add((ReadablePartial) localDate0, 2141876641, (int[]) null, 87);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2126, (-3460), 2126);
      offsetDateTimeField0.getAsText((-852L));
      long long0 = new Integer((-593));
      offsetDateTimeField0.getMinimumValue();
      offsetDateTimeField0.remainder(2998L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 10);
      DurationField durationField0 = buddhistChronology0.eras();
      dividedDateTimeField0.getDifferenceAsLong(292279536L, 10);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      remainderDateTimeField0.getMinimumValue();
      offsetDateTimeField0.add(2158L, (-852L));
      offsetDateTimeField0.getMaximumValue();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DurationField durationField0 = buddhistChronology0.eras();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 2343);
      Locale locale0 = new Locale("Ldc", "Ldc", "Ldc");
      dividedDateTimeField0.getAsShortText((long) 1, locale0);
      dividedDateTimeField0.getLeapDurationField();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)107;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      dateTimeFieldType0.getRangeDurationType();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      zeroIsMaxDateTimeField0.roundHalfCeiling(2343);
      zeroIsMaxDateTimeField0.roundHalfEven(1);
      zeroIsMaxDateTimeField0.getDurationField();
      zeroIsMaxDateTimeField0.getDifference((-2L), 1647L);
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0, (-1649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      offsetDateTimeField0.getDurationField();
      buddhistChronology0.withZone((DateTimeZone) null);
      offsetDateTimeField0.isLeap(1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add((ReadablePartial) localDateTime0, 1, intArray0, 995);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2126, (-3460), 2126);
      offsetDateTimeField0.getAsText((-852L));
      offsetDateTimeField0.add(912L, 0);
      offsetDateTimeField0.getMinimumValue();
      offsetDateTimeField0.remainder(2998L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 10);
      buddhistChronology0.eras();
      dividedDateTimeField0.getDifferenceAsLong(292279536L, 10);
      Locale locale0 = Locale.GERMANY;
      dividedDateTimeField0.getMaximumTextLength(locale0);
      dividedDateTimeField0.getName();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 2334);
      offsetDateTimeField0.getLeapAmount(1);
      offsetDateTimeField0.add(0L, 0);
      offsetDateTimeField0.roundHalfEven((-1647L));
      offsetDateTimeField0.roundCeiling((-1647L));
      offsetDateTimeField0.get(1896L);
      offsetDateTimeField0.getLeapDurationField();
      Locale locale0 = Locale.KOREA;
      Locale.getISOLanguages();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType0.getDurationType();
      buddhistChronology0.getZone();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 1545);
      dividedDateTimeField0.getMinimumValue();
      // Undeclared exception!
      try { 
        dividedDateTimeField0.roundCeiling(413L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1545 for minuteOfDay must be in the range [2334,3773]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 1, 1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertEquals(3, offsetDateTimeField1.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField1.getName());
      assertEquals(1, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertNotNull(offsetDateTimeField1);
      
      long long0 = offsetDateTimeField1.roundHalfEven(1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertEquals(3, offsetDateTimeField1.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField1.getName());
      assertEquals(1, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertEquals((-259200000L), long0);
      
      long long1 = offsetDateTimeField1.roundHalfEven((-259200000L));
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertTrue(long1 == long0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertEquals(3, offsetDateTimeField1.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField1.getName());
      assertEquals(1, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertEquals((-259200000L), long1);
      
      int int0 = offsetDateTimeField1.get(1L);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertEquals(3, offsetDateTimeField1.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField1.getName());
      assertEquals(1, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertEquals(16, int0);
      
      offsetDateTimeField0.roundHalfCeiling(566L);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2126, (-3460), 2126);
      offsetDateTimeField0.getAsText((-852L));
      offsetDateTimeField0.add(912L, 0);
      offsetDateTimeField0.getMinimumValue();
      offsetDateTimeField0.remainder(2998L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 10);
      dividedDateTimeField0.getDifferenceAsLong((-593), 10);
      dividedDateTimeField0.getMaximumValue((ReadablePartial) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2126, (-3460), 2126);
      offsetDateTimeField0.getAsText((-852L));
      offsetDateTimeField0.add(912L, 0);
      offsetDateTimeField0.getMinimumValue();
      offsetDateTimeField0.remainder(2998L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 10);
      DurationField durationField0 = buddhistChronology0.eras();
      dividedDateTimeField0.getDifferenceAsLong(292279536L, 10);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      int int0 = remainderDateTimeField0.getMinimumValue();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        remainderDateTimeField0.addWrapField((long) 0, 366);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 6 for halfdayOfDay must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      offsetDateTimeField0.getDurationField();
      buddhistChronology0.withZone((DateTimeZone) null);
      offsetDateTimeField0.isLeap(1);
      offsetDateTimeField0.isLenient();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      int[] intArray0 = new int[7];
      intArray0[1] = 1;
      intArray0[2] = 1;
      offsetDateTimeField0.set((ReadablePartial) localDateTime0, 1, intArray0, 1);
      intArray0[3] = 1;
      intArray0[4] = 1697;
      Hours hours0 = Hours.SIX;
      Days days0 = hours0.toStandardDays();
      buddhistChronology0.get((ReadablePeriod) days0, 932L);
      intArray0[5] = 1;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapPartial(localDateTime0, 1, intArray0, (-461));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1015, 1015);
      Locale locale0 = Locale.CHINESE;
      offsetDateTimeField0.getMinimumValue();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType1);
      zeroIsMaxDateTimeField0.roundHalfFloor(1L);
      int[] intArray0 = new int[2];
      intArray0[0] = 1015;
      intArray0[1] = 1015;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.add((ReadablePartial) null, 1, intArray0, (-935));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 80 for clockhourOfDay must be in the range [1,2]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-18L));
      monthDay0.minusMonths(690562340);
      monthDay0.plusDays(2883);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Months months0 = Months.months(1);
      buddhistChronology0.get((ReadablePeriod) months0, (long) 10, (long) 10);
      buddhistChronology0.withZone(dateTimeZone0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 10);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      localDateTime0.withWeekOfWeekyear(1);
      BuddhistChronology.getInstance();
      offsetDateTimeField0.get((-610L));
      localDateTime0.weekOfWeekyear();
      offsetDateTimeField0.roundHalfEven(69);
      buddhistChronology0.getZone();
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayVariant();
      offsetDateTimeField0.getAsText((ReadablePartial) localDateTime0, 0, locale0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 10);
      DurationField durationField0 = dividedDateTimeField0.getRangeDurationField();
      dividedDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, locale0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      remainderDateTimeField0.getMinimumValue();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      offsetDateTimeField0.roundCeiling(1451L);
      offsetDateTimeField0.add((long) 10, 1000L);
      offsetDateTimeField0.get(69);
      remainderDateTimeField0.getMinimumValue();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, 1);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      offsetDateTimeField0.getLeapDurationField();
      FileSystemHandling.shouldAllThrowIOExceptions();
      offsetDateTimeField1.addWrapField(100000000L, 1);
      System.setCurrentTimeMillis(1);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfCeiling(100000000L);
      MonthDay monthDay0 = MonthDay.now();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.add((ReadablePartial) monthDay0, 1, intArray0, (-2335));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2139287145, 2139287145, 1);
      long long0 = offsetDateTimeField0.roundHalfFloor(2139287145);
      assertEquals(2160000000L, long0);
      
      int int0 = offsetDateTimeField0.getLeapAmount(1);
      assertEquals(0, int0);
      
      Partial partial0 = new Partial(buddhistChronology0);
      int[] intArray0 = new int[4];
      intArray0[0] = 2139287145;
      intArray0[1] = (-175);
      intArray0[2] = 0;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add((ReadablePartial) partial0, 0, intArray0, (-175));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeField dateTimeField1 = dateTimeFieldType0.getField(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-3460));
      offsetDateTimeField0.getAsText((-852L));
      offsetDateTimeField0.add(912L, 0);
      offsetDateTimeField0.getMinimumValue();
      offsetDateTimeField0.remainder(2998L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 10);
      DurationField durationField0 = buddhistChronology0.eras();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      remainderDateTimeField0.getMinimumValue();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getDifference((-2127L), (-747L));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2139287145, 2139287145, 1);
      offsetDateTimeField0.roundHalfFloor(2139287145);
      offsetDateTimeField0.getLeapAmount(1);
      offsetDateTimeField0.getDifferenceAsLong(2139287145, 1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2126, (-3460), 2126);
      offsetDateTimeField0.getAsText((-852L));
      offsetDateTimeField0.add(912L, 0);
      offsetDateTimeField0.getMinimumValue();
      offsetDateTimeField0.remainder(2998L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 10);
      DurationField durationField0 = buddhistChronology0.eras();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      remainderDateTimeField0.getMinimumValue();
      remainderDateTimeField0.roundCeiling((-1L));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      offsetDateTimeField0.getDurationField();
      buddhistChronology0.withZone((DateTimeZone) null);
      offsetDateTimeField0.isLeap(1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1674;
      intArray0[5] = 1;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapPartial(localDateTime0, 1, intArray0, (-33));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.getDurationField();
      buddhistChronology0.withZone((DateTimeZone) null);
      BuddhistChronology.getInstance((DateTimeZone) null);
      offsetDateTimeField0.isLeap(1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1674;
      intArray0[5] = 1;
      intArray0[6] = 1;
      offsetDateTimeField0.addWrapPartial(localDateTime0, 1, intArray0, 12);
      offsetDateTimeField0.getLeapAmount(1);
      offsetDateTimeField0.roundCeiling((-4389L));
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, (-3023));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(lenientDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getDifference(1, 21600000L);
      zeroIsMaxDateTimeField0.getAsText((-1896L));
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
      int int0 = (-2201);
      zeroIsMaxDateTimeField0.isLenient();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, dateTimeFieldType1, (-2201), (-647), 1);
      dateTimeFieldType1.isSupported(buddhistChronology0);
      Weeks weeks0 = Weeks.ZERO;
      buddhistChronology0.get((ReadablePeriod) weeks0, (long) (-2201));
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set(10800000L, "59", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 59 for dayOfWeek must be in the range [-647,-2142]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      Object object0 = new Object();
      buddhistChronology0.equals(object0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType0.getField(buddhistChronology0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 3719);
      dateTimeFieldType0.getDurationType();
      remainderDateTimeField0.isLeap(604800000L);
      remainderDateTimeField0.getAsText((long) 3719);
      int int0 = (-3244);
      int int1 = 2140103979;
      OffsetDateTimeField offsetDateTimeField0 = null;
      try {
        offsetDateTimeField0 = new OffsetDateTimeField(remainderDateTimeField0, (DateTimeFieldType) null, 1, (-3244), 2140103979);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2126, (-3460), 2126);
      offsetDateTimeField0.getAsText((-852L));
      offsetDateTimeField0.add(912L, 0);
      offsetDateTimeField0.getMinimumValue();
      Locale locale0 = Locale.TAIWAN;
      offsetDateTimeField0.getAsText((-852L), locale0);
      offsetDateTimeField0.remainder(2998L);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 10);
      DurationField durationField0 = buddhistChronology0.eras();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      remainderDateTimeField0.getMinimumValue();
      offsetDateTimeField0.get(10);
      // Undeclared exception!
      try { 
        remainderDateTimeField0.add((long) 10, (long) (-593));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      Locale locale0 = Locale.CANADA;
      offsetDateTimeField0.toString();
      dateTimeZone0.convertUTCToLocal((-2769));
      offsetDateTimeField0.getMaximumShortTextLength(locale0);
      offsetDateTimeField0.getDifference((-2769), 4L);
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2769);
      intArray0[1] = 1;
      intArray0[2] = 1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      intArray0[3] = 604;
      intArray0[4] = (-2769);
      intArray0[5] = 1;
      intArray0[6] = (-2769);
      intArray0[7] = (-2769);
      Integer integer0 = new Integer(1);
      offsetDateTimeField0.addWrapField(5L, 1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      offsetDateTimeField0.roundFloor(86399999L);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapPartial(localTime0, 604, intArray0, (-2012));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 604
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      int int0 = 12;
      offsetDateTimeField0.addWrapField((long) 1, 1);
      offsetDateTimeField0.roundHalfFloor(12);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 4);
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      offsetDateTimeField0.getMaximumTextLength(locale0);
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 4;
      intArray0[2] = (-708);
      intArray0[3] = 2;
      intArray0[4] = 2;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapPartial(localDateTime0, 2, intArray0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -705 for minuteOfHour must be in the range [0,25]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 93, 31, 93);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add(1L, 2127781963);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 96 for millisOfDay must be in the range [94,93]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfEven(1);
      dateTimeZone0.getOffsetFromLocal(1);
      zeroIsMaxDateTimeField0.getAsShortText((-3610L));
      zeroIsMaxDateTimeField0.roundHalfFloor(0);
      int int0 = (-4383);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-4383));
      offsetDateTimeField0.isLeap(1);
      DurationField durationField0 = buddhistChronology0.days();
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, (-4383));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.roundHalfCeiling((-18L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      YearMonth yearMonth0 = new YearMonth((-2207), 1, buddhistChronology0);
      dateTimeFieldType0.getRangeDurationType();
      yearMonth0.minusMonths(1);
      long long0 = (-3873L);
      String string0 = "~=cwnn9g'";
      Locale locale0 = null;
      offsetDateTimeField0.add((-18L), 0);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 2141876641);
      buddhistChronology0.toString();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DividedDateTimeField dividedDateTimeField1 = new DividedDateTimeField(remainderDateTimeField0, unsupportedDurationField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField1.addWrapField((long) 1, 5459);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfCeiling((-1178));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      Locale locale0 = Locale.CANADA;
      offsetDateTimeField0.toString();
      dateTimeZone0.convertUTCToLocal((-2769));
      offsetDateTimeField0.getMaximumShortTextLength(locale0);
      offsetDateTimeField0.getDifference((-2769), 4L);
      offsetDateTimeField0.roundFloor(86399999L);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      dateTimeZone0.isFixed();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      offsetDateTimeField0.addWrapField((long) 1, 1);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(strictDateTimeField0, 1);
      Chronology chronology0 = null;
      Partial partial0 = new Partial((Chronology) null);
      int int0 = 517;
      offsetDateTimeField0.remainder(3600L);
      Locale locale0 = Locale.ITALY;
      offsetDateTimeField0.getAsText((ReadablePartial) partial0, 517, locale0);
      int int1 = (-654);
      offsetDateTimeField0.getAsShortText((ReadablePartial) partial0, (-654), locale0);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add(9223372036854775807L, 14);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 9223372036854775807 + 14
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      Locale locale0 = Locale.CANADA;
      offsetDateTimeField0.toString();
      dateTimeZone0.convertUTCToLocal((-2769));
      offsetDateTimeField0.getMaximumShortTextLength(locale0);
      offsetDateTimeField0.getDifference((-2769), 4L);
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      offsetDateTimeField0.roundFloor(86399999L);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.getAsShortText((ReadablePartial) localTime0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfMonth' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      int int0 = 29;
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Months months0 = Months.months(1);
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) months0, (long) 29, (long) 29);
      buddhistChronology0.withZone(dateTimeZone0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 29);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(1);
      BuddhistChronology.getInstance();
      offsetDateTimeField0.get((-610L));
      localDateTime0.weekOfWeekyear();
      offsetDateTimeField0.roundHalfEven(88);
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      yearMonth0.toString((DateTimeFormatter) null);
      buddhistChronology0.getZone();
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayVariant();
      offsetDateTimeField0.getAsText((ReadablePartial) localDateTime0, 0, locale0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 29);
      DurationField durationField0 = dividedDateTimeField0.getRangeDurationField();
      dividedDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, locale0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      remainderDateTimeField0.getMinimumValue();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfFloor(1);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapPartial(localDateTime1, 1344, intArray0, (-4712));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1344
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      offsetDateTimeField0.getDurationField();
      buddhistChronology0.withZone((DateTimeZone) null);
      BuddhistChronology.getInstance();
      offsetDateTimeField0.isLeap(1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      offsetDateTimeField0.getDifferenceAsLong(1, 40613875200009L);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1674;
      intArray0[5] = 1;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapPartial(localDateTime0, 1, intArray0, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-2207), 1, buddhistChronology0);
      MonthDay monthDay0 = new MonthDay((-18L));
      MonthDay monthDay1 = monthDay0.plusDays(1);
      // Undeclared exception!
      try { 
        yearMonth0.isEqual(monthDay1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.roundHalfCeiling((-18L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      YearMonth yearMonth0 = new YearMonth((-2207), 1, buddhistChronology0);
      yearMonth0.minusMonths(1);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set((-3873L), "~=cwnn9g'", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"~=cwnn9g'\" for dayOfYear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 3211, 3211, 3211);
      Locale locale0 = Locale.CHINA;
      offsetDateTimeField0.getAsText(3211, locale0);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((-99L), 1096);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1096 for secondOfDay must be in the range [3212,3211]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = (-2769);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      Locale locale0 = Locale.CANADA;
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2769);
      intArray0[1] = 1;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add((ReadablePartial) localDateTime0, 1, intArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.roundHalfCeiling((-18L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      YearMonth yearMonth0 = new YearMonth((-2207), 1, buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.plusYears(790);
      offsetDateTimeField0.getRangeDurationField();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      offsetDateTimeField0.remainder(2);
      offsetDateTimeField0.get(2);
      zeroIsMaxDateTimeField0.getMaximumValue();
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = (-2207);
      intArray0[5] = 1;
      intArray0[6] = 1;
      zeroIsMaxDateTimeField0.set((ReadablePartial) yearMonth1, 2, intArray0, 2);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set((-3873L), "~=cwnn9g'", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"~=cwnn9g'\" for dayOfYear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      Locale locale0 = Locale.CANADA;
      offsetDateTimeField0.toString();
      dateTimeZone0.convertUTCToLocal((-2769));
      offsetDateTimeField0.getMaximumShortTextLength(locale0);
      offsetDateTimeField0.getDifference((-2769), 4L);
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2769);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 604;
      intArray0[4] = (-2769);
      intArray0[5] = 1;
      intArray0[6] = (-2769);
      intArray0[7] = (-2769);
      offsetDateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
      offsetDateTimeField0.roundFloor(86399999L);
      offsetDateTimeField0.getMaximumTextLength(locale0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeField dateTimeField1 = LenientDateTimeField.getInstance(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType0);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      zeroIsMaxDateTimeField0.getMaximumValue((ReadablePartial) localDate0);
      zeroIsMaxDateTimeField0.getDifferenceAsLong(1, 3342L);
      zeroIsMaxDateTimeField0.roundHalfFloor((-898L));
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType1, 2);
      offsetDateTimeField0.getLeapDurationField();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      ScaledDurationField scaledDurationField0 = null;
      try {
        scaledDurationField0 = new ScaledDurationField((DurationField) null, durationFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.roundHalfCeiling((-18L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      YearMonth yearMonth0 = new YearMonth((-2207), 1, buddhistChronology0);
      yearMonth0.plusYears(790);
      offsetDateTimeField0.getMaximumValue((long) 1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      buddhistChronology0.withZone(dateTimeZone0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 29);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      localDateTime0.getValues();
      BuddhistChronology.getInstance();
      offsetDateTimeField0.get((-610L));
      localDateTime0.weekOfWeekyear();
      offsetDateTimeField0.roundHalfEven(88);
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      buddhistChronology0.getZone();
      offsetDateTimeField0.getMinimumValue((ReadablePartial) yearMonth0);
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayVariant();
      offsetDateTimeField0.getAsText((ReadablePartial) localDateTime0, 0, locale0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 29);
      DurationField durationField0 = dividedDateTimeField0.getRangeDurationField();
      dividedDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, locale0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      remainderDateTimeField0.getMinimumValue();
      dividedDateTimeField0.getAsText((ReadablePartial) localDateTime0, locale0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      int int0 = 12;
      offsetDateTimeField0.addWrapField((long) 1, 1);
      offsetDateTimeField0.roundHalfFloor(12);
      int int1 = 4;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 4);
      long long0 = 854L;
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      offsetDateTimeField0.getMaximumTextLength(locale0);
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      int int2 = (-708);
      // Undeclared exception!
      try { 
        localDateTime0.withEra((-708));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -708 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      DateTimeFieldType.dayOfYear();
      LocalDateTime localDateTime0 = new LocalDateTime(1L, (DateTimeZone) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      offsetDateTimeField0.add((ReadablePartial) localDateTime0, 1, intArray0, 1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfEven(1);
      zeroIsMaxDateTimeField0.getMaximumValue();
      zeroIsMaxDateTimeField0.set(1L, 100);
      zeroIsMaxDateTimeField0.roundHalfFloor((-2141L));
      int int0 = (-4401);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-4401));
      offsetDateTimeField0.isLeap(1);
      DurationField durationField0 = buddhistChronology0.days();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType1, (-4401));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeFieldType.dayOfYear();
      YearMonth yearMonth0 = new YearMonth((-2207), 1, buddhistChronology0);
      yearMonth0.minusMonths((-2207));
      yearMonth0.plusYears(0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      int int0 = 5463;
      int int1 = 4;
      dateTimeFieldType0.getDurationType();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 4);
      offsetDateTimeField0.roundHalfEven(5463);
      offsetDateTimeField0.add((long) 4, 971L);
      DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 5463);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapField((-259200000L), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      long long0 = dateTimeZone0.convertUTCToLocal((-2769));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals((-5538L), long0);
      
      int int0 = offsetDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(5, int0);
      
      int int1 = offsetDateTimeField0.getDifference((-2769), 4L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals(0, int1);
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2769);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 604;
      intArray0[4] = (-2769);
      intArray0[5] = 1;
      intArray0[6] = (-2769);
      intArray0[7] = (-2769);
      int int2 = offsetDateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(8, intArray0.length);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals(4, localTime0.size());
      assertEquals((-2757), int2);
      assertArrayEquals(new int[] {(-2769), 1, 1, 604, (-2769), 1, (-2769), (-2769)}, intArray0);
      
      long long1 = offsetDateTimeField0.roundFloor(86399999L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals(2769L, long1);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapField((ReadablePartial) localTime0, (-2769), intArray0, 623191204);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2769
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      Locale locale0 = Locale.CANADA;
      dateTimeZone0.convertUTCToLocal((-2769));
      buddhistChronology0.toString();
      offsetDateTimeField0.getMaximumShortTextLength(locale0);
      offsetDateTimeField0.getDifference((-2769), 4L);
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2769);
      intArray0[1] = 1;
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      localTime0.isSupported(durationFieldType0);
      intArray0[2] = 1;
      intArray0[3] = 604;
      intArray0[4] = (-2769);
      intArray0[5] = 1;
      intArray0[6] = (-2769);
      intArray0[7] = (-2769);
      offsetDateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
      offsetDateTimeField0.roundFloor(86399999L);
      offsetDateTimeField0.roundHalfCeiling((-2769));
      offsetDateTimeField0.roundHalfEven(4L);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2126, (-3460), 2126);
      dateTimeZone0.equals(dateTimeFieldType0);
      offsetDateTimeField0.getAsText((-852L));
      offsetDateTimeField0.add(912L, 0);
      offsetDateTimeField0.getMinimumValue();
      dateTimeFieldType0.getRangeDurationType();
      offsetDateTimeField0.remainder(2998L);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapField(912L, 321);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      long long0 = dateTimeZone0.convertUTCToLocal((-2769));
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-5538L), long0);
      
      String string0 = buddhistChronology0.toString();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("BuddhistChronology[-00:00:02.769]", string0);
      assertNotNull(string0);
      
      int int0 = offsetDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals(5, int0);
      
      int int1 = offsetDateTimeField0.getDifference((-2769), 4L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals(0, int1);
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2769);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 604;
      intArray0[4] = (-2769);
      intArray0[5] = 1;
      intArray0[6] = (-2769);
      intArray0[7] = (-2769);
      int int2 = offsetDateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, intArray0.length);
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals(4, localTime0.size());
      assertEquals((-2757), int2);
      assertArrayEquals(new int[] {(-2769), 1, 1, 604, (-2769), 1, (-2769), (-2769)}, intArray0);
      
      long long1 = offsetDateTimeField0.roundFloor(86399999L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals(2769L, long1);
      
      long long2 = offsetDateTimeField0.roundHalfCeiling((-2769));
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals(2769L, long2);
      
      offsetDateTimeField0.getMinimumValue((long) 1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      buddhistChronology0.add(3599999L, (-1677L), 1822);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      Locale locale0 = Locale.CANADA;
      LocalDate localDate0 = new LocalDate((Chronology) buddhistChronology0);
      Years years0 = Years.years((-2769));
      DurationFieldType durationFieldType0 = years0.getFieldType();
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 86399999);
      LocalDate localDate2 = localDate1.plusWeeks((-1));
      offsetDateTimeField0.getMinimumValue((ReadablePartial) localDate2);
      dateTimeZone0.convertUTCToLocal((-2769));
      offsetDateTimeField0.getMaximumShortTextLength(locale0);
      Integer integer0 = new Integer(8);
      LocalTime.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      offsetDateTimeField0.getDurationField();
      buddhistChronology0.withZone((DateTimeZone) null);
      offsetDateTimeField0.isLeap(1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1674;
      intArray0[5] = 1;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapPartial(localDateTime0, 1, intArray0, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology1);
      
      long long0 = buddhistChronology0.getDateTimeMillis(3, 3, 3, 3, 3, 3, 3);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals((-79203128216997L), long0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long1 = zeroIsMaxDateTimeField0.addWrapField((long) 1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(long1 == long0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(1001L, long1);
      
      int int0 = zeroIsMaxDateTimeField0.get((-79203128216997L));
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(10983, int0);
      
      Locale locale0 = new Locale("org/joda/time/tz/data", "org/joda/time/tz/data");
      assertEquals("org/joda/time/tz/data", locale0.getLanguage());
      assertEquals("org/joda/time/tz/data_ORG/JODA/TIME/TZ/DATA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ORG/JODA/TIME/TZ/DATA", locale0.getCountry());
      assertNotNull(locale0);
      
      int int1 = zeroIsMaxDateTimeField0.getDifference(10983, 1829L);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(int1 == int0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(9, int1);
      
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.getAsText((ReadablePartial) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Months months0 = Months.months(1);
      assertEquals(1, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) months0, (long) 29, (long) 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, intArray0.length);
      assertEquals(1, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology1);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
      
      BuddhistChronology buddhistChronology2 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology2, buddhistChronology1);
      assertSame(buddhistChronology2, buddhistChronology0);
      assertNotNull(buddhistChronology2);
      
      int int0 = offsetDateTimeField0.get((-610L));
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals(88, int0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      long long0 = offsetDateTimeField0.roundHalfEven(88);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals(0L, long0);
      
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      String string0 = yearMonth0.toString((DateTimeFormatter) null);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(string0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      
      int int1 = offsetDateTimeField0.getMinimumValue((ReadablePartial) yearMonth0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(int1 == int0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(29, int1);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayVariant();
      assertFalse(string1.equals((Object)string0));
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = offsetDateTimeField0.getAsText((ReadablePartial) localDateTime0, 0, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals(4, localDateTime0.size());
      assertEquals("0", string2);
      assertNotNull(string2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertNotNull(dividedDateTimeField0);
      
      int int2 = localDateTime0.getDayOfMonth();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(14, int2);
      
      DurationField durationField0 = dividedDateTimeField0.getRangeDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertNotNull(durationField0);
      
      String string3 = dividedDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(4, localDateTime0.size());
      assertEquals("20", string3);
      assertNotNull(string3);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(28, remainderDateTimeField0.getMaximumValue());
      assertEquals(29, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(remainderDateTimeField0);
      
      int int3 = remainderDateTimeField0.getMinimumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(28, remainderDateTimeField0.getMaximumValue());
      assertEquals(29, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(0, int3);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(28, remainderDateTimeField0.getMaximumValue());
      assertEquals(29, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("hourOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long1 = zeroIsMaxDateTimeField0.roundHalfFloor(29);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertTrue(long1 == long0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(28, remainderDateTimeField0.getMaximumValue());
      assertEquals(29, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("hourOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(0L, long1);
      
      long long2 = offsetDateTimeField0.roundCeiling(1451L);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals(2000L, long2);
      
      long long3 = offsetDateTimeField0.add((long) 29, 1000L);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals(1000029L, long3);
      
      int int4 = offsetDateTimeField0.convertText("20", locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals(20, int4);
      
      // Undeclared exception!
      try { 
        dividedDateTimeField0.convertText("org.joda.time.YearMonth@0000000004", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.YearMonth@0000000004\" for hourOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      YearMonth yearMonth0 = new YearMonth((-2207), 1, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals((-2207), yearMonth0.getYear());
      assertNotNull(yearMonth0);
      
      MonthDay monthDay0 = new MonthDay((-18L));
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = monthDay0.plusDays(2883);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(16, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(11, monthDay1.getMonthOfYear());
      assertNotNull(monthDay1);
      
      // Undeclared exception!
      try { 
        yearMonth0.isEqual(monthDay1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      long long0 = dateTimeZone0.convertUTCToLocal((-2769));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals((-5538L), long0);
      
      int int0 = offsetDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(5, int0);
      
      int int1 = offsetDateTimeField0.getDifference((-2769), 4L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals(0, int1);
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2769);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-2769);
      intArray0[4] = (-2769);
      intArray0[5] = 1;
      intArray0[6] = (-2769);
      intArray0[7] = (-2769);
      int int2 = offsetDateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, intArray0.length);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals(4, localTime0.size());
      assertEquals((-2757), int2);
      assertArrayEquals(new int[] {(-2769), 1, 1, (-2769), (-2769), 1, (-2769), (-2769)}, intArray0);
      
      long long1 = offsetDateTimeField0.roundFloor(1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals((-2678397231L), long1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      Months months0 = Months.EIGHT;
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertNotNull(months0);
      
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) months0, (long) 29, (long) 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, intArray0.length);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(buddhistChronology1);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
      
      int[] intArray1 = localDateTime0.getValues();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray1.length);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2014, 2, 14, 73281320}, intArray1);
      
      BuddhistChronology buddhistChronology2 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology2, buddhistChronology0);
      assertSame(buddhistChronology2, buddhistChronology1);
      assertNotNull(buddhistChronology2);
      
      int int0 = offsetDateTimeField0.get((-610L));
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, int0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      long long0 = offsetDateTimeField0.roundHalfEven(88);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(0L, long0);
      
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      
      int int1 = offsetDateTimeField0.getMinimumValue((ReadablePartial) yearMonth0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(int1 == int0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(29, int1);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = offsetDateTimeField0.getAsText((ReadablePartial) localDateTime0, 0, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(4, localDateTime0.size());
      assertEquals("0", string1);
      assertNotNull(string1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertNotNull(dividedDateTimeField0);
      
      DurationField durationField0 = dividedDateTimeField0.getRangeDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertNotNull(durationField0);
      
      String string2 = dividedDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(4, localDateTime0.size());
      assertEquals("20", string2);
      assertNotNull(string2);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(29, remainderDateTimeField0.getDivisor());
      assertEquals(28, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      assertNotNull(remainderDateTimeField0);
      
      int int2 = remainderDateTimeField0.getMinimumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(29, remainderDateTimeField0.getDivisor());
      assertEquals(28, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      assertEquals(0, int2);
      
      long long1 = offsetDateTimeField0.roundCeiling(1);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(long1 == long0);
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(1000L, long1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2126, (-3460), 2126);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      String string0 = offsetDateTimeField0.getAsText((-852L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("2127", string0);
      assertNotNull(string0);
      
      long long0 = offsetDateTimeField0.add(912L, 0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(912L, long0);
      
      int int0 = offsetDateTimeField0.getMinimumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2126, int0);
      
      long long1 = offsetDateTimeField0.remainder((-3460));
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(43196540L, long1);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfCeiling((-18L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals((-18L), long0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("dayOfYear", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      YearMonth yearMonth0 = new YearMonth((-2207), 1, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(2, yearMonth0.size());
      assertEquals((-2207), yearMonth0.getYear());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      YearMonth yearMonth1 = yearMonth0.plusYears(790);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(2, yearMonth0.size());
      assertEquals((-2207), yearMonth0.getYear());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals((-1417), yearMonth1.getYear());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertNotNull(yearMonth1);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue((ReadablePartial) yearMonth1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("dayOfYear", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(2, yearMonth0.size());
      assertEquals((-2207), yearMonth0.getYear());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals((-1417), yearMonth1.getYear());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(86400000, int0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = zeroIsMaxDateTimeField0.getAsShortText(1153, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("dayOfYear", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("1153", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 5463;
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 5463, 4);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("yearOfCentury", offsetDateTimeField0.getName());
      assertEquals(4, offsetDateTimeField0.getMaximumValue());
      assertEquals(5463, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfEven(5463);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("yearOfCentury", offsetDateTimeField0.getName());
      assertEquals(4, offsetDateTimeField0.getMaximumValue());
      assertEquals(5463, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add((long) 4, 971L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 30 for yearOfCentury must be in the range [5463,4]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Months months0 = Months.months(1);
      assertEquals(1, months0.size());
      assertEquals(1, months0.getMonths());
      assertNotNull(months0);
      
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) months0, (long) 29, (long) 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, intArray0.length);
      assertEquals(1, months0.size());
      assertEquals(1, months0.getMonths());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology1);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
      
      BuddhistChronology buddhistChronology2 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology2, buddhistChronology1);
      assertSame(buddhistChronology2, buddhistChronology0);
      assertNotNull(buddhistChronology2);
      
      int int0 = offsetDateTimeField0.get((-610L));
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(88, int0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      long long0 = offsetDateTimeField0.roundHalfEven(88);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(0L, long0);
      
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      String string0 = yearMonth0.toString((DateTimeFormatter) null);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotNull(string0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertNotNull(dateTimeZone1);
      
      int int1 = offsetDateTimeField0.getMinimumValue((ReadablePartial) yearMonth0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(int1 == int0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(29, int1);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayVariant();
      assertFalse(string1.equals((Object)string0));
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = offsetDateTimeField0.getAsText((ReadablePartial) localDateTime0, 0, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(4, localDateTime0.size());
      assertEquals("0", string2);
      assertNotNull(string2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertNotNull(dividedDateTimeField0);
      
      DurationField durationField0 = dividedDateTimeField0.getRangeDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertNotNull(durationField0);
      
      String string3 = dividedDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals("20", string3);
      assertNotNull(string3);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(29, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(28, remainderDateTimeField0.getMaximumValue());
      assertNotNull(remainderDateTimeField0);
      
      int int2 = remainderDateTimeField0.getMinimumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(29, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(28, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, int2);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(29, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(28, remainderDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long1 = zeroIsMaxDateTimeField0.roundHalfFloor(29);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertTrue(long1 == long0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(29, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(28, remainderDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(0L, long1);
      
      long long2 = offsetDateTimeField0.roundCeiling(1451L);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(2000L, long2);
      
      long long3 = offsetDateTimeField0.add((long) 29, 1000L);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(1000029L, long3);
      
      // Undeclared exception!
      try { 
        dividedDateTimeField0.convertText("org.joda.time.YearMonth@0000000004", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.YearMonth@0000000004\" for hourOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((long) 1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1001L, long0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType0, 2783, 2783, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals("halfdayOfDay", offsetDateTimeField0.getName());
      assertEquals(2783, offsetDateTimeField0.getOffset());
      assertEquals(2784, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      int int0 = offsetDateTimeField0.getLeapAmount(2783);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals("halfdayOfDay", offsetDateTimeField0.getName());
      assertEquals(2783, offsetDateTimeField0.getOffset());
      assertEquals(2784, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, int0);
      
      int int1 = offsetDateTimeField0.getMaximumTextLength((Locale) null);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals("halfdayOfDay", offsetDateTimeField0.getName());
      assertEquals(2783, offsetDateTimeField0.getOffset());
      assertEquals(2784, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-2922684), offsetDateTimeField0.getMinimumValue());
      assertEquals(2922797, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("centuryOfEra", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfCeiling((-18L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-2922684), offsetDateTimeField0.getMinimumValue());
      assertEquals(2922797, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("centuryOfEra", offsetDateTimeField0.getName());
      assertEquals((-378691200000L), long0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(buddhistChronology0, julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.BuddhistChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(86400, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      YearMonth yearMonth0 = new YearMonth(1, 1);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      YearMonth yearMonth1 = yearMonth0.minusMonths(1);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(1, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(0, yearMonth1.getYear());
      assertEquals(12, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertNotNull(yearMonth1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2517), 1, 1601, (-2147483638), (-2517), (-748));
      assertNotNull(mockGregorianCalendar0);
      
      YearMonth yearMonth2 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth2, yearMonth1);
      assertNotSame(yearMonth2, yearMonth0);
      assertFalse(yearMonth2.equals((Object)yearMonth1));
      assertFalse(yearMonth2.equals((Object)yearMonth0));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-7872398179768000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=247493,MONTH=8,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=264,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=50,SECOND=32,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(247493, yearMonth2.getYear());
      assertEquals(9, yearMonth2.getMonthOfYear());
      assertEquals(2, yearMonth2.size());
      assertNotNull(yearMonth2);
      
      intArray0[2] = 0;
      boolean boolean0 = dateTimeFieldType0.isSupported(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertTrue(boolean0);
      
      intArray0[3] = (-2813);
      int[] intArray1 = offsetDateTimeField0.add((ReadablePartial) yearMonth1, 1143, intArray0, 0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth0, yearMonth2);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth1, yearMonth0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertFalse(yearMonth0.equals((Object)yearMonth2));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth1.equals((Object)yearMonth2));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(86400, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(0, yearMonth1.getYear());
      assertEquals(12, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 0, 0, (-2813)}, intArray0);
      assertArrayEquals(new int[] {1, 0, 0, (-2813)}, intArray1);
      
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 10;
      intArray2[1] = 0;
      intArray2[2] = (-2813);
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray2[5] = (-2139);
      intArray2[6] = 1143;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((ReadablePartial) yearMonth1, 0, intArray2, (-2139));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2139 for millisOfSecond must be in the range [1,86400]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Months months0 = Months.EIGHT;
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertNotNull(months0);
      
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) months0, (long) 29, (long) 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, intArray0.length);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology1);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
      
      int[] intArray1 = localDateTime0.getValues();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray1.length);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2014, 2, 14, 73281320}, intArray1);
      
      BuddhistChronology buddhistChronology2 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology2, buddhistChronology0);
      assertSame(buddhistChronology2, buddhistChronology1);
      assertNotNull(buddhistChronology2);
      
      int int0 = offsetDateTimeField0.get((-610L));
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(88, int0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      long long0 = offsetDateTimeField0.roundHalfEven(88);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0L, long0);
      
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertNotNull(yearMonth0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      
      int int1 = offsetDateTimeField0.getMinimumValue((ReadablePartial) yearMonth0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(int1 == int0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(29, int1);
      
      DurationField durationField0 = offsetDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(durationField0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = offsetDateTimeField0.getAsText((ReadablePartial) localDateTime0, 0, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(4, localDateTime0.size());
      assertEquals("0", string1);
      assertNotNull(string1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertNotNull(dividedDateTimeField0);
      
      DurationField durationField1 = dividedDateTimeField0.getRangeDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertNotNull(durationField1);
      
      long long1 = offsetDateTimeField0.getDifferenceAsLong((-374), 0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertTrue(long1 == long0);
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Months months0 = Months.EIGHT;
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) months0, (long) 29, (long) 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, intArray0.length);
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology1);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
      
      int[] intArray1 = localDateTime0.getValues();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray1.length);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2014, 2, 14, 73281320}, intArray1);
      
      BuddhistChronology buddhistChronology2 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology2, buddhistChronology0);
      assertSame(buddhistChronology2, buddhistChronology1);
      assertNotNull(buddhistChronology2);
      
      int int0 = offsetDateTimeField0.get((-610L));
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, int0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      long long0 = offsetDateTimeField0.roundHalfEven(88);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(0L, long0);
      
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      
      int int1 = offsetDateTimeField0.getMinimumValue((ReadablePartial) yearMonth0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(int1 == int0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(29, int1);
      
      DurationField durationField0 = offsetDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertNull(durationField0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = offsetDateTimeField0.getAsText((ReadablePartial) localDateTime0, 0, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(4, localDateTime0.size());
      assertEquals("0", string1);
      assertNotNull(string1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertNotNull(dividedDateTimeField0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      DurationField durationField1 = dividedDateTimeField0.getRangeDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertNotNull(durationField1);
      
      long long1 = offsetDateTimeField0.roundHalfEven(3022L);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(long1 == long0);
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(3000L, long1);
      
      long long2 = dividedDateTimeField0.add((long) 29, 88);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(2552029L, long2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      Months months0 = Months.EIGHT;
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) months0, (long) 29, (long) 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, intArray0.length);
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(buddhistChronology1);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
      
      int[] intArray1 = localDateTime0.getValues();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray1.length);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2014, 2, 14, 73281320}, intArray1);
      
      BuddhistChronology buddhistChronology2 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology2, buddhistChronology1);
      assertSame(buddhistChronology2, buddhistChronology0);
      assertNotNull(buddhistChronology2);
      
      int int0 = offsetDateTimeField0.get((-610L));
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, int0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      long long0 = offsetDateTimeField0.roundHalfEven(88);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(0L, long0);
      
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertNotNull(yearMonth0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertNotNull(dateTimeZone1);
      
      int int1 = offsetDateTimeField0.getMinimumValue((ReadablePartial) yearMonth0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(int1 == int0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(29, int1);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = offsetDateTimeField0.getAsText((ReadablePartial) localDateTime0, 0, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(4, localDateTime0.size());
      assertEquals("0", string1);
      assertNotNull(string1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertNotNull(dividedDateTimeField0);
      
      DurationField durationField0 = dividedDateTimeField0.getRangeDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertNotNull(durationField0);
      
      String string2 = dividedDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals("20", string2);
      assertNotNull(string2);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(29, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(28, remainderDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      assertNotNull(remainderDateTimeField0);
      
      int int2 = remainderDateTimeField0.getMinimumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(29, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(28, remainderDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      assertEquals(0, int2);
      
      long long1 = offsetDateTimeField0.add((-2018L), (long) 1);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertFalse(long1 == long0);
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals((-1018L), long1);
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 29;
      intArray2[1] = 29;
      // Undeclared exception!
      try { 
        remainderDateTimeField0.add((ReadablePartial) localDateTime0, 29, intArray2, (-1197));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfCeiling((-18L));
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertEquals((-18L), long0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("dayOfYear", zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      YearMonth yearMonth0 = new YearMonth((-2207), 1, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals((-2207), yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      int int0 = 777;
      YearMonth yearMonth1 = yearMonth0.plusYears(777);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals((-2207), yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals((-1430), yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertNotNull(yearMonth1);
      
      // Undeclared exception!
      try { 
        yearMonth1.minusYears((-2147447819));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Months months0 = Months.EIGHT;
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertNotNull(months0);
      
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) months0, (long) 29, (long) 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, intArray0.length);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology1);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
      
      int[] intArray1 = localDateTime0.getValues();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray1.length);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2014, 2, 14, 73281320}, intArray1);
      
      BuddhistChronology buddhistChronology2 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology2, buddhistChronology0);
      assertSame(buddhistChronology2, buddhistChronology1);
      assertNotNull(buddhistChronology2);
      
      int int0 = offsetDateTimeField0.get((-610L));
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(88, int0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      long long0 = offsetDateTimeField0.roundHalfEven(88);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(0L, long0);
      
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertNotNull(dateTimeZone1);
      
      int int1 = offsetDateTimeField0.getMinimumValue((ReadablePartial) yearMonth0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(int1 == int0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(29, int1);
      
      DurationField durationField0 = offsetDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertNull(durationField0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertNotNull(locale1);
      
      String string0 = dateTimeZone0.getShortName((long) 1, locale1);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(locale0, locale1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("UTC", string0);
      assertNotNull(string0);
      
      Locale locale2 = Locale.KOREA;
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("ko", locale2.getLanguage());
      assertEquals("ko_KR", locale2.toString());
      assertEquals("KR", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("KOR", locale2.getISO3Country());
      assertEquals("kor", locale2.getISO3Language());
      assertNotNull(locale2);
      
      String string1 = locale2.getDisplayVariant();
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ko", locale2.getLanguage());
      assertEquals("ko_KR", locale2.toString());
      assertEquals("KR", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("KOR", locale2.getISO3Country());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = offsetDateTimeField0.getAsText((ReadablePartial) localDateTime0, 0, locale2);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("ko", locale2.getLanguage());
      assertEquals("ko_KR", locale2.toString());
      assertEquals("KR", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("KOR", locale2.getISO3Country());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals("0", string2);
      assertNotNull(string2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertNotNull(dividedDateTimeField0);
      
      DurationField durationField1 = dividedDateTimeField0.getRangeDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertNotNull(durationField1);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField1, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(28, remainderDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(29, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(remainderDateTimeField0);
      
      long long1 = remainderDateTimeField0.roundHalfFloor(1000000000L);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(long1 == long0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(28, remainderDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(29, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1000000000L, long1);
      
      int int2 = dividedDateTimeField0.get(3017L);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(86400, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2557, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      YearMonth yearMonth1 = yearMonth0.minusMonths(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(2557, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2557, yearMonth1.getYear());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertNotNull(yearMonth1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      boolean boolean0 = dateTimeFieldType0.isSupported(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertTrue(boolean0);
      
      intArray0[3] = (-2813);
      int[] intArray1 = offsetDateTimeField0.add((ReadablePartial) yearMonth1, 1143, intArray0, 0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(86400, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(2557, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2557, yearMonth1.getYear());
      assertEquals(1, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 0, 0, (-2813)}, intArray0);
      assertArrayEquals(new int[] {1, 0, 0, (-2813)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2736));
      assertEquals("-00:00:02.736", dateTimeZone0.getID());
      assertEquals("-00:00:02.736", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.736", dateTimeZone0.getID());
      assertEquals("-00:00:02.736", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.736", dateTimeZone0.getID());
      assertEquals("-00:00:02.736", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2736));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.736", dateTimeZone0.getID());
      assertEquals("-00:00:02.736", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2736), offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2735), offsetDateTimeField0.getMaximumValue());
      assertEquals((-2735), offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = new Integer(1);
      assertEquals(1, long0);
      
      LocalTime localTime0 = new LocalTime(1, dateTimeZone0);
      assertEquals("-00:00:02.736", dateTimeZone0.getID());
      assertEquals("-00:00:02.736", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2736);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 604;
      intArray0[4] = (-2736);
      intArray0[5] = 1;
      intArray0[6] = (-2736);
      intArray0[7] = (-2736);
      int int0 = offsetDateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(8, intArray0.length);
      assertEquals("-00:00:02.736", dateTimeZone0.getID());
      assertEquals("-00:00:02.736", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2736), offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2735), offsetDateTimeField0.getMaximumValue());
      assertEquals((-2735), offsetDateTimeField0.getMinimumValue());
      assertEquals(4, localTime0.size());
      assertEquals((-2735), int0);
      assertArrayEquals(new int[] {(-2736), 1, 1, 604, (-2736), 1, (-2736), (-2736)}, intArray0);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.roundFloor(86399999L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000-00:00:02.736 (BuddhistChronology[-00:00:02.736])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-455));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-455), offsetDateTimeField0.getOffset());
      assertEquals((-455), offsetDateTimeField0.getMinimumValue());
      assertEquals((-454), offsetDateTimeField0.getMaximumValue());
      assertEquals("minuteOfDay", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfCeiling((-455));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-455), offsetDateTimeField0.getOffset());
      assertEquals((-455), offsetDateTimeField0.getMinimumValue());
      assertEquals((-454), offsetDateTimeField0.getMaximumValue());
      assertEquals("minuteOfDay", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0L, long0);
      
      MonthDay monthDay0 = MonthDay.parse("");
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 1;
      intArray0[8] = 1;
      int int0 = offsetDateTimeField0.getMaximumValue((ReadablePartial) monthDay0, intArray0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(9, intArray0.length);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-455), offsetDateTimeField0.getOffset());
      assertEquals((-455), offsetDateTimeField0.getMinimumValue());
      assertEquals((-454), offsetDateTimeField0.getMaximumValue());
      assertEquals("minuteOfDay", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals((-454), int0);
      assertArrayEquals(new int[] {0, 1, 1, 0, 1, 1, 0, 1, 1}, intArray0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfMinute", delegatedDateTimeField0.getName());
      assertNotNull(delegatedDateTimeField0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(delegatedDateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", delegatedDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("yearOfEra", zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue((ReadablePartial) localTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", delegatedDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("yearOfEra", zeroIsMaxDateTimeField0.getName());
      assertEquals(4, localTime0.size());
      assertEquals(60, int0);
      
      DateTimeField dateTimeField1 = buddhistChronology0.minuteOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField1 = new ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertFalse(zeroIsMaxDateTimeField1.equals((Object)zeroIsMaxDateTimeField0));
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", zeroIsMaxDateTimeField1.getName());
      assertEquals(1, zeroIsMaxDateTimeField1.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField1.isSupported());
      assertNotNull(zeroIsMaxDateTimeField1);
      
      LocalTime localTime1 = new LocalTime((long) 1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
      
      LocalTime localTime2 = localTime1.minusSeconds(596);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertNotNull(localTime2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1178);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField1.add((ReadablePartial) localTime2, (-1178), intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1178
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfCeiling((-18L));
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals((-18L), long0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("dayOfYear", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      int int0 = (-2207);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapPartial((ReadablePartial) null, (-2207), (int[]) null, 1516);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 2126;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2126, (-3460), 2126);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      String string0 = offsetDateTimeField0.getAsText((-852L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertEquals("2127", string0);
      assertNotNull(string0);
      
      long long0 = offsetDateTimeField0.add(912L, 0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertEquals(912L, long0);
      
      int int1 = offsetDateTimeField0.getMinimumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(int1 == int0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertEquals(2126, int1);
      
      boolean boolean0 = buddhistChronology0.equals(dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertFalse(boolean0);
      
      long long1 = offsetDateTimeField0.remainder(2998L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertEquals(2998L, long1);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set(1768L, (-3460));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3460 for millisOfSecond must be in the range [2126,2126]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfCeiling(0L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertEquals(0L, long0);
      
      int int0 = offsetDateTimeField0.getMaximumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertEquals(86400000, int0);
      
      long long1 = offsetDateTimeField0.set(0L, 86400000);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertEquals(86399999L, long1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-2598);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, (-2598));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2598), offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfYear", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2598), offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfYear", offsetDateTimeField0.getName());
      assertNotNull(durationField0);
      
      int int1 = offsetDateTimeField0.get(1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2598), offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfYear", offsetDateTimeField0.getName());
      assertEquals(25, int1);
      
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertNotNull(dateTimeFormatter0);
      
      // Undeclared exception!
      try { 
        LocalTime.parse(">Q", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      DurationField durationField0 = offsetDateTimeField0.getDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNotNull(durationField0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotNull(buddhistChronology1);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1674;
      intArray0[5] = 1;
      intArray0[6] = 1;
      int[] intArray1 = offsetDateTimeField0.addWrapPartial(localDateTime0, 1, intArray0, 12);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(4, localDateTime0.size());
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 13, 1, 1, 1674, 1, 1}, intArray0);
      assertArrayEquals(new int[] {1, 13, 1, 1, 1674, 1, 1}, intArray1);
      
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, (-3023));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2769), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(83630, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = dateTimeZone0.convertUTCToLocal((-2769));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals((-5538L), long0);
      
      int int0 = offsetDateTimeField0.getDifference((-2769), 1L);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2769), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(83630, offsetDateTimeField0.getMaximumValue());
      assertEquals((-2), int0);
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2769);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 604;
      intArray0[4] = (-2769);
      intArray0[5] = 1;
      intArray0[6] = (-2769);
      intArray0[7] = (-2769);
      int int1 = offsetDateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(8, intArray0.length);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2769), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(83630, offsetDateTimeField0.getMaximumValue());
      assertEquals(4, localTime0.size());
      assertEquals(83630, int1);
      assertArrayEquals(new int[] {(-2769), 1, 1, 604, (-2769), 1, (-2769), (-2769)}, intArray0);
      
      long long1 = offsetDateTimeField0.roundFloor(86399999L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2769), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(83630, offsetDateTimeField0.getMaximumValue());
      assertEquals(86399769L, long1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertNotNull(millisDurationField0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(millisDurationField0, durationFieldType0);
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertNotNull(decoratedDurationField0);
      
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(decoratedDurationField0, durationFieldType0);
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("weekyears", delegatedDurationField0.getName());
      assertNotNull(delegatedDurationField0);
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, delegatedDurationField0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("weekyears", delegatedDurationField0.getName());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("yearOfCentury", unsupportedDateTimeField0.getName());
      assertNotNull(unsupportedDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("weekyears", delegatedDurationField0.getName());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("yearOfCentury", unsupportedDateTimeField0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType1.getName());
      assertEquals("yearOfCentury", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType1, 12);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("weekyears", delegatedDurationField0.getName());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("yearOfCentury", unsupportedDateTimeField0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType1.getName());
      assertEquals("yearOfCentury", dateTimeFieldType1.toString());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(12, dividedDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertNotNull(dividedDateTimeField0);
      
      YearMonth yearMonth0 = new YearMonth((Object) null);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertNotNull(yearMonth0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 12);
      assertEquals("+01:12", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:12", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      assertEquals("+01:12", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:12", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Duration duration0 = new Duration((Object) null);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(dateTime0, duration0, periodType0);
      assertEquals("+01:12", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:12", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      YearMonth yearMonth1 = yearMonth0.minus(period0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth0, yearMonth1);
      assertTrue(yearMonth1.equals((Object)yearMonth0));
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2014, yearMonth1.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals("+01:12", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:12", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(yearMonth1);
      
      int int0 = dividedDateTimeField0.getMinimumValue((ReadablePartial) yearMonth1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertTrue(yearMonth0.equals((Object)yearMonth1));
      assertTrue(yearMonth1.equals((Object)yearMonth0));
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("weekyears", delegatedDurationField0.getName());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("yearOfCentury", unsupportedDateTimeField0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType1.getName());
      assertEquals("yearOfCentury", dateTimeFieldType1.toString());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(12, dividedDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals("+01:12", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:12", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2014, yearMonth1.getYear());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.addWrapField((long) 1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(32054400001L, long0);
      
      int int0 = 2514;
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 12, 2514, 12);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2514, offsetDateTimeField1.getMinimumValue());
      assertEquals(12, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(12, offsetDateTimeField1.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField1.getName());
      assertNotNull(offsetDateTimeField1);
      
      long long1 = offsetDateTimeField1.roundHalfFloor(2514);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertFalse(long1 == long0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2514, offsetDateTimeField1.getMinimumValue());
      assertEquals(12, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(12, offsetDateTimeField1.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField1.getName());
      assertEquals((-259200000L), long1);
      
      int int1 = 4;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 4);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(4, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", dividedDateTimeField0.getName());
      assertEquals(25, dividedDateTimeField0.getMaximumValue());
      assertNotNull(dividedDateTimeField0);
      
      long long2 = 854L;
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      int int2 = offsetDateTimeField1.getMaximumTextLength(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertNotSame(locale0, locale1);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2514, offsetDateTimeField1.getMinimumValue());
      assertEquals(12, offsetDateTimeField1.getMaximumValue());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(12, offsetDateTimeField1.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField1.getName());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(2, int2);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int3 = (-708);
      // Undeclared exception!
      try { 
        localDateTime0.withEra((-708));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -708 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DurationField durationField0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = dateTimeFieldType0.isSupported(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(boolean0);
      
      int int0 = 2709;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 2709);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2708, remainderDateTimeField0.getMaximumValue());
      assertEquals("clockhourOfHalfday", remainderDateTimeField0.getName());
      assertEquals(2709, remainderDateTimeField0.getDivisor());
      assertNotNull(remainderDateTimeField0);
      
      DurationField durationField1 = remainderDateTimeField0.getDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2708, remainderDateTimeField0.getMaximumValue());
      assertEquals("clockhourOfHalfday", remainderDateTimeField0.getName());
      assertEquals(2709, remainderDateTimeField0.getDivisor());
      assertNotNull(durationField1);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2708, remainderDateTimeField0.getMaximumValue());
      assertEquals("clockhourOfHalfday", remainderDateTimeField0.getName());
      assertEquals(2709, remainderDateTimeField0.getDivisor());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      int int1 = zeroIsMaxDateTimeField0.getMinimumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2708, remainderDateTimeField0.getMaximumValue());
      assertEquals("clockhourOfHalfday", remainderDateTimeField0.getName());
      assertEquals(2709, remainderDateTimeField0.getDivisor());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(1, int1);
      
      Locale locale0 = new Locale("al&+");
      assertEquals("", locale0.getISO3Country());
      assertEquals("al&+", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("al&+", locale0.getLanguage());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale1 = Locale.lookup(linkedList0, (Collection<Locale>) null);
      assertEquals(0, linkedList0.size());
      assertNull(locale1);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("", locale0.getISO3Country());
      assertEquals("al&+", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("al&+", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      int int2 = remainderDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2708, remainderDateTimeField0.getMaximumValue());
      assertEquals("clockhourOfHalfday", remainderDateTimeField0.getName());
      assertEquals(2709, remainderDateTimeField0.getDivisor());
      assertEquals("", locale0.getISO3Country());
      assertEquals("al&+", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("al&+", locale0.getLanguage());
      assertEquals(4, int2);
      
      boolean boolean1 = zeroIsMaxDateTimeField0.isLeap(1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(boolean1 == boolean0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2708, remainderDateTimeField0.getMaximumValue());
      assertEquals("clockhourOfHalfday", remainderDateTimeField0.getName());
      assertEquals(2709, remainderDateTimeField0.getDivisor());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        LocalDateTime.parse("+yOeEFa,$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+yOeEFa,$\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withYear(1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      
      LocalDateTime localDateTime2 = localDateTime1.withDayOfWeek(1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertSame(localDateTime1, localDateTime2);
      assertSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertNotNull(localDateTime2);
      
      LocalDateTime localDateTime3 = localDateTime2.plusHours(1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertSame(localDateTime1, localDateTime2);
      assertSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertNotNull(localDateTime3);
      
      LocalDateTime localDateTime4 = localDateTime3.plusDays(32);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime4);
      assertSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime3);
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
      assertNotNull(localDateTime4);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 32;
      intArray0[4] = 32;
      intArray0[5] = 32;
      intArray0[6] = 1;
      intArray0[7] = 32;
      int int0 = offsetDateTimeField0.getMinimumValue((ReadablePartial) localDateTime4, intArray0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime4);
      assertSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime3);
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime4));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertEquals(8, intArray0.length);
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
      assertEquals(1, int0);
      assertArrayEquals(new int[] {1, 32, 32, 32, 32, 32, 1, 32}, intArray0);
      
      long long0 = offsetDateTimeField0.roundHalfCeiling(0L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(0L, long0);
      
      long long1 = offsetDateTimeField0.roundHalfEven((-963L));
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals((-963L), long1);
      
      int int1 = offsetDateTimeField0.getMinimumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(int1 == int0);
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Months months0 = Months.EIGHT;
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertNotNull(months0);
      
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) months0, (long) 29, (long) 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, intArray0.length);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology1);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
      
      int[] intArray1 = localDateTime0.getValues();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray1.length);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2014, 2, 14, 73281320}, intArray1);
      
      BuddhistChronology buddhistChronology2 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology2, buddhistChronology0);
      assertSame(buddhistChronology2, buddhistChronology1);
      assertNotNull(buddhistChronology2);
      
      int int0 = offsetDateTimeField0.get((-610L));
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(88, int0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)dateTimeZone0.toTimeZone();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      long long0 = offsetDateTimeField0.roundHalfEven(88);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(0L, long0);
      
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertNotNull(dateTimeZone1);
      
      int int1 = offsetDateTimeField0.getMinimumValue((ReadablePartial) yearMonth0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(int1 == int0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(29, int1);
      
      DurationField durationField0 = offsetDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertNull(durationField0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = offsetDateTimeField0.getAsText((ReadablePartial) localDateTime0, 0, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(29, offsetDateTimeField0.getMinimumValue());
      assertEquals(88, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(29, offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals("0", string0);
      assertNotNull(string0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertNotNull(dividedDateTimeField0);
      
      DurationField durationField1 = dividedDateTimeField0.getRangeDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology2);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals("hourOfDay", dividedDateTimeField0.getName());
      assertEquals(2, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertNotNull(durationField1);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add(9223372036854775807L, 435);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 9223372036854775807 + 435000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfCeiling(0L);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(0L, long0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-5431);
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((ReadablePartial) null, 1, intArray0, "org.joda.time.field.BaseDateTimeField", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.field.BaseDateTimeField\" for millisOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(buddhistChronology0);
      
      long long0 = buddhistChronology0.add(3599999L, (-1677L), 1822);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(544505L, long0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2769), offsetDateTimeField0.getMinimumValue());
      assertEquals(86397230, offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      long long1 = dateTimeZone0.convertUTCToLocal((-2769));
      assertFalse(long1 == long0);
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-5538L), long1);
      
      int int0 = offsetDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2769), offsetDateTimeField0.getMinimumValue());
      assertEquals(86397230, offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(8, int0);
      
      Integer integer0 = new Integer(8);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(8, (int)integer0);
      assertNotNull(integer0);
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2769);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 604;
      intArray0[4] = (-2769);
      intArray0[5] = 1;
      intArray0[6] = (-2769);
      intArray0[7] = (-2769);
      int int1 = offsetDateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(8, intArray0.length);
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2769), offsetDateTimeField0.getMinimumValue());
      assertEquals(86397230, offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals(4, localTime0.size());
      assertEquals(86397230, int1);
      assertArrayEquals(new int[] {(-2769), 1, 1, 604, (-2769), 1, (-2769), (-2769)}, intArray0);
      
      long long2 = offsetDateTimeField0.roundFloor(86399999L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2769), offsetDateTimeField0.getMinimumValue());
      assertEquals(86397230, offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals(86399999L, long2);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 86397230;
      intArray1[1] = 604;
      intArray1[2] = (-2769);
      int int2 = offsetDateTimeField0.getMinimumValue((ReadablePartial) localTime0, intArray1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3, intArray1.length);
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2769), offsetDateTimeField0.getMinimumValue());
      assertEquals(86397230, offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals(4, localTime0.size());
      assertEquals((-2769), int2);
      assertArrayEquals(new int[] {86397230, 604, (-2769)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeField0, dateTimeField1);
      assertSame(dateTimeField1, dateTimeField0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeField1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertNotNull(preciseDurationField0);
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, preciseDurationField0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals("halfdayOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertNotNull(unsupportedDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals("halfdayOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeFieldType1.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals("halfdayOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeFieldType1.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType1.toString());
      assertEquals("halfdayOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long0 = zeroIsMaxDateTimeField0.getDifferenceAsLong(259200001L, 21L);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeField0, dateTimeField1);
      assertSame(dateTimeField1, dateTimeField0);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals("halfdayOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeFieldType1.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType1.toString());
      assertEquals("halfdayOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(71L, long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long0 = new Integer(1);
      assertEquals(1, long0);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", zeroIsMaxDateTimeField0.getName());
      assertEquals(86400000, int0);
      
      Integer integer0 = new Integer(1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)long0));
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      long long1 = zeroIsMaxDateTimeField0.roundHalfFloor(1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", zeroIsMaxDateTimeField0.getName());
      assertEquals(1L, long1);
      
      int int1 = (-4401);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-4401));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals((-4401), offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(86395598, offsetDateTimeField0.getMaximumValue());
      assertEquals((-4401), offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      boolean boolean0 = offsetDateTimeField0.isLeap(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals((-4401), offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(86395598, offsetDateTimeField0.getMaximumValue());
      assertEquals((-4401), offsetDateTimeField0.getMinimumValue());
      assertFalse(boolean0);
      
      DurationField durationField0 = buddhistChronology0.days();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(durationField0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType1.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType1, (-4401));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1900;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 1900);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals((-153826), dividedDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertEquals(153831, dividedDateTimeField0.getMaximumValue());
      assertEquals(1900, dividedDateTimeField0.getDivisor());
      assertNotNull(dividedDateTimeField0);
      
      boolean boolean0 = dividedDateTimeField0.isSupported();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals((-153826), dividedDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertEquals(153831, dividedDateTimeField0.getMaximumValue());
      assertEquals(1900, dividedDateTimeField0.getDivisor());
      assertTrue(boolean0);
      
      long long0 = dividedDateTimeField0.roundHalfFloor(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals((-153826), dividedDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertEquals(153831, dividedDateTimeField0.getMaximumValue());
      assertEquals(1900, dividedDateTimeField0.getDivisor());
      assertEquals((-19343577600000L), long0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("weekOfWeekyear", dateTimeFieldType1.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldType1);
      
      // Undeclared exception!
      try { 
        UnsupportedDateTimeField.getInstance(dateTimeFieldType1, (DurationField) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 10);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(11, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(10, offsetDateTimeField0.getOffset());
      assertEquals("weekOfWeekyear", offsetDateTimeField0.getName());
      assertEquals(63, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      boolean boolean0 = offsetDateTimeField0.isLeap(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(11, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(10, offsetDateTimeField0.getOffset());
      assertEquals("weekOfWeekyear", offsetDateTimeField0.getName());
      assertEquals(63, offsetDateTimeField0.getMaximumValue());
      assertFalse(boolean0);
      
      MonthDay monthDay0 = new MonthDay((long) 1, (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      
      int int0 = offsetDateTimeField0.getMaximumValue((ReadablePartial) monthDay0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(11, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(10, offsetDateTimeField0.getOffset());
      assertEquals("weekOfWeekyear", offsetDateTimeField0.getName());
      assertEquals(63, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(63, int0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int1 = offsetDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(11, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(10, offsetDateTimeField0.getOffset());
      assertEquals("weekOfWeekyear", offsetDateTimeField0.getName());
      assertEquals(63, offsetDateTimeField0.getMaximumValue());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals((-2769), offsetDateTimeField0.getMinimumValue());
      assertEquals(86397230, offsetDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      long long0 = dateTimeZone0.convertUTCToLocal((-2769));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals((-5538L), long0);
      
      int int0 = offsetDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals((-2769), offsetDateTimeField0.getMinimumValue());
      assertEquals(86397230, offsetDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(8, int0);
      
      int int1 = new Integer(8);
      assertTrue(int1 == int0);
      assertEquals(8, int1);
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2769);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 604;
      intArray0[4] = (-2769);
      intArray0[5] = 1;
      intArray0[6] = (-2769);
      intArray0[7] = (-2769);
      int int2 = offsetDateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, intArray0.length);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals((-2769), offsetDateTimeField0.getMinimumValue());
      assertEquals(86397230, offsetDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(4, localTime0.size());
      assertEquals(86397230, int2);
      assertArrayEquals(new int[] {(-2769), 1, 1, 604, (-2769), 1, (-2769), (-2769)}, intArray0);
      
      long long1 = offsetDateTimeField0.roundFloor(86399999L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals((-2769), offsetDateTimeField0.getMinimumValue());
      assertEquals(86397230, offsetDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(86399999L, long1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long0 = zeroIsMaxDateTimeField0.roundHalfEven(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(1L, long0);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals(86400000, int0);
      
      long long1 = new Integer(1);
      assertFalse(long1 == long0);
      assertEquals(1, long1);
      
      long long2 = zeroIsMaxDateTimeField0.roundHalfFloor((-2138L));
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals((-2138L), long2);
      
      int int1 = (-4401);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-4401));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-4401), offsetDateTimeField0.getOffset());
      assertEquals((-4401), offsetDateTimeField0.getMinimumValue());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(86395598, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      boolean boolean0 = offsetDateTimeField0.isLeap(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-4401), offsetDateTimeField0.getOffset());
      assertEquals((-4401), offsetDateTimeField0.getMinimumValue());
      assertEquals("millisOfDay", offsetDateTimeField0.getName());
      assertEquals(86395598, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertFalse(boolean0);
      
      DurationField durationField0 = buddhistChronology0.days();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(durationField0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType1.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType1, (-4401));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(32, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 1, 1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(32, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(3, offsetDateTimeField1.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField1.getName());
      assertEquals(1, offsetDateTimeField1.getMaximumValue());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertNotNull(offsetDateTimeField1);
      
      long long0 = offsetDateTimeField1.roundHalfEven(1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(32, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(3, offsetDateTimeField1.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField1.getName());
      assertEquals(1, offsetDateTimeField1.getMaximumValue());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertEquals(0L, long0);
      
      long long1 = offsetDateTimeField1.roundHalfEven(0L);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertTrue(long1 == long0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(32, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(3, offsetDateTimeField1.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField1.getName());
      assertEquals(1, offsetDateTimeField1.getMaximumValue());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertEquals(0L, long1);
      
      int int0 = offsetDateTimeField1.get(1L);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(32, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(3, offsetDateTimeField1.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField1.getName());
      assertEquals(1, offsetDateTimeField1.getMaximumValue());
      assertEquals(1, offsetDateTimeField1.getOffset());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.002", dateTimeZone0.getID());
      assertEquals("+00:00:00.002", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.002", dateTimeZone0.getID());
      assertEquals("+00:00:00.002", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.002", dateTimeZone0.getID());
      assertEquals("+00:00:00.002", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.002", dateTimeZone0.getID());
      assertEquals("+00:00:00.002", dateTimeZone0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long0 = zeroIsMaxDateTimeField0.add((long) 2, (long) 1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.002", dateTimeZone0.getID());
      assertEquals("+00:00:00.002", dateTimeZone0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(43200002L, long0);
      
      int int0 = zeroIsMaxDateTimeField0.getMaximumValue((-1443L));
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.002", dateTimeZone0.getID());
      assertEquals("+00:00:00.002", dateTimeZone0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(2, int0);
      
      long long1 = zeroIsMaxDateTimeField0.roundCeiling(86399999L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.002", dateTimeZone0.getID());
      assertEquals("+00:00:00.002", dateTimeZone0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(129599998L, long1);
      
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.002", dateTimeZone0.getID());
      assertEquals("+00:00:00.002", dateTimeZone0.toString());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      Hours hours0 = Hours.ONE;
      assertEquals(1, hours0.size());
      assertEquals(1, hours0.getHours());
      assertNotNull(hours0);
      
      YearMonth yearMonth1 = yearMonth0.withPeriodAdded(hours0, 12740625);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertTrue(yearMonth1.equals((Object)yearMonth0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.002", dateTimeZone0.getID());
      assertEquals("+00:00:00.002", dateTimeZone0.toString());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, hours0.size());
      assertEquals(1, hours0.getHours());
      assertEquals(2, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2014, yearMonth1.getYear());
      assertNotNull(yearMonth1);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.getAsText((ReadablePartial) yearMonth1, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 3;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      assertEquals("+00:00:00.003", dateTimeZone0.toString());
      assertEquals("+00:00:00.003", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("+00:00:00.003", dateTimeZone0.toString());
      assertEquals("+00:00:00.003", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(islamicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("+00:00:00.003", dateTimeZone0.toString());
      assertEquals("+00:00:00.003", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(strictChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      int int1 = (-2615);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(strictChronology0, dateTimeField0, (-2615));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("+00:00:00.003", dateTimeZone0.toString());
      assertEquals("+00:00:00.003", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfYear", skipUndoDateTimeField0.getName());
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertNotNull(skipUndoDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("+00:00:00.003", dateTimeZone0.toString());
      assertEquals("+00:00:00.003", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfYear", skipUndoDateTimeField0.getName());
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("dayOfYear", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(367, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_15_BASED);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertEquals("+00:00:00.003", dateTimeZone0.toString());
      assertEquals("+00:00:00.003", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(islamicChronology1);
      
      LocalDateTime localDateTime0 = new LocalDateTime(294L);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      
      LocalDateTime localDateTime2 = localDateTime1.withYearOfCentury(3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertNotNull(localDateTime2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 10;
      intArray0[4] = 1;
      int[] intArray1 = offsetDateTimeField0.addWrapField((ReadablePartial) localDateTime2, 0, intArray0, 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      assertEquals("+00:00:00.003", dateTimeZone0.toString());
      assertEquals("+00:00:00.003", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfYear", skipUndoDateTimeField0.getName());
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("dayOfYear", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(367, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, 1, 1, 10, 1}, intArray1);
      assertArrayEquals(new int[] {2, 1, 1, 10, 1}, intArray0);
      
      boolean boolean0 = skipUndoDateTimeField0.isLeap((-1851L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertEquals("+00:00:00.003", dateTimeZone0.toString());
      assertEquals("+00:00:00.003", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("dayOfYear", skipUndoDateTimeField0.getName());
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertFalse(boolean0);
      
      int int2 = new Integer(1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(skipUndoDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DurationField durationField0 = buddhistChronology0.months();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationField0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1440, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.remainder(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1440, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", delegatedDateTimeField0.getName());
      assertNotNull(delegatedDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      long long0 = delegatedDateTimeField0.roundHalfCeiling(3600L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", delegatedDateTimeField0.getName());
      assertEquals(3600L, long0);
      
      int int0 = 695;
      int int1 = 2347;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 695, 2347, 695);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", delegatedDateTimeField0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals(2347, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(695, offsetDateTimeField0.getOffset());
      assertEquals("monthOfYear", offsetDateTimeField0.getName());
      assertEquals(695, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int2 = offsetDateTimeField0.getLeapAmount(2347);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("millisOfSecond", delegatedDateTimeField0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals(2347, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(695, offsetDateTimeField0.getOffset());
      assertEquals("monthOfYear", offsetDateTimeField0.getName());
      assertEquals(695, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((long) 1, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = (-3421);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3421));
      assertEquals("-00:00:03.421", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.421", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:03.421", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.421", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:03.421", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.421", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      ReadablePartial readablePartial0 = null;
      Weeks weeks0 = Weeks.TWO;
      assertEquals(2, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) weeks0, (long) 99, (long) 99);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, intArray0.length);
      assertEquals("-00:00:03.421", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.421", dateTimeZone0.toString());
      assertEquals(2, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 99);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:03.421", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.421", dateTimeZone0.toString());
      assertEquals(292279635, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(99, offsetDateTimeField0.getOffset());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertEquals((-292268412), offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      int int1 = 0;
      long long0 = offsetDateTimeField0.add(175L, 0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:03.421", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.421", dateTimeZone0.toString());
      assertEquals(292279635, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(99, offsetDateTimeField0.getOffset());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertEquals((-292268412), offsetDateTimeField0.getMinimumValue());
      assertEquals(175L, long0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 127);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:03.421", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.421", dateTimeZone0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(127, remainderDateTimeField0.getDivisor());
      assertEquals("millisOfSecond", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(126, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(remainderDateTimeField0);
      
      int int2 = remainderDateTimeField0.getLeapAmount(175L);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("-00:00:03.421", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.421", dateTimeZone0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(127, remainderDateTimeField0.getDivisor());
      assertEquals("millisOfSecond", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(126, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(0, int2);
      
      long long1 = remainderDateTimeField0.addWrapField((long) 127, (-3421));
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals("-00:00:03.421", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.421", dateTimeZone0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(127, remainderDateTimeField0.getDivisor());
      assertEquals("millisOfSecond", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(126, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(252806400127L, long1);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertEquals("-00:00:03.421", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:03.421", dateTimeZone0.toString());
      assertTrue(boolean0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1078;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 1078);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1078, dividedDateTimeField0.getDivisor());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertNotNull(dividedDateTimeField0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1078, dividedDateTimeField0.getDivisor());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1077, remainderDateTimeField0.getMaximumValue());
      assertEquals(1078, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.set((long) 1, 2);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1078, dividedDateTimeField0.getDivisor());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertEquals("secondOfDay", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1077, remainderDateTimeField0.getMaximumValue());
      assertEquals(1078, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(86400001L, long0);
      
      int int1 = dividedDateTimeField0.getMaximumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1078, dividedDateTimeField0.getDivisor());
      assertEquals("secondOfDay", dividedDateTimeField0.getName());
      assertEquals(0, int1);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = (-2769);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2768), offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      long long0 = dateTimeZone0.convertUTCToLocal((-2769));
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals((-5538L), long0);
      
      int int1 = offsetDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-2768), offsetDateTimeField0.getMaximumValue());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(5, int1);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.getDifference((-2769), 1L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("millisOfDay", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      String string0 = zeroIsMaxDateTimeField0.getAsShortText((-990L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("millisOfDay", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("23", string0);
      assertNotNull(string0);
      
      long long0 = zeroIsMaxDateTimeField0.remainder(2390L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("millisOfDay", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(2390L, long0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(0L, preciseDurationField0.getUnitMillis());
      assertEquals("halfdays", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertNotNull(preciseDurationField0);
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, preciseDurationField0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(0L, preciseDurationField0.getUnitMillis());
      assertEquals("halfdays", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals("centuryOfEra", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertNotNull(unsupportedDateTimeField0);
      
      DurationField durationField0 = unsupportedDateTimeField0.getLeapDurationField();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(0L, preciseDurationField0.getUnitMillis());
      assertEquals("halfdays", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals("centuryOfEra", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertNull(durationField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 1000);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(1000, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertNotNull(dividedDateTimeField0);
      
      int int0 = dividedDateTimeField0.getMinimumValue((-528L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertEquals(1000, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 236548278);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(236548278, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertNotNull(dividedDateTimeField0);
      
      boolean boolean0 = dividedDateTimeField0.isSupported();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(236548278, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", delegatedDateTimeField0.getName());
      assertNotNull(delegatedDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 695;
      int int1 = 2347;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 695, 2347, 695);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", delegatedDateTimeField0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", offsetDateTimeField0.getName());
      assertEquals(695, offsetDateTimeField0.getMaximumValue());
      assertEquals(695, offsetDateTimeField0.getOffset());
      assertEquals(2347, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      int int2 = offsetDateTimeField0.getLeapAmount(2347);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("millisOfSecond", delegatedDateTimeField0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", offsetDateTimeField0.getName());
      assertEquals(695, offsetDateTimeField0.getMaximumValue());
      assertEquals(695, offsetDateTimeField0.getOffset());
      assertEquals(2347, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((long) 1, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DividedDateTimeField dividedDateTimeField0 = null;
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DurationField durationField0 = buddhistChronology0.eras();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("eras", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals(0L, durationField0.getUnitMillis());
      assertNotNull(durationField0);
      
      MonthDay monthDay0 = new MonthDay();
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertNotNull(monthDay1);
      
      // Undeclared exception!
      try { 
        monthDay1.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotNull(buddhistChronology1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1015, 1015);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(1015, offsetDateTimeField0.getMinimumValue());
      assertEquals(60, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = offsetDateTimeField0.getAsShortText((long) 1, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(1015, offsetDateTimeField0.getMinimumValue());
      assertEquals(60, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("1", string0);
      assertNotNull(string0);
      
      int int0 = offsetDateTimeField0.getMinimumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(1015, offsetDateTimeField0.getMinimumValue());
      assertEquals(60, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1015, int0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("weekyear", zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long0 = zeroIsMaxDateTimeField0.roundHalfFloor(1L);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("weekyear", zeroIsMaxDateTimeField0.getName());
      assertEquals(0L, long0);
      
      Locale locale1 = Locale.US;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertNotNull(locale1);
      
      int int1 = zeroIsMaxDateTimeField0.getMaximumShortTextLength(locale1);
      assertEquals(1, BuddhistChronology.BE);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(locale1, locale0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(int1 == int0);
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("weekyear", zeroIsMaxDateTimeField0.getName());
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 3211);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3212, offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals(3211, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3242, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfFloor(63072000000L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(3212, offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals(3211, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(3242, offsetDateTimeField0.getMaximumValue());
      assertEquals(63072000000L, long0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2004, 2004, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(2004, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2005, offsetDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType1 = offsetDateTimeField0.getType();
      assertEquals(1, BuddhistChronology.BE);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(2004, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2005, offsetDateTimeField0.getMinimumValue());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals("hourOfDay", dateTimeFieldType1.getName());
      assertEquals("hourOfDay", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("year", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfEven((-1L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(86400000, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals((-1L), long0);
      
      try { 
        DateTimeZone.forOffsetHoursMinutes(1, (-3005));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -3005
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2126, (-3460), 2126);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      Minutes minutes0 = Minutes.ZERO;
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertNotNull(minutes0);
      
      long long0 = buddhistChronology0.add((ReadablePeriod) minutes0, (long) (-3460), (-593));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, minutes0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals((-3460L), long0);
      
      String string0 = offsetDateTimeField0.getAsText((-852L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals("2127", string0);
      assertNotNull(string0);
      
      long long1 = offsetDateTimeField0.add(912L, 0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(912L, long1);
      
      int int0 = offsetDateTimeField0.getMinimumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(2126, int0);
      
      long long2 = offsetDateTimeField0.remainder(2998L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2126, offsetDateTimeField0.getMinimumValue());
      assertEquals(2126, offsetDateTimeField0.getMaximumValue());
      assertEquals(2126, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertEquals(2998L, long2);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(boolean0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField(3283L, 162);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(165283L, long0);
      
      int int0 = zeroIsMaxDateTimeField0.getMinimumValue((long) 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, int0);
      
      int int1 = (-458);
      OffsetDateTimeField offsetDateTimeField0 = null;
      try {
        offsetDateTimeField0 = new OffsetDateTimeField(zeroIsMaxDateTimeField0, dateTimeFieldType0, 0, (-458), 4528);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offset cannot be zero
         //
         verifyException("org.joda.time.field.OffsetDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("dayOfYear", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      boolean boolean0 = zeroIsMaxDateTimeField0.isLeap(1864L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertEquals("dayOfYear", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(8, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int0 = offsetDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(8, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1, int0);
      
      String string0 = offsetDateTimeField0.getName();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(8, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals("hourOfDay", string0);
      assertNotNull(string0);
      
      int int1 = offsetDateTimeField0.getLeapAmount(1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(8, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals(0, int1);
      
      DurationField durationField0 = buddhistChronology0.months();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationField0);
      
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, (-1482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2301), 1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals((-2301), offsetDateTimeField0.getOffset());
      assertEquals((-1935), offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add(1L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2299 for hourOfDay must be in the range [1,-1935]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Z)l{H-^{7qcn?fh");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 428);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(428, remainderDateTimeField0.getDivisor());
      assertEquals(427, remainderDateTimeField0.getMaximumValue());
      assertEquals("hourOfHalfday", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(remainderDateTimeField0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = remainderDateTimeField0.getAsText((-524L), locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(428, remainderDateTimeField0.getDivisor());
      assertEquals(427, remainderDateTimeField0.getMaximumValue());
      assertEquals("hourOfHalfday", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("48", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      DurationField durationField0 = buddhistChronology0.hours();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(durationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 168;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 168);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", remainderDateTimeField0.getName());
      assertEquals(168, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(167, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(remainderDateTimeField0);
      
      int int1 = remainderDateTimeField0.getDifference((-580L), 2198L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", remainderDateTimeField0.getName());
      assertEquals(168, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(167, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(0, int1);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long0 = zeroIsMaxDateTimeField0.set(2060L, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals("year", zeroIsMaxDateTimeField0.getName());
      assertEquals(62060L, long0);
      
      // Undeclared exception!
      try { 
        LocalDateTime.parse("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(32, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 351, 351, 351);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(32, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("weekyear", offsetDateTimeField1.getName());
      assertEquals(353, offsetDateTimeField1.getMinimumValue());
      assertEquals(351, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(351, offsetDateTimeField1.getMaximumValue());
      assertNotNull(offsetDateTimeField1);
      
      long long0 = offsetDateTimeField1.roundHalfEven(1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(32, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("weekyear", offsetDateTimeField1.getName());
      assertEquals(353, offsetDateTimeField1.getMinimumValue());
      assertEquals(351, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(351, offsetDateTimeField1.getMaximumValue());
      assertEquals(0L, long0);
      
      long long1 = offsetDateTimeField1.roundHalfEven(0L);
      assertEquals(1, BuddhistChronology.BE);
      assertNotSame(offsetDateTimeField0, offsetDateTimeField1);
      assertNotSame(offsetDateTimeField1, offsetDateTimeField0);
      assertFalse(offsetDateTimeField0.equals((Object)offsetDateTimeField1));
      assertFalse(offsetDateTimeField1.equals((Object)offsetDateTimeField0));
      assertTrue(long1 == long0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(32, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("weekyear", offsetDateTimeField1.getName());
      assertEquals(353, offsetDateTimeField1.getMinimumValue());
      assertEquals(351, offsetDateTimeField1.getOffset());
      assertTrue(offsetDateTimeField1.isSupported());
      assertEquals(351, offsetDateTimeField1.getMaximumValue());
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("yearOfCentury", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.add((long) 1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("yearOfCentury", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(31536000001L, long0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertFalse(unsupportedDurationField0.isSupported());
      assertTrue(unsupportedDurationField0.isPrecise());
      assertEquals("years", unsupportedDurationField0.getName());
      assertNotNull(unsupportedDurationField0);
      
      // Undeclared exception!
      try { 
        unsupportedDurationField0.getMillis(2037, 31536000001L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = (-528);
      OffsetDateTimeField offsetDateTimeField0 = null;
      try {
        offsetDateTimeField0 = new OffsetDateTimeField((DateTimeField) null, (DateTimeFieldType) null, (-528));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      DateTimeField dateTimeField0 = mutableDateTime0.getRoundingField();
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals("-00:00:00.001", dateTimeZone0.getID());
      assertEquals("-00:00:00.001", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((DateTimeField) null, dateTimeFieldType0, (-580));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      MonthDay monthDay0 = new MonthDay();
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      // Undeclared exception!
      monthDay0.minusDays(3600000);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertNotNull(millisDurationField0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, (-704));
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertTrue(scaledDurationField0.isSupported());
      assertEquals("halfdays", scaledDurationField0.getName());
      assertEquals((-704), scaledDurationField0.getScalar());
      assertNotNull(scaledDurationField0);
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, scaledDurationField0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertTrue(scaledDurationField0.isSupported());
      assertEquals("halfdays", scaledDurationField0.getName());
      assertEquals((-704), scaledDurationField0.getScalar());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("dayOfMonth", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertNotNull(unsupportedDateTimeField0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(unsupportedDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must be supported
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = offsetDateTimeField0.toString();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("DateTimeField[dayOfMonth]", string0);
      assertNotNull(string0);
      
      long long0 = dateTimeZone0.convertUTCToLocal((-2769));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals((-5538L), long0);
      
      int int0 = offsetDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(5, int0);
      
      int int1 = offsetDateTimeField0.getDifference((-2769), 4L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0, int1);
      
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2769);
      intArray0[1] = 1;
      intArray0[2] = 1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int2 = 604;
      intArray0[3] = 1;
      intArray0[4] = (-2769);
      intArray0[5] = 1;
      intArray0[6] = (-2769);
      intArray0[7] = (-2769);
      Integer integer0 = new Integer(1);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      long long1 = offsetDateTimeField0.roundFloor(86399999L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:02.769", dateTimeZone0.toString());
      assertEquals("-00:00:02.769", dateTimeZone0.getID());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-2757), offsetDateTimeField0.getMaximumValue());
      assertEquals((-2769), offsetDateTimeField0.getOffset());
      assertEquals((-2768), offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2769L, long1);
      
      int int3 = (-2012);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapPartial(localTime0, 1, intArray0, (-2012));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2011 for dayOfMonth must be in the range [-2768,-2757]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 2334);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2334, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("minuteOfDay", offsetDateTimeField0.getName());
      assertEquals(2334, offsetDateTimeField0.getOffset());
      assertEquals(3773, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      int int0 = offsetDateTimeField0.getLeapAmount(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2334, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("minuteOfDay", offsetDateTimeField0.getName());
      assertEquals(2334, offsetDateTimeField0.getOffset());
      assertEquals(3773, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, int0);
      
      long long0 = offsetDateTimeField0.add(0L, 0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2334, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("minuteOfDay", offsetDateTimeField0.getName());
      assertEquals(2334, offsetDateTimeField0.getOffset());
      assertEquals(3773, offsetDateTimeField0.getMaximumValue());
      assertEquals(0L, long0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Maximum value exceeded for add");
      assertFalse(boolean0);
      
      long long1 = offsetDateTimeField0.roundHalfEven((-1647L));
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(long1 == long0);
      assertEquals(2334, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("minuteOfDay", offsetDateTimeField0.getName());
      assertEquals(2334, offsetDateTimeField0.getOffset());
      assertEquals(3773, offsetDateTimeField0.getMaximumValue());
      assertEquals(0L, long1);
      
      long long2 = offsetDateTimeField0.roundCeiling((-1647L));
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(2334, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("minuteOfDay", offsetDateTimeField0.getName());
      assertEquals(2334, offsetDateTimeField0.getOffset());
      assertEquals(3773, offsetDateTimeField0.getMaximumValue());
      assertEquals(0L, long2);
      
      int int1 = offsetDateTimeField0.get(1896L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(2334, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("minuteOfDay", offsetDateTimeField0.getName());
      assertEquals(2334, offsetDateTimeField0.getOffset());
      assertEquals(3773, offsetDateTimeField0.getMaximumValue());
      assertEquals(2334, int1);
      
      DurationField durationField0 = offsetDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2334, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("minuteOfDay", offsetDateTimeField0.getName());
      assertEquals(2334, offsetDateTimeField0.getOffset());
      assertEquals(3773, offsetDateTimeField0.getMaximumValue());
      assertNull(durationField0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set(0L, "org.joda.time.field.BaseDateTimeField", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.field.BaseDateTimeField\" for minuteOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 289;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(289);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.289", dateTimeZone0.getID());
      assertEquals("+00:00:00.289", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.289", dateTimeZone0.getID());
      assertEquals("+00:00:00.289", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      byte[] byteArray0 = new byte[0];
      MonthDay monthDay0 = new MonthDay((long) 289, (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.289", dateTimeZone0.getID());
      assertEquals("+00:00:00.289", dateTimeZone0.toString());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      long long0 = buddhistChronology0.set(monthDay0, 289);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.289", dateTimeZone0.getID());
      assertEquals("+00:00:00.289", dateTimeZone0.toString());
      assertEquals(1, monthDay0.getDayOfMonth());
      assertEquals(1, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(289L, long0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.289", dateTimeZone0.getID());
      assertEquals("+00:00:00.289", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int1 = (-2012);
      OffsetDateTimeField offsetDateTimeField0 = null;
      try {
        offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (DateTimeFieldType) null, (-2012));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      YearMonth yearMonth0 = new YearMonth((-2207), 1, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals((-2207), yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      MonthDay monthDay0 = new MonthDay((-18L));
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertNotNull(monthDay0);
      
      YearMonth yearMonth1 = yearMonth0.minusMonths(2883);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals((-2207), yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(1, yearMonth0.getMonthOfYear());
      assertEquals(10, yearMonth1.getMonthOfYear());
      assertEquals((-2448), yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertNotNull(yearMonth1);
      
      MonthDay monthDay1 = monthDay0.plusDays(2883);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(12, monthDay0.getMonthOfYear());
      assertEquals(11, monthDay1.getMonthOfYear());
      assertEquals(16, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertNotNull(monthDay1);
      
      // Undeclared exception!
      try { 
        yearMonth0.isEqual(monthDay1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-2207), 1, buddhistChronology0);
      MonthDay monthDay0 = new MonthDay((-18L));
      MonthDay monthDay1 = monthDay0.plusDays(2883);
      // Undeclared exception!
      try { 
        yearMonth0.isEqual(monthDay1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2769));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2769));
      Locale locale0 = Locale.CANADA;
      offsetDateTimeField0.toString();
      dateTimeZone0.convertUTCToLocal((-2769));
      offsetDateTimeField0.getMaximumShortTextLength(locale0);
      offsetDateTimeField0.getDifference((-2769), 4L);
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2769);
      intArray0[1] = 1;
      intArray0[2] = 11;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      intArray0[3] = 604;
      intArray0[4] = (-2769);
      intArray0[5] = 1;
      intArray0[6] = (-2769);
      intArray0[7] = (-2769);
      Integer integer0 = new Integer(11);
      long long0 = 86399999L;
      offsetDateTimeField0.roundFloor(86399999L);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapPartial(localTime0, 604, intArray0, (-2012));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 604
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.addWrapField((long) 1, 1);
      offsetDateTimeField0.remainder(32054400001L);
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      int int0 = offsetDateTimeField0.getMaximumTextLength(locale0);
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 12;
      intArray0[2] = (-708);
      intArray0[3] = 31;
      intArray0[4] = 31;
      offsetDateTimeField0.getMaximumValue();
      int int1 = offsetDateTimeField0.getMaximumValue(1042L);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      dateTimeFieldType0.getDurationType();
      offsetDateTimeField0.addWrapField((long) 1, 1);
      int int0 = 2514;
      OffsetDateTimeField offsetDateTimeField1 = new OffsetDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 12, 2514, 12);
      offsetDateTimeField1.roundHalfFloor(2514);
      int int1 = 4;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 4);
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = 854L;
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      offsetDateTimeField1.getMaximumTextLength(locale0);
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(4, 2514, 12, 2, 12, 2514);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2514 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology.getInstance(dateTimeZone0);
      buddhistChronology0.getDateTimeMillis(3, 3, 3, 3, 3, 3, 3);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.addWrapField((long) 1, 1);
      Locale locale0 = new Locale("org/joda/time/tz/data", "org/joda/time/tz/data");
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.getAsText((ReadablePartial) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.getDurationField();
      buddhistChronology0.withZone((DateTimeZone) null);
      offsetDateTimeField0.isLeap(1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1674;
      intArray0[5] = 1;
      intArray0[6] = 1;
      offsetDateTimeField0.addWrapPartial(localDateTime0, 1, intArray0, 12);
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, (-3023));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      offsetDateTimeField0.getDurationField();
      offsetDateTimeField0.isLeap(1);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[5] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1674;
      intArray0[5] = 1;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapPartial(localDateTime0, 1, intArray0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      offsetDateTimeField0.getDurationField();
      buddhistChronology0.withZone((DateTimeZone) null);
      offsetDateTimeField0.isLeap(1);
      offsetDateTimeField0.isLenient();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1674;
      Hours hours0 = Hours.SIX;
      Days days0 = hours0.toStandardDays();
      buddhistChronology0.get((ReadablePeriod) days0, 932L);
      intArray0[5] = 1;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapPartial(localDateTime0, 1, intArray0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      offsetDateTimeField0.getDurationField();
      buddhistChronology0.withZone((DateTimeZone) null);
      offsetDateTimeField0.isLeap(1);
      offsetDateTimeField0.isLenient();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1674;
      Hours hours0 = Hours.SIX;
      Days days0 = hours0.toStandardDays();
      buddhistChronology0.get((ReadablePeriod) days0, 932L);
      intArray0[5] = 1;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapPartial(localDateTime0, 1, intArray0, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfEven(1);
      zeroIsMaxDateTimeField0.getMaximumValue();
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set(1L, "org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org/joda/time/tz/data\" for weekOfWeekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfEven(1);
      dateTimeZone0.getOffsetFromLocal(1);
      zeroIsMaxDateTimeField0.getAsShortText((-3610L));
      zeroIsMaxDateTimeField0.roundHalfFloor((-2138L));
      int int0 = (-4401);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-4401));
      offsetDateTimeField0.isLeap(1);
      DurationField durationField0 = buddhistChronology0.days();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType1, (-4401));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.RemainderDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1015, 1015);
      Locale locale0 = Locale.CHINESE;
      offsetDateTimeField0.getMinimumValue();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType1);
      long long0 = zeroIsMaxDateTimeField0.roundHalfFloor(1015);
      Locale locale1 = Locale.US;
      int int0 = zeroIsMaxDateTimeField0.getMaximumShortTextLength(locale1);
      assertEquals(1, int0);
      
      long long1 = offsetDateTimeField0.roundHalfCeiling(1145L);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      long long0 = offsetDateTimeField0.roundHalfCeiling((-3L));
      assertEquals((-3L), long0);
      
      DateTimeFieldType.dayOfYear();
      YearMonth yearMonth0 = new YearMonth(1, 1, buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(1);
      assertEquals(12, yearMonth1.getMonthOfYear());
      
      Locale locale0 = Locale.FRANCE;
      int int0 = offsetDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Months months0 = Months.months(1);
      buddhistChronology0.get((ReadablePeriod) months0, (long) 10, (long) 10);
      buddhistChronology0.withZone(dateTimeZone0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 10);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      localDateTime0.withWeekOfWeekyear(1);
      BuddhistChronology.getInstance();
      offsetDateTimeField0.get((-610L));
      localDateTime0.weekOfWeekyear();
      long long0 = offsetDateTimeField0.roundHalfEven(69);
      assertEquals(0L, long0);
      
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayVariant();
      String string0 = offsetDateTimeField0.getAsText((ReadablePartial) localDateTime0, 0, locale0);
      assertEquals("0", string0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 10);
      DurationField durationField0 = dividedDateTimeField0.getRangeDurationField();
      String string1 = dividedDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, locale0);
      assertEquals("20", string1);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-374);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      int[] intArray1 = remainderDateTimeField0.addWrapField((ReadablePartial) localDateTime0, 1, intArray0, 84);
      assertArrayEquals(new int[] {1, 5, 1, 1, 1, 1, 1}, intArray1);
      
      remainderDateTimeField0.getMinimumValue();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      offsetDateTimeField0.roundCeiling(1451L);
      long long1 = offsetDateTimeField0.add((long) 10, 1000L);
      assertEquals(1000010L, long1);
  }
}
