/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 01:11:20 GMT 2019
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Period;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.FieldUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldUtils_ESTest extends FieldUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue((-2147483646), 2, 34);
      assertEquals(37, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldUtils.verifyValueBounds("", (-2291), (-2291), (-2291));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldUtils.verifyValueBounds((DateTimeField) null, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = FieldUtils.safeToInt(2147483647L);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = FieldUtils.safeToInt((-2147483648L));
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      long long0 = FieldUtils.safeDivide((-9223372036854775808L), (-2409L), roundingMode0);
      assertEquals(3828714004505926L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = FieldUtils.safeDivide((-9223372036854775782L), (-416L));
      assertEquals(22171567396285518L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeMultiply(31622400000L, (-851558400000L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 31622400000 * -851558400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeMultiply(21260793600000L, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 21260793600000 * -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply(Integer.MAX_VALUE, 1);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeAdd(9223372036854775807L, 2382L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 9223372036854775807 + 2382
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeAdd((-3210), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -3210 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = FieldUtils.safeToInt(0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract(407L, 1902L);
      assertEquals((-1495L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = FieldUtils.safeNegate(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = FieldUtils.safeNegate((-3001));
      assertEquals(3001, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt((-4415), 0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt((-892), 1L);
      assertEquals((-892), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 236545474, (-2L));
      assertEquals((-473090948L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply((-1337), (-1337));
      assertEquals(1787569, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply((-108), 869);
      assertEquals((-93852), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      long long0 = FieldUtils.safeDivide((long) 0, 407L, roundingMode0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = FieldUtils.safeDivide((-147L), (-147L));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = FieldUtils.safeDivide((-1567L), 1367L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = FieldUtils.safeAdd(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = FieldUtils.safeAdd(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(0, 0, (-472), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(0, 0, 951);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeDivide((long) 0, 407L, (RoundingMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        FieldUtils.safeDivide(21260793600000L, (-2619L), roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue((-2146815897), (-1619), (-1618));
      assertEquals((-1619), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue((-3001), (-258), 1804);
      assertEquals(1125, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getWrappedValue(955, 955, (-3839));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      FieldUtils.verifyValueBounds(dateTimeField0, (-209), (-209), 645);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      // Undeclared exception!
      try { 
        FieldUtils.verifyValueBounds(dateTimeField0, 1, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1 for weekOfWeekyear must be in the range [0,0]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeToInt((-12219292800000L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -12219292800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeToInt(15778476000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15778476000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((-1095L), (-1095L));
      assertEquals(1199025L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract(3525L, 472);
      assertEquals(3053L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = FieldUtils.safeAdd((long) 951, (long) 951);
      assertEquals(1902L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = FieldUtils.safeAdd(0L, (long) (-2165));
      assertEquals((-2165L), long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      boolean boolean0 = FieldUtils.equals((Object) roundingMode0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = FieldUtils.equals((Object) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = FieldUtils.equals(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = FieldUtils.equals(object0, (Object) " - ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(0, (-795), (-1), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(0, (-2110), 0, 610);
      assertEquals(334, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.getWrappedValue((-1559), (-1559), 1403, 1403);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.verifyValueBounds("c-1>g-+", 3015, 2275, (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3015 for c-1>g-+ must be in the range [2275,-3]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FieldUtils.verifyValueBounds("FC}`m", 0, (-3826), 3009);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.verifyValueBounds("Multiplication overflows an int: ", 0, 1900, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for Multiplication overflows an int:  must be in the range [1900,0]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.verifyValueBounds((DateTimeFieldType) null, 6, 6, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      FieldUtils.verifyValueBounds(dateTimeFieldType0, 0, (-1), 0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      // Undeclared exception!
      try { 
        FieldUtils.verifyValueBounds(dateTimeFieldType0, (-1078), 0, 413);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1078 for weekyearOfCentury must be in the range [0,413]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      // Undeclared exception!
      try { 
        FieldUtils.verifyValueBounds((DateTimeField) delegatedDateTimeField0, 0, 574, (-426));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for secondOfMinute must be in the range [574,-426]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.verifyValueBounds((DateTimeField) null, 3, 182, Integer.MIN_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeMultiplyToInt(2484L, 5675799279021L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 14098685409088164
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        FieldUtils.safeDivide((-9223372036854775808L), (long) integer0, roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 / -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      long long0 = FieldUtils.safeDivide((-9223372036854775808L), 15778476000L, roundingMode0);
      assertEquals((-584554049L), long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeDivide((-9223372036854775782L), (-1L));
       //  fail("Expecting exception: ArithmeticException");
       // Unstable assertion
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775782 / -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeDivide((-9223372036854775782L), 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long long0 = FieldUtils.safeDivide((-147L), 4881L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeMultiply((-9223372036854775807L), (-1L));
       //  fail("Expecting exception: ArithmeticException");
       // Unstable assertion
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775807 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeMultiply((-9223372036854775782L), (-1167536L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775782 * -1167536
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 688, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 0, 1548L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(1L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(0L, 1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeMultiply((-9223372036854775796L), 424);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775796 * 424
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) (-1), (-1));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 1, (-5606));
      assertEquals((-5606L), long0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 0, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 1, 1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeMultiply((-9223372036854775808L), (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeMultiply((-2145924109), (-818));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2145924109 * -818
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeMultiply(5248681, (-2291));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 5248681 * -2291
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeSubtract((-9223372036854775808L), 1L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775808 - 1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract((-80L), (-80L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeAdd((-9223372036854775787L), (-9223372036854775787L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775787 + -9223372036854775787
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = Period.weeks((-1));
      int[] intArray0 = islamicChronology0.get((ReadablePeriod) period0, (-586L));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-586)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = FieldUtils.safeAdd((-54), 869);
      assertEquals(815, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = FieldUtils.safeAdd((-3001), (-258));
      assertEquals((-3259), int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      // Undeclared exception!
      try { 
        FieldUtils.safeNegate(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = FieldUtils.safeNegate(20);
      assertEquals((-20), int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt((-2336L), (-4485L));
      assertEquals(10476960, int0);
  }
}
