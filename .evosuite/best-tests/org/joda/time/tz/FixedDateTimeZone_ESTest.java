/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 02:36:11 GMT 2019
 */

package org.joda.time.tz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.temporal.ChronoField;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FixedDateTimeZone_ESTest extends FixedDateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("\nz#rLnsHEaHq", "\nz#rLnsHEaHq", 763, 763);
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("\nz#rLnsHEaHq", "!}{.", (-2040109463), 763);
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertFalse(boolean0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("&`R;?", "&`R;?", 31, 31);
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("&`R;?", "org/joda/time/tz/data", 0, 0);
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", "", 419, 2305);
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals(419, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("org.joda.time.IllegalInstantException", "org.joda.time.IllegalInstantException", 0, 0);
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals(0, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("org.joda.time.Days", "y#s6}uLvx*", 0, 0);
      long long0 = fixedDateTimeZone0.previousTransition(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")qc:h@F$1", "", (-2340), (-2340));
      long long0 = fixedDateTimeZone0.previousTransition(662L);
      assertEquals(662L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("YearDay", "YearDay", 0, 0);
      long long0 = fixedDateTimeZone0.nextTransition(1899L);
      assertEquals(1899L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")qc:h@F$1", "", (-2340), (-2340));
      long long0 = fixedDateTimeZone0.nextTransition((-2340));
      assertEquals((-2340L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")qc:h@F$1", "-00:00:02.340", (-2340), 0);
      int int0 = fixedDateTimeZone0.getStandardOffset(662L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", "", 419, 2305);
      int int0 = fixedDateTimeZone0.getStandardOffset(419);
      assertEquals(2305, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("U$)L{_=,p)", "org.joda.time.base.BaseLocal", 0, 102);
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", "", 31, 31);
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(1334L);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("J-3@tM.<sAD", "J-3@tM.<sAD", 0, 149);
      int int0 = fixedDateTimeZone0.getOffset((long) 149);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")qc:h@F$1", "", (-2340), (-2340));
      int int0 = fixedDateTimeZone0.getOffset(662L);
      assertEquals((-2340), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("P", (String) null, 698, (-40));
      String string0 = fixedDateTimeZone0.getNameKey((-40));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("P}Pus'7", "P}Pus'7", (-392), 0);
      String string0 = fixedDateTimeZone0.getNameKey(0);
      assertEquals("P}Pus'7", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      ChronoField chronoField0 = ChronoField.INSTANT_SECONDS;
      // Undeclared exception!
      try { 
        dateTimeZone0.equals(chronoField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = null;
      try {
        fixedDateTimeZone0 = new FixedDateTimeZone((String) null, "", (-2232), 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Id must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", "", 31, 31);
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("", "Seconds", 31, 31);
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("", "", 31, 31);
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")qc:h@F$1", "", (-2340), (-2340));
      int int0 = fixedDateTimeZone0.getStandardOffset(662L);
      assertEquals((-2340), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")qc:h@F$1", "", (-2340), (-2340));
      fixedDateTimeZone0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")qc:h@F$1", "", (-2340), (-2340));
      String string0 = fixedDateTimeZone0.getNameKey((-675L));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("WC[]&N", "WC[]&N", 10080, 10080);
      int int0 = fixedDateTimeZone0.getOffset(21600000L);
      assertEquals(10080, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone("{qz#rLnsHEaHq", "{qz#rLnsHEaHq", 763, 763);
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone("{qz#rLnsHEaHq", "org/joda/time/tz/data", 2201, 763);
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertFalse(boolean0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")qcPh@F$1", " inst< #7", (-2330), (-2330));
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone(")qcPh@F$1", "org/joda/time/tz/data", (-2330), (-4));
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")qcPh@F$1", " inst< #7", (-2330), (-2330));
      boolean boolean0 = fixedDateTimeZone0.equals("org/joda/time/tz/data");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")qcPh@F$1", " inst< #7", (-2330), (-2330));
      FixedDateTimeZone fixedDateTimeZone1 = new FixedDateTimeZone(" inst< #7", ")qcPh@F$1", (-2330), (-2330));
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")q:h$1", ")q:h$1", 1963, 1963);
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=)q:h$1,offset=1963,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("GMT+07:07", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")qcPh@F$1", " inst< #7", (-2330), (-2330));
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertEquals((-2330), timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")qcPh@F$1", " inst< #7", (-2330), (-2330));
      long long0 = fixedDateTimeZone0.previousTransition((-2330));
      assertEquals((-2330L), long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")qcPh@F$1", " inst< #7", (-2330), (-2330));
      boolean boolean0 = fixedDateTimeZone0.isFixed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(")qcPh@F$1", " inst< #7", (-2330), (-2330));
      int int0 = fixedDateTimeZone0.getOffsetFromLocal((-2330));
      assertEquals((-2330), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = new FixedDateTimeZone(";9g^z", ";9g^z", 0, 0);
      long long0 = fixedDateTimeZone0.nextTransition(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-14), (-14));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("GMT-14:14", timeZone0.getID());
  }
}
