/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 02:25:02 GMT 2019
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractReadableInstantFieldProperty_ESTest extends AbstractReadableInstantFieldProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-696L));
      TimeZone timeZone0 = TimeZone.getTimeZone("?Nq[[");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = instant0.toDateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.plusSeconds((-1627));
      MutableDateTime mutableDateTime0 = dateTime1.toMutableDateTime(dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      DateTime.Property dateTime_Property0 = dateTime1.minuteOfHour();
      boolean boolean0 = mutableDateTime_Property0.equals(dateTime_Property0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      Interval interval0 = mutableDateTime_Property0.toInterval();
      assertEquals(86400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-983L));
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      Interval interval0 = mutableDateTime_Property0.toInterval();
      assertEquals(0L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-698L));
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      Interval interval0 = localTime_Property0.toInterval();
      assertEquals(86400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = instant0.toDateTime(dateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime0.dayOfMonth();
      Interval interval0 = dateTime_Property0.toInterval();
      assertEquals((-12219206400000L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 1, 1, 573);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      long long0 = localTime_Property0.remainder();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-705L));
      TimeZone timeZone0 = TimeZone.getTimeZone("?Nq[[");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = instant0.toDateTime(dateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime0.weekyear();
      boolean boolean0 = dateTime_Property0.isLeap();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTime dateTime0 = new DateTime((-900L), (Chronology) gregorianChronology0);
      LocalDate localDate0 = new LocalDate(dateTime0);
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      DurationField durationField0 = localDate_Property0.getRangeDurationField();
      assertNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-983L));
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      int int0 = mutableDateTime_Property0.getMinimumValueOverall();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-3580L));
      DateTime.Property dateTime_Property0 = dateTime0.weekyear();
      int int0 = dateTime_Property0.getMinimumValueOverall();
      assertEquals((-292275054), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      int int0 = localTime_Property0.getMinimumValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTime dateTime0 = new DateTime((-900L), (Chronology) gregorianChronology0);
      LocalDate localDate0 = new LocalDate(dateTime0);
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      int int0 = localDate_Property0.getMinimumValue();
      assertEquals((-292275054), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.year();
      DurationField durationField0 = localDate_Property0.getLeapDurationField();
      assertTrue(durationField0.isPrecise());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-3580L));
      DateTime.Property dateTime_Property0 = dateTime0.weekyear();
      int int0 = dateTime_Property0.getLeapAmount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gregorianChronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfMonth();
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)localDateTime_Property0.getField();
      assertEquals(86400000L, preciseDateTimeField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      DateTime.Property dateTime_Property0 = dateTime0.weekyear();
      DateTime dateTime1 = dateTime_Property0.withMinimumValue();
      long long0 = dateTime_Property0.getDifferenceAsLong(dateTime1);
      assertEquals(292277024L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-2138L), (Chronology) buddhistChronology0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 4978125, (Chronology) buddhistChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.add((long) 1);
      DateTime dateTime0 = mutableDateTime1.toDateTime();
      long long0 = localTime_Property0.getDifferenceAsLong(dateTime0);
      assertEquals((-8723L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
      int int0 = mutableDateTime_Property0.getDifference(mutableDateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfCentury();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((long) 20, (Chronology) islamicChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      int int0 = localDateTime_Property0.getDifference(dateTime0);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime1 = localTime_Property0.withMinimumValue();
      LocalTime.Property localTime_Property1 = localTime1.secondOfMinute();
      int int0 = localTime_Property1.get();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1, 1, 1, 1, 1, 1, 1);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      mutableDateTime0.setDate((-1556), 3, 2);
      int int0 = mutableDateTime_Property0.get();
      assertEquals((-1556), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0);
      LocalDate.Property localDate_Property0 = localDate0.era();
      // Undeclared exception!
      try { 
        localDate_Property0.remainder();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      DateTime.Property dateTime_Property0 = dateTime0.era();
      // Undeclared exception!
      try { 
        dateTime_Property0.getDifferenceAsLong(dateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate0.era();
      // Undeclared exception!
      try { 
        localDate_Property0.getDifference(dateTime0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((-119L), (Chronology) iSOChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withYear((-669));
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.secondOfMinute();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        localDateTime_Property0.getDifference(mutableDateTime0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -84639673281
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTime.Property dateTime_Property0 = dateTime0.property(dateTimeFieldType0);
      int int0 = dateTime_Property0.getMinimumValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = mutableDateTime_Property0.getFieldType();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Instant instant0 = new Instant(3439L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = instant0.toDateTime((Chronology) julianChronology0);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime((Chronology) julianChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = mutableDateTime_Property0.getAsText(locale0);
      assertEquals("1969", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(20);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      Locale locale0 = Locale.forLanguageTag("The unit milliseconds must be at least 1");
      String string0 = mutableDateTime_Property0.getAsShortText(locale0);
      assertEquals("70", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfYear();
      int int0 = localDateTime_Property0.get();
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(1);
      TimeZone timeZone0 = TimeZone.getTimeZone("?Nq[[");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = instant0.toDateTime(dateTimeZone0);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime(dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfHour();
      boolean boolean0 = mutableDateTime_Property0.equals(dateTime_Property0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(6, 6);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      boolean boolean0 = localTime_Property0.equals(localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime.Property dateTime_Property0 = dateTime0.millisOfDay();
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      boolean boolean0 = mutableDateTime_Property0.equals(dateTime_Property0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTime dateTime0 = new DateTime((-900L), (Chronology) gregorianChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.millisOfDay();
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      boolean boolean0 = mutableDateTime_Property0.equals(dateTime_Property0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((-119L), (Chronology) iSOChronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      LocalTime localTime0 = LocalTime.now((Chronology) iSOChronology0);
      int int0 = localDateTime_Property0.compareTo((ReadablePartial) localTime0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      LocalTime localTime1 = localTime0.minusMinutes(1);
      LocalTime.Property localTime_Property0 = localTime1.minuteOfHour();
      int int0 = localTime_Property0.compareTo((ReadablePartial) localTime0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Instant instant0 = new Instant(3439L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = instant0.toDateTime((Chronology) julianChronology0);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime((Chronology) julianChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      // Undeclared exception!
      try { 
        mutableDateTime_Property0.compareTo((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.field.AbstractReadableInstantFieldProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTime dateTime0 = new DateTime((-900L), (Chronology) gregorianChronology0);
      DateTime dateTime1 = dateTime0.minusHours((-1078));
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      int int0 = dateTime_Property0.compareTo((ReadableInstant) dateTime1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTime dateTime0 = new DateTime((-900L), (Chronology) gregorianChronology0);
      DateTime dateTime1 = dateTime0.minusHours((-1078));
      DateTime.Property dateTime_Property0 = dateTime1.millisOfDay();
      int int0 = dateTime_Property0.compareTo((ReadableInstant) dateTime0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalDate localDate0 = LocalDate.parse("7");
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      // Undeclared exception!
      try { 
        localDate_Property0.compareTo((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant must not be null
         //
         verifyException("org.joda.time.field.AbstractReadableInstantFieldProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime.Property dateTime_Property0 = dateTime0.hourOfDay();
      int int0 = dateTime_Property0.compareTo((ReadableInstant) dateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfDay();
      long long0 = dateTime_Property0.getDifferenceAsLong((ReadableInstant) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((-1L), (Chronology) gregorianChronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      int int0 = localDateTime_Property0.getDifference((ReadableInstant) null);
      assertEquals((-1392409281), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(6, 6);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      int int0 = localTime_Property0.getMaximumValue();
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      DurationField durationField0 = localDateTime_Property0.getRangeDurationField();
      assertTrue(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime.Property dateTime_Property0 = dateTime0.hourOfDay();
      long long0 = dateTime_Property0.remainder();
      assertEquals(1281320L, long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Instant instant0 = new Instant(3439L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = instant0.toDateTime((Chronology) julianChronology0);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime((Chronology) julianChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      mutableDateTime_Property0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime.Property dateTime_Property0 = dateTime0.hourOfDay();
      DurationField durationField0 = dateTime_Property0.getLeapDurationField();
      assertNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-4110));
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate0.era();
      // Undeclared exception!
      try { 
        localDate_Property0.toInterval();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      DateTime.Property dateTime_Property0 = dateTime0.weekOfWeekyear();
      String string0 = dateTime_Property0.toString();
      assertEquals("Property[weekOfWeekyear]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-715L));
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      int int0 = localTime_Property0.getMaximumValueOverall();
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTime dateTime0 = new DateTime((-900L), (Chronology) gregorianChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      String string0 = dateTime_Property0.getAsString();
      assertEquals("12", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((-119L), (Chronology) iSOChronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      String string0 = localDateTime_Property0.getAsShortText();
      assertEquals("59", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime.Property dateTime_Property0 = dateTime0.hourOfDay();
      Locale locale0 = Locale.JAPAN;
      int int0 = dateTime_Property0.getMaximumShortTextLength(locale0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      DateTime.Property dateTime_Property0 = dateTime0.weekOfWeekyear();
      String string0 = dateTime_Property0.getAsText();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime.Property dateTime_Property0 = dateTime0.millisOfDay();
      int int0 = dateTime_Property0.getMinimumValueOverall();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      DateTime.Property dateTime_Property0 = dateTime0.weekOfWeekyear();
      DurationField durationField0 = dateTime_Property0.getDurationField();
      assertTrue(durationField0.isPrecise());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      Locale locale0 = Locale.GERMAN;
      int int0 = localTime_Property0.getMaximumTextLength(locale0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) null);
      DateTime.Property dateTime_Property0 = dateTime0.weekOfWeekyear();
      int int0 = dateTime_Property0.getLeapAmount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((-1L), (Chronology) gregorianChronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      String string0 = localDateTime_Property0.getName();
      assertEquals("secondOfMinute", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      int int0 = localTime_Property0.compareTo((ReadablePartial) localTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      boolean boolean0 = localTime_Property0.isLeap();
      assertFalse(boolean0);
  }
}
