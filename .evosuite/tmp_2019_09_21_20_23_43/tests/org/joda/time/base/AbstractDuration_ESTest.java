/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 02:15:21 GMT 2019
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractDuration_ESTest extends AbstractDuration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-2894));
      Duration duration0 = minutes0.toStandardDuration();
      String string0 = duration0.toString();
      assertEquals("PT-173640S", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Duration duration1 = duration0.withDurationAdded(1L, 1693);
      String string0 = duration1.toString();
      assertEquals("PT1.693S", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Days days0 = Days.ZERO;
      Duration duration0 = days0.toStandardDuration();
      Duration duration1 = duration0.withMillis((-3056L));
      duration1.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-3113L));
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      Duration duration1 = duration0.dividedBy((-3113L), roundingMode0);
      boolean boolean0 = duration1.equals(duration0);
      assertFalse(boolean0);
      assertFalse(duration0.equals((Object)duration1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      boolean boolean0 = duration0.isShorterThan((ReadableDuration) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(1310L);
      Duration duration1 = Duration.millis(1310L);
      boolean boolean0 = duration1.isLongerThan(duration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      String string0 = duration0.toString();
      assertEquals("PT0S", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0);
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      Duration duration0 = mutablePeriod0.toDurationFrom(dateTime0);
      Duration duration1 = duration0.toDuration();
      assertSame(duration0, duration1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Days days0 = Days.SIX;
      Duration duration0 = days0.toStandardDuration();
      Duration duration1 = duration0.toDuration();
      assertEquals(518400000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-3113L));
      Duration duration1 = duration0.toDuration();
      assertSame(duration0, duration1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.withMillis(797L);
      boolean boolean0 = duration0.isShorterThan(duration1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      boolean boolean0 = duration0.isLongerThan(duration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Duration duration1 = new Duration(0L, 86400L);
      boolean boolean0 = duration0.isEqual(duration1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.standardHours(2419203843L);
      // Undeclared exception!
      try { 
        duration0.toPeriod();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2419203843
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Days days0 = Days.ZERO;
      Duration duration0 = days0.toStandardDuration();
      // Undeclared exception!
      try { 
        duration0.compareTo((ReadableDuration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractDuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Duration duration1 = new Duration(0L, 86400L);
      int int0 = duration1.compareTo((ReadableDuration) duration0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = new Duration(1429L);
      int int0 = duration0.compareTo((ReadableDuration) duration1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      int int0 = duration0.compareTo((ReadableDuration) duration0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Period period0 = new Period((-1902L));
      Duration duration0 = period0.toStandardDuration();
      String string0 = duration0.toString();
      assertEquals("PT-1.902S", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = new Duration((-3092L));
      Duration duration1 = duration0.multipliedBy((-3092L));
      boolean boolean0 = duration0.equals(duration1);
      assertFalse(boolean0);
      assertFalse(duration1.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Duration duration1 = duration0.multipliedBy(0L);
      boolean boolean0 = duration0.equals(duration1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      boolean boolean0 = duration0.equals(duration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Object object0 = new Object();
      boolean boolean0 = duration0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = new Duration(874L);
      boolean boolean0 = duration0.isLongerThan((ReadableDuration) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = new Duration(874L);
      boolean boolean0 = duration0.isEqual((ReadableDuration) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      boolean boolean0 = duration0.isEqual(duration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.millis(115L);
      boolean boolean0 = duration0.isShorterThan((ReadableDuration) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Period period0 = duration0.toPeriod();
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Duration duration0 = Duration.millis((-314L));
      String string0 = duration0.toString();
      assertEquals("PT-0.314S", string0);
  }
}
