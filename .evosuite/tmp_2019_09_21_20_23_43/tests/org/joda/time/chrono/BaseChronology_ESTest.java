/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 02:07:25 GMT 2019
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.Foo;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJDayOfWeekDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.RemainderDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseChronology_ESTest extends BaseChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      long long0 = buddhistChronology0.add((-3438L), (-3438L), (-2267));
      assertEquals(7790508L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3349));
      LocalDateTime localDateTime0 = new LocalDateTime(2431L, dateTimeZone0);
      Date date0 = localDateTime0.toDate();
      MonthDay monthDay0 = MonthDay.fromDateFields(date0);
      assertEquals(12, monthDay0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
      DurationField durationField0 = copticChronology0.years();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = julianChronology0.yearOfEra();
      assertEquals(1, dateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-99));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(358, 0);
      IslamicChronology islamicChronology0 = new IslamicChronology(gJChronology0, gJChronology0, islamicChronology_LeapYearPatternType0);
      DateTimeField dateTimeField0 = islamicChronology0.year();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      Chronology chronology0 = julianChronology0.withZone(dateTimeZone0);
      assertSame(chronology0, julianChronology0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DurationField durationField0 = gJChronology0.weekyears();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(30, 30);
      IslamicChronology islamicChronology0 = new IslamicChronology(iSOChronology0, iSOChronology0, islamicChronology_LeapYearPatternType0);
      RemainderDateTimeField remainderDateTimeField0 = (RemainderDateTimeField)islamicChronology0.weekyearOfCentury();
      assertEquals(100, remainderDateTimeField0.getDivisor());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      DateTimeField dateTimeField0 = strictChronology0.weekyear();
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DurationField durationField0 = iSOChronology0.weeks();
      assertTrue(durationField0.isPrecise());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = islamicChronology0.weekOfWeekyear();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      String string0 = copticChronology0.toString();
      assertEquals("CopticChronology[UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      YearMonth yearMonth0 = YearMonth.now();
      long long0 = islamicChronology0.set(yearMonth0, (-1210L));
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(19115395198790L, long0);
      assertEquals(2014, yearMonth0.getYear());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = new LocalTime(0, 0, 0, 0);
      long long0 = gJChronology0.set(localTime0, (-160L));
      assertEquals((-86400000L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DurationField durationField0 = ethiopicChronology0.seconds();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeField dateTimeField0 = julianChronology0.secondOfMinute();
      assertEquals(59, dateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = gJChronology0.secondOfDay();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DurationField durationField0 = julianChronology0.months();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      assertEquals("monthOfYear", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DurationField durationField0 = iSOChronology0.minutes();
      assertTrue(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeField dateTimeField0 = ethiopicChronology0.minuteOfHour();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = copticChronology0.millisOfSecond();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DurationField durationField0 = copticChronology0.millis();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.hours();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTimeField dateTimeField0 = islamicChronology0.hourOfHalfday();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = ethiopicChronology0.hourOfDay();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      DurationField durationField0 = gJChronology0.halfdays();
      assertEquals(43200000L, durationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      IslamicChronology islamicChronology0 = new IslamicChronology(buddhistChronology0, buddhistChronology0, (IslamicChronology.LeapYearPatternType) null);
      DateTimeField dateTimeField0 = islamicChronology0.halfdayOfDay();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      JulianChronology julianChronology0 = new JulianChronology(ethiopicChronology0, ethiopicChronology0, 1);
      long long0 = julianChronology0.getDateTimeMillis(1530L, 0, 0, 0, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      long long0 = strictChronology0.getDateTimeMillis((long) 0, 0, 0, 0, 518);
      assertEquals(518L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      long long0 = lenientChronology0.getDateTimeMillis(381, 21, 1939, (-170));
      assertEquals((-30668544000170L), long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      DurationField durationField0 = islamicChronology0.eras();
      assertTrue(durationField0.isPrecise());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = gJChronology0.era();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JulianChronology julianChronology0 = new JulianChronology((Chronology) null, (Object) null, 1);
      DurationField durationField0 = julianChronology0.days();
      assertTrue(durationField0.isPrecise());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      DateTimeField dateTimeField0 = islamicChronology0.dayOfYear();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = (GJDayOfWeekDateTimeField)gregorianChronology0.dayOfWeek();
      assertEquals(86400000L, gJDayOfWeekDateTimeField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = copticChronology0.dayOfMonth();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDate localDate0 = new LocalDate(0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      DateTime dateTime0 = localDate0.toDateTime(localTime0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      gJChronology0.clockhourOfDay();
      assertEquals(73281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeField dateTimeField0 = islamicChronology0.centuryOfEra();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DurationField durationField0 = julianChronology0.centuries();
      assertTrue(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.add((ReadablePeriod) null, 0L, (-2847));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      long long0 = gregorianChronology0.add((-2754L), (long) 1, 0);
      assertEquals((-2754L), long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      // Undeclared exception!
      try { 
        julianChronology0.validate((ReadablePartial) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        copticChronology0.validate(localDateTime0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3349));
      LocalDateTime localDateTime0 = new LocalDateTime(2431L, dateTimeZone0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        islamicChronology0.set(localDateTime0, (-3349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 31 for dayOfMonth must be in the range [1,29]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      // Undeclared exception!
      try { 
        buddhistChronology0.set((ReadablePartial) null, (-394L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(0L, (-2847), (-1735), (-2847), (-16));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2847 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      try { 
        gJChronology0.getDateTimeMillis(85, (-4229), (-4229), 86400, 85, (-4229), 85);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 86400 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      // Undeclared exception!
      try { 
        copticChronology0.get((ReadablePeriod) null, 0L, 21600000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(21L, 1107L);
      // Undeclared exception!
      try { 
        strictChronology0.get((ReadablePeriod) mutablePeriod0, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        islamicChronology0.get((ReadablePeriod) null, (-2294L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      Seconds seconds0 = Seconds.THREE;
      Weeks weeks0 = Weeks.standardWeeksIn(seconds0);
      // Undeclared exception!
      try { 
        islamicChronology0.get((ReadablePeriod) weeks0, 9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15250284452
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      // Undeclared exception!
      try { 
        ethiopicChronology0.get((ReadablePartial) null, (-1909L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = Period.years(1);
      // Undeclared exception!
      try { 
        copticChronology0.add((ReadablePeriod) period0, 2757L, (-3323));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Foo foo0 = Foo.MIN_VALUE;
      // Undeclared exception!
      try { 
        iSOChronology0.add((ReadablePeriod) foo0, (-1616L), 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = Period.years(1);
      Period period1 = period0.plusYears((-2146862268));
      // Undeclared exception!
      try { 
        copticChronology0.add((ReadablePeriod) period1, 2757L, (-2146862268));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 4609017595615241556
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      int[] intArray0 = gJChronology0.get((ReadablePartial) localDateTime0, 2145L);
      assertArrayEquals(new int[] {1970, 1, 1, 2145}, intArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      long long0 = buddhistChronology0.add((long) 1, (long) 1, 1);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      long long0 = strictChronology0.add((long) 0, (long) 21, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      long long0 = buddhistChronology0.add((long) 1, 0L, 30);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      long long0 = buddhistChronology0.add((ReadablePeriod) null, (long) 1, 30);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      CopticChronology copticChronology0 = new CopticChronology(buddhistChronology0, buddhistChronology0, 1);
      Period period0 = Period.seconds(1);
      long long0 = copticChronology0.add((ReadablePeriod) period0, 2L, 1);
      assertEquals(1002L, long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      Duration duration0 = Duration.millis(1L);
      Minutes minutes0 = duration0.toStandardMinutes();
      long long0 = strictChronology0.add((ReadablePeriod) minutes0, (-1597L), 0);
      assertEquals((-1597L), long0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      Period period0 = Period.weeks(0);
      int[] intArray0 = strictChronology0.get((ReadablePeriod) period0, (-626L));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-626)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      Period period0 = Period.weeks(0);
      int[] intArray0 = strictChronology0.get((ReadablePeriod) period0, (long) 0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      Object object0 = new Object();
      JulianChronology julianChronology0 = new JulianChronology(lenientChronology0, object0, 1);
      Period period0 = new Period(2231L, 1, julianChronology0);
      int[] intArray0 = lenientChronology0.get((ReadablePeriod) period0, 0L, 2231L);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 2, 231}, intArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = Period.weeks(0);
      int[] intArray0 = gregorianChronology0.get((ReadablePeriod) period0, (-626L), (-626L));
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      LocalTime localTime0 = new LocalTime(0, 0, 0);
      long long0 = strictChronology0.set(localTime0, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1164, 1164, 1164, 1164, 1164, 1164);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[7];
      intArray0[1] = 1164;
      // Undeclared exception!
      try { 
        iSOChronology0.validate(localDate0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1164 for monthOfYear must not be larger than 12
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      TimeZone timeZone0 = TimeZone.getTimeZone("0)");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        buddhistChronology0.validate(monthDay0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      LocalTime localTime0 = new LocalTime(21, 21, 0);
      int[] intArray0 = new int[6];
      strictChronology0.validate(localTime0, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      try { 
        lenientChronology0.getDateTimeMillis(0, 1, 0, 2844);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);
      long long0 = zonedChronology0.getDateTimeMillis(1, 1, 1, 1, 292271022, (-4015), (-1));
      assertEquals((-44357847895001L), long0);
  }
}
