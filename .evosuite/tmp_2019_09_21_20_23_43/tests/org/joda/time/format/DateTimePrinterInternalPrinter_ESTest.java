/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 02:43:32 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.DateTimePrinterInternalPrinter;
import org.joda.time.format.InternalPrinter;
import org.joda.time.format.InternalPrinterDateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimePrinterInternalPrinter_ESTest extends DateTimePrinterInternalPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn("Cannot parse \"").when(dateTimePrinter0).toString();
      DateTimePrinterInternalPrinter dateTimePrinterInternalPrinter0 = (DateTimePrinterInternalPrinter)DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      DateTimePrinter dateTimePrinter1 = dateTimePrinterInternalPrinter0.getUnderlying();
      assertEquals(729, dateTimePrinter1.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dateTimePrinter0).toString();
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      DateTimePrinter dateTimePrinter1 = InternalPrinterDateTimePrinter.of(internalPrinter0);
      InternalPrinter internalPrinter1 = DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      assertNotSame(internalPrinter1, internalPrinter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn("Us?x@5%Y?+BG:w|").when(dateTimePrinter0).toString();
      doReturn(1281).when(dateTimePrinter0).estimatePrintedLength();
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      DateTimePrinter dateTimePrinter1 = InternalPrinterDateTimePrinter.of(internalPrinter0);
      DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      InternalPrinter internalPrinter1 = DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      int int0 = internalPrinter1.estimatePrintedLength();
      assertEquals(0, int0);
      assertEquals((-467), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn("Us?x@5%Y?+BG:w|").when(dateTimePrinter0).toString();
      doReturn(1281).when(dateTimePrinter0).estimatePrintedLength();
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      DateTimePrinter dateTimePrinter1 = InternalPrinterDateTimePrinter.of(internalPrinter0);
      DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      InternalPrinter internalPrinter1 = DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        internalPrinter1.printTo((Appendable) null, (ReadablePartial) yearMonth0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimePrinterInternalPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn("N'{7iD{3R").when(dateTimePrinter0).toString();
      doReturn((-1354)).when(dateTimePrinter0).estimatePrintedLength();
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      DateTimePrinter dateTimePrinter1 = InternalPrinterDateTimePrinter.of(internalPrinter0);
      DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      InternalPrinter internalPrinter1 = DateTimePrinterInternalPrinter.of(dateTimePrinter1);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        internalPrinter1.printTo((Appendable) null, (-2691L), (Chronology) copticChronology0, (-1), dateTimeZone0, locale0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1238);
      Locale locale0 = Locale.CANADA_FRENCH;
      internalPrinter0.printTo((Appendable) charArrayWriter0, (ReadablePartial) null, locale0);
      assertEquals("", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Us?x@5%Y?+BG:w|");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      Locale locale0 = new Locale("org.joda.time.format.DateTimePrinterInternalPrinter", "org.joda.time.format.DateTimePrinterInternalPrinter", "UBvL~XO^d");
      internalPrinter0.printTo((Appendable) stringBuffer0, (ReadablePartial) yearMonth0, locale0);
      assertEquals(2, yearMonth0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn(1281).when(dateTimePrinter0).estimatePrintedLength();
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      Locale locale0 = new Locale("org.joda.time.format.DateTimePrinterInternalPrinter", "org.joda.time.format.DateTimePrinterInternalPrinter", "UBvL~XO^d");
      // Undeclared exception!
      try { 
        internalPrinter0.printTo((Appendable) null, (ReadablePartial) yearMonth0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimePrinterInternalPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1238);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      Locale locale0 = Locale.CANADA_FRENCH;
      internalPrinter0.printTo((Appendable) charArrayWriter0, (long) 1238, (Chronology) islamicChronology0, 1, dateTimeZone0, locale0);
      assertEquals("CAN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Us?x@5%Y?+BG:w|");
      Locale locale0 = new Locale("org.joda.time.format.DateTimePrinterInternalPrinter", "org.joda.time.format.DateTimePrinterInternalPrinter", "UBvL~XO^d");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      internalPrinter0.printTo((Appendable) stringBuffer0, (long) 0, (Chronology) islamicChronology0, (-2708), (DateTimeZone) null, locale0);
      assertEquals("UBvL~XO^d", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn((-1354)).when(dateTimePrinter0).estimatePrintedLength();
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        internalPrinter0.printTo((Appendable) null, (-2691L), (Chronology) copticChronology0, (-1), dateTimeZone0, locale0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of((DateTimePrinter) null);
      assertNull(internalPrinter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, 2391, 1);
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_Fraction0);
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      assertSame(internalPrinter0, dateTimePrinter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimePrinter0).estimatePrintedLength();
      InternalPrinter internalPrinter0 = DateTimePrinterInternalPrinter.of(dateTimePrinter0);
      int int0 = internalPrinter0.estimatePrintedLength();
      //  // Unstable assertion: assertEquals(1, int0);
  }
}
