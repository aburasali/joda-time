/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 02:23:54 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Writer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.joda.time.Days;
import org.joda.time.Hours;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.ReadablePeriod;
import org.joda.time.format.PeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormat_ESTest extends PeriodFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased(locale0);
      assertNotNull(periodFormatter0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertNotNull(periodFormat_DynamicWordBased0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Days days0 = Days.MAX_VALUE;
      assertNotNull(days0);
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
      
      periodFormat_DynamicWordBased0.printTo(stringBuffer0, (ReadablePeriod) days0, locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals("2147483647 days", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(1, days0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        PeriodFormat.wordBased((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.getDefault();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("");
      assertNotNull(mutablePeriod0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertNotNull(periodFormat_DynamicWordBased0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("");
      assertNotNull(mutablePeriod0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      
      int int0 = periodFormat_DynamicWordBased0.parseInto(mutablePeriod0, "", 0, locale0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertNotNull(periodFormat_DynamicWordBased0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("");
      assertNotNull(mutablePeriod0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      int int0 = periodFormat_DynamicWordBased0.parseInto(mutablePeriod0, "", (-1592), (Locale) null);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals((-1592), int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.getDefault();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertNotNull(periodFormat_DynamicWordBased0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      Months months0 = Months.ELEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("UK*q('");
      assertNotNull(mockPrintWriter0);
      
      periodFormat_DynamicWordBased0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) months0, locale0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("");
      int int0 = periodFormat_DynamicWordBased0.countFieldsToPrint(mutablePeriod0, (-1592), (Locale) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased(locale0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      Hours hours0 = Hours.ZERO;
      int int0 = periodFormat_DynamicWordBased0.calculatePrintedLength(hours0, locale0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PeriodFormat periodFormat0 = new PeriodFormat();
  }
}
