/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 01:01:34 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Foo;
import org.joda.time.Hours;
import org.joda.time.Minutes;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.EthiopicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodType_ESTest extends PeriodType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      int[] intArray0 = new int[5];
      intArray0[2] = (-60013);
      PeriodType periodType0 = new PeriodType("w 0[x''?Esi#H},", durationFieldTypeArray0, intArray0);
      assertEquals(7, periodType0.size());
      assertEquals("w 0[x''?Esi#H},", periodType0.getName());
      assertEquals(7, durationFieldTypeArray0.length);
      assertEquals(5, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0, (-60013), 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withWeeksRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(0, periodType1.size());
      assertEquals("YearsNoYears", periodType1.getName());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType1.size());
      assertEquals("DayTime", periodType1.getName());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) null);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertNotNull(seconds0);
      
      PeriodType periodType0 = seconds0.getPeriodType();
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("SecondsNoSeconds", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals("DayTimeNoSeconds", periodType1.getName());
      assertEquals(4, periodType1.size());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.SEVEN;
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      PeriodType periodType0 = days0.getPeriodType();
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("DaysNoDays", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = periodType1.withMonthsRemoved();
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertSame(periodType1, periodType2);
      assertNotSame(periodType2, periodType0);
      assertSame(periodType2, periodType1);
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("DaysNoDays", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertEquals(0, periodType2.size());
      assertEquals("DaysNoDays", periodType2.getName());
      assertNotNull(periodType2);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals("HoursNoHours", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertEquals("DayTimeNoHours", periodType1.getName());
      assertEquals(4, periodType1.size());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.DAYS_TYPE;
      assertNotSame(durationFieldType1, durationFieldType0);
      assertEquals("days", durationFieldType1.getName());
      assertEquals("days", durationFieldType1.toString());
      assertNotNull(durationFieldType1);
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals("StandardNoYearsNoMonthsNoWeeksNoHoursNoSecondsNoMillis", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals(2, durationFieldTypeArray0.length);
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals("StandardNoYearsNoMonthsNoWeeksNoHoursNoSecondsNoMillis", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals(1, periodType1.size());
      assertEquals("StandardNoYearsNoMonthsNoWeeksNoHoursNoSecondsNoMillisNoDays", periodType1.getName());
      assertEquals(2, durationFieldTypeArray0.length);
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("MillisNoMillis", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      
      int int0 = periodType1.size();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("MillisNoMillis", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertEquals(0, int0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 1, (Chronology) ethiopicChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, EthiopicChronology.EE);
      
      int[] intArray0 = new int[8];
      boolean boolean0 = periodType0.setIndexedField(mutablePeriod0, 0, intArray0, 1);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
      assertEquals(1, EthiopicChronology.EE);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      Days days0 = Days.ONE;
      assertEquals(1, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      int int0 = periodType0.getIndexedField(days0, 2);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = periodType0.getFieldType(5);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      Foo foo0 = Foo.FOUR;
      assertEquals(1, foo0.size());
      assertNotNull(foo0);
      
      int[] intArray0 = new int[7];
      boolean boolean0 = periodType0.addIndexedField(foo0, 0, intArray0, 46);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(1, foo0.size());
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {46, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      Weeks weeks0 = Weeks.weeks(0);
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertNotNull(weeks0);
      
      int[] intArray0 = new int[9];
      boolean boolean0 = periodType0.addIndexedField(weeks0, 0, intArray0, 0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(9, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      assertEquals("", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(6, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withYearsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType((String) null, (DurationFieldType[]) null, intArray0);
      assertNull(periodType0.getName());
      assertEquals(4, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withMonthsRemoved();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("above the supported maximum of ", durationFieldTypeArray0, intArray0);
      assertEquals("above the supported maximum of ", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withMonthsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("@yo?P~ot#9YR~", (DurationFieldType[]) null, intArray0);
      assertEquals("@yo?P~ot#9YR~", periodType0.getName());
      assertEquals(8, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withMinutesRemoved();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType(":LcVcspyF", durationFieldTypeArray0, intArray0);
      assertEquals(5, periodType0.size());
      assertEquals(":LcVcspyF", periodType0.getName());
      assertEquals(5, durationFieldTypeArray0.length);
      assertEquals(5, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withMinutesRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("XwqQnW.1/17>", durationFieldTypeArray0, intArray0);
      assertEquals("XwqQnW.1/17>", periodType0.getName());
      assertEquals(0, periodType0.size());
      assertEquals(0, durationFieldTypeArray0.length);
      assertEquals(5, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withMillisRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      assertEquals("", periodType0.getName());
      assertEquals(3, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withDaysRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Years years0 = Years.THREE;
      assertEquals(1, years0.size());
      assertEquals(3, years0.getYears());
      assertNotNull(years0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(years0, 0, (int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(2322L, 2322L, periodType0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(period0, (-19), intArray0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -19
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        periodType0.getIndexedField((ReadablePeriod) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Days days0 = Days.SEVEN;
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      PeriodType periodType0 = days0.getPeriodType();
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        periodType0.getIndexedField(days0, 2539);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2539
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(periodType0);
      
      Days days0 = Days.MIN_VALUE;
      assertEquals(1, days0.size());
      assertEquals(Integer.MIN_VALUE, days0.getDays());
      assertNotNull(days0);
      
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(days0, 800, (int[]) null, 2336);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 800
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("WeeksNoWeeks", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      
      boolean boolean0 = periodType0.equals(periodType1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("WeeksNoWeeks", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertFalse(boolean0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertNotNull(periodType0);
      
      boolean boolean0 = periodType0.equals(periodType0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      assertEquals(1, periodType0.size());
      assertEquals("", periodType0.getName());
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(6, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1, periodType0.size());
      assertEquals("", periodType0.getName());
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Days days0 = Days.SEVEN;
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertNotNull(days0);
      
      PeriodType periodType0 = days0.getPeriodType();
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = periodType0.indexOf((DurationFieldType) null);
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.millis();
      assertSame(periodType1, periodType0);
      assertEquals(1, periodType1.size());
      assertEquals("Millis", periodType1.getName());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.seconds();
      assertSame(periodType1, periodType0);
      assertEquals("Seconds", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.minutes();
      assertSame(periodType1, periodType0);
      assertEquals(1, periodType1.size());
      assertEquals("Minutes", periodType1.getName());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.hours();
      assertSame(periodType1, periodType0);
      assertEquals(1, periodType1.size());
      assertEquals("Hours", periodType1.getName());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Days days0 = Days.SEVEN;
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertNotNull(days0);
      
      PeriodType periodType0 = days0.getPeriodType();
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.days();
      assertSame(periodType1, periodType0);
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      periodType0.hashCode();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.weeks();
      assertSame(periodType1, periodType0);
      assertEquals(1, periodType1.size());
      assertEquals("Weeks", periodType1.getName());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, durationFieldTypeArray0.length);
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.months();
      assertNotSame(periodType1, periodType0);
      assertEquals(1, periodType1.size());
      assertEquals("Months", periodType1.getName());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.years();
      assertSame(periodType1, periodType0);
      assertEquals(1, periodType1.size());
      assertEquals("Years", periodType1.getName());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.time();
      assertSame(periodType1, periodType0);
      assertEquals("Time", periodType1.getName());
      assertEquals(4, periodType1.size());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.dayTime();
      assertSame(periodType1, periodType0);
      assertEquals(5, periodType1.size());
      assertEquals("DayTime", periodType1.getName());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearDay();
      assertSame(periodType1, periodType0);
      assertEquals("YearDay", periodType1.getName());
      assertEquals(2, periodType1.size());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.DAYS_TYPE;
      assertNotSame(durationFieldType1, durationFieldType0);
      assertEquals("days", durationFieldType1.getName());
      assertEquals("days", durationFieldType1.toString());
      assertNotNull(durationFieldType1);
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals(2, periodType0.size());
      assertEquals("StandardNoYearsNoMonthsNoWeeksNoHoursNoSecondsNoMillis", periodType0.getName());
      assertEquals(2, durationFieldTypeArray0.length);
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearDayTime();
      assertNotSame(periodType1, periodType0);
      assertEquals(6, periodType1.size());
      assertEquals("YearDayTime", periodType1.getName());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearWeekDay();
      assertSame(periodType1, periodType0);
      assertEquals(3, periodType1.size());
      assertEquals("YearWeekDay", periodType1.getName());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.DAYS_TYPE;
      assertNotSame(durationFieldType1, durationFieldType0);
      assertEquals("days", durationFieldType1.getName());
      assertEquals("days", durationFieldType1.toString());
      assertNotNull(durationFieldType1);
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals("StandardNoYearsNoMonthsNoWeeksNoHoursNoSecondsNoMillis", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals(2, durationFieldTypeArray0.length);
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearWeekDayTime();
      assertNotSame(periodType1, periodType0);
      assertEquals(7, periodType1.size());
      assertEquals("YearWeekDayTime", periodType1.getName());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearMonthDay();
      assertSame(periodType1, periodType0);
      assertEquals(3, periodType1.size());
      assertEquals("YearMonthDay", periodType1.getName());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearMonthDayTime();
      assertSame(periodType1, periodType0);
      assertEquals("YearMonthDayTime", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.standard();
      assertSame(periodType1, periodType0);
      assertEquals("Standard", periodType1.getName());
      assertEquals(8, periodType1.size());
      assertNotNull(periodType1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType(":LcVcspyF", durationFieldTypeArray0, intArray0);
      assertEquals(5, periodType0.size());
      assertEquals(":LcVcspyF", periodType0.getName());
      assertEquals(5, durationFieldTypeArray0.length);
      assertEquals(5, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withSecondsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("Months", durationFieldTypeArray0, intArray0);
      assertEquals("Months", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(3, durationFieldTypeArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withHoursRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = periodType0.size();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertNotNull(periodType0);
      
      String string0 = periodType0.getName();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(6, periodType1.size());
      assertEquals("YearWeekDayTimeNoMillis", periodType1.getName());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(6, periodType1.size());
      assertEquals("YearWeekDayTimeNoMinutes", periodType1.getName());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(6, periodType1.size());
      assertEquals("YearWeekDayTimeNoYears", periodType1.getName());
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = periodType0.equals(object0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Days days0 = Days.SEVEN;
      PeriodType periodType0 = days0.getPeriodType();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      PeriodType periodType2 = periodType1.withMinutesRemoved();
      assertEquals(0, periodType2.size());
      assertEquals("DaysNoDays", periodType2.getName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Days days0 = Days.SEVEN;
      PeriodType periodType0 = days0.getPeriodType();
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals(1, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2137L, periodType0);
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(mutablePeriod0, 1, intArray0, 1491);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Period period0 = new Period(60000, 60000, 60000, 60000, 60000, (-27), 0, 60000);
      Period period1 = period0.minus(period0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(60000, 60000, 60000, 60000, 60000, (-27), 0, 60000);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(period0, 0, intArray0, 60000);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      Minutes minutes0 = Minutes.ZERO;
      int int0 = periodType0.getIndexedField(minutes0, 0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Minutes minutes0 = Minutes.MIN_VALUE;
      Hours hours0 = minutes0.toStandardHours();
      // Undeclared exception!
      try { 
        periodType0.getIndexedField(hours0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Period period0 = new Period(60000, 60000, 60000, 60000, 60000, (-27), 0, 60000);
      String string0 = period0.toString();
      assertEquals("P60000Y60000M60000W60000DT60000H-27M60S", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.millis();
      durationFieldTypeArray0[1] = durationFieldType1;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldType1;
      durationFieldTypeArray0[5] = durationFieldType0;
      durationFieldTypeArray0[6] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[7] = durationFieldTypeArray0[2];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [hours, hours, millis, hours, millis, hours]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldType0;
      durationFieldTypeArray0[6] = durationFieldTypeArray0[3];
      DurationFieldType durationFieldType1 = DurationFieldType.weeks();
      durationFieldTypeArray0[7] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [hours, hours, hours, hours, hours, hours]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[3];
      DurationFieldType durationFieldType1 = DurationFieldType.months();
      durationFieldTypeArray0[5] = durationFieldType1;
      durationFieldTypeArray0[6] = durationFieldTypeArray0[3];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [days, days, days, days, days]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.years();
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType1 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals(2, periodType1.size());
      assertSame(periodType1, periodType0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType.forFields(durationFieldTypeArray0);
      DurationFieldType[] durationFieldTypeArray1 = new DurationFieldType[8];
      durationFieldTypeArray1[0] = durationFieldType0;
      durationFieldTypeArray1[1] = durationFieldType0;
      durationFieldTypeArray1[2] = durationFieldType0;
      durationFieldTypeArray1[3] = durationFieldType0;
      durationFieldTypeArray1[4] = durationFieldType0;
      durationFieldTypeArray1[5] = durationFieldType0;
      durationFieldTypeArray1[6] = durationFieldType0;
      durationFieldTypeArray1[7] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [minutes, minutes, minutes, minutes, minutes, minutes, minutes]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        PeriodType.forFields((DurationFieldType[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      // Undeclared exception!
      try { 
        periodType0.getFieldType(915);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 915
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      
      String string0 = periodType0.toString();
      assertEquals("PeriodType[Millis]", string0);
  }
}
