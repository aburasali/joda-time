/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 02:59:15 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Foo;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

public class MutablePeriod_ESTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      Weeks weeks0 = Weeks.ZERO;
      mutablePeriod0.setPeriod((ReadablePeriod) weeks0);
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1455, (-265), (-265), 2810);
      mutablePeriod0.addYears(44);
      int int0 = mutablePeriod0.getYears();
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2155), 357, 0, (-2155));
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 18, 357, 357, 0, 0, 18, 0);
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(357, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1455, 0, 0, 2810);
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1455, 1455, 1455, 2810);
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(1455, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(18, 18, (-2155), 18, 18, 357, 357, 0);
      int int0 = mutablePeriod0.getMonths();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(763, 0, 0, 33, 763, 12, (-1660), 3088);
      int int0 = mutablePeriod0.getMinutes();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1486, 1, 1486, 1233, 1, 1486, 41, 0);
      int int0 = mutablePeriod0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1024, (-2084), 7593750, (-2084), (-2084), (-1291), 9, 543);
      int int0 = mutablePeriod0.getMillis();
      assertEquals(543, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1455, (-265), (-265), 2810);
      int int0 = mutablePeriod0.getHours();
      assertEquals(1455, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1455, (-265), (-265), 2810);
      int int0 = mutablePeriod0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-265), 2810, (-265), 1455, (-265), (-265), (-265), (-265));
      int int0 = mutablePeriod0.getDays();
      assertEquals(1455, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1024, (-2084), 7593750, 0, (-2084), (-1291), 0, 543);
      // Undeclared exception!
      try { 
        mutablePeriod0.set((DurationFieldType) null, 7593750);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("Cannot convert period to duration as ", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodParser0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("56Bb7sw'J_tj%", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"56Bb7sw'J_tj%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(18, 18, (-2155), 18, 18, 357, 357, 0);
      // Undeclared exception!
      try { 
        mutablePeriod0.add((DurationFieldType) null, (-985));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod("", periodType0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(0, 1529, 0, 0, 1529, 0, 0, 1, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1355), (-1355), (-1355), (-1355), (-1355), (-1355), (-1355), (-1355), (PeriodType) null);
      int int0 = mutablePeriod0.getHours();
      assertEquals((-1355), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(18, 18, (-2155), 18, 18, 357, 357, 0);
      Object object0 = mutablePeriod0.clone();
      assertTrue(object0.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse((String) null, (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.MutablePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1455, (-265), (-265), 2810);
      int int0 = mutablePeriod0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(18, 18, (-2155), 18, 18, 357, 357, (-2155));
      mutablePeriod0.setPeriod((long) 0, (long) 0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1053), (-1053), (-1053), (-1053));
      int int0 = mutablePeriod0.getMillis();
      assertEquals((-1053), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1355), (-1355), (-1355), (-1355), (-1355), (-1355), (-1355), (-1355), (PeriodType) null);
      int int0 = mutablePeriod0.getWeeks();
      assertEquals((-1355), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(18, 18, (-2155), 18, 18, 357, 357, 0);
      mutablePeriod0.setPeriod((long) 18, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1161), (-1161), (-1161), 623191204);
      int int0 = mutablePeriod0.getMinutes();
      assertEquals((-1161), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1355), (-1355), (-1355), (-1355), (-1355), (-1355), (-1355), (-1355), (PeriodType) null);
      int int0 = mutablePeriod0.getDays();
      assertEquals((-1355), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1455, (-265), (-265), 2810);
      int int0 = mutablePeriod0.getSeconds();
      assertEquals((-265), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 292272708);
      mutablePeriod0.setPeriod((long) 0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(18, 18, (-2155), 18, 18, 357, 357, 0);
      Minutes minutes0 = Minutes.ZERO;
      Seconds seconds0 = minutes0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      Duration duration0 = weeks0.toStandardDuration();
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1455, (-265), (-265), 2810);
      mutablePeriod0.addHours(1455);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1718L), 1155L, periodType0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1824L));
      PeriodType periodType0 = PeriodType.yearDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0, periodType0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = new Object();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, (PeriodType) null, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(18, 18, (-2155), 18, 18, 357, 357, 0);
      mutablePeriod0.clear();
      int int0 = mutablePeriod0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(18, 18, (-2155), 18, 18, 357, 357, 0);
      mutablePeriod0.setDays(0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1355), (-1355), (-1355), (-1355), (-1355), (-1355), (-1355), (-1355), (PeriodType) null);
      mutablePeriod0.add((-802L), (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2783L));
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(6481L, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(18, 18, (-2155), 18, 18, 357, 357, 0);
      mutablePeriod0.setHours(0);
      int int0 = mutablePeriod0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, (-2155), 0, 0, 357, 357, (-2155));
      mutablePeriod0.setMonths(0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1455, (-265), (-265), 2810);
      mutablePeriod0.add((long) (-265));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(18, 18, (-2155), 18, 18, 357, 357, 0);
      mutablePeriod0.add((ReadablePeriod) mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1161), (-1161), (-1161), 623191204);
      mutablePeriod0.addSeconds(0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, (-4188), (-581));
      mutablePeriod0.setValue(0, 0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(27, 1687, 27, 1687);
      mutablePeriod0.addMillis((-1));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1341), (-1341), (-1341), (-1341), (-1341), (-1341), (-1341), (-1341), (PeriodType) null);
      mutablePeriod0.setYears((-2257));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(27, 1687, 27, 1687);
      mutablePeriod0.setSeconds((-2780));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(27, 1687, 27, 1687);
      mutablePeriod0.setWeeks(0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1455, (-265), (-265), 2810);
      mutablePeriod0.addYears((-265));
      int int0 = mutablePeriod0.getYears();
      assertEquals((-265), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2103L), (-2103L));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(27, 1687, 27, 1687);
      mutablePeriod0.setPeriod(169L, (-258L));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(27, 1687, 27, 1687);
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(27, 1687, 27, 1687);
      mutablePeriod0.mergePeriod(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(27, 1687, 27, 1687);
      mutablePeriod0.addWeeks(1687);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("G:&(q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"G:&(q\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      PeriodType periodType0 = PeriodType.millis();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, (ReadableInstant) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = Instant.EPOCH;
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, instant0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      mutablePeriod0.add(0, 0, 0, 0, 0, 1450, 0, 0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(27, 1687, 27, 1687);
      mutablePeriod0.setPeriod((-2780), 0, (-2780), 2499, 854, 27, 1000, 1687);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1024, (-2084), 7593750, (-2084), (-2084), (-1291), 9, 543);
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      mutablePeriod0.set(durationFieldType0, 7593750);
      assertEquals("seconds", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1455, (-265), (-265), 2810);
      int int0 = mutablePeriod0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.minutes();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1024, (-2084), 7593750, (-2084), (-2084), (-1291), 9, 543);
      Instant instant0 = Instant.ofEpochMilli(0L);
      mutablePeriod0.setPeriod((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      PeriodType periodType0 = minutes0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L, periodType0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1455, (-265), (-265), 2810);
      mutablePeriod0.addMinutes(2810);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(27, 1687, 27, 1687);
      mutablePeriod0.addDays(27);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(18, 18, (-2155), 18, 18, 357, 357, 0);
      mutablePeriod0.addMonths(18);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(18, 18, (-2155), 18, 18, 357, 357, 0);
      mutablePeriod0.setMinutes(60000);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Foo foo0 = new Foo((-1341));
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1341), (-1341), (-1341), (-1341), (-1341), (-1341), (-1341), (-1341), (PeriodType) null);
      // Undeclared exception!
      try { 
        mutablePeriod0.setPeriod((ReadablePeriod) foo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(2276L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(27, 1687, 27, 1687);
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      mutablePeriod0.add(durationFieldType0, 0);
      assertEquals("centuries", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(fileSystemHandling0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.evosuite.runtime.testdata.FileSystemHandling
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1455, (-265), (-265), 2810);
      mutablePeriod0.setMillis(1220);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(763, 0, 0, 33, 763, 12, (-1677), 3088);
      mutablePeriod0.setPeriod((ReadableDuration) null);
  }
}
