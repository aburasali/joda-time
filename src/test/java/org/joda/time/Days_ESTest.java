/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 09 03:45:51 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

public class Days_ESTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Days days0 = Days.FIVE;
      Days days1 = Days.THREE;
      boolean boolean0 = days0.isLessThan(days1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Days days0 = Days.FOUR;
      Days days1 = days0.plus((-460));
      boolean boolean0 = days1.isGreaterThan(days0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(hours0, 3881);
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime1, (ReadablePartial) localDateTime0);
      boolean boolean0 = days0.isGreaterThan((Days) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Days days0 = Days.SIX;
      Weeks weeks0 = days0.SEVEN.toStandardWeeks();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Days days0 = Days.ONE;
      Days days1 = days0.multipliedBy((-1669));
      Weeks weeks0 = days1.toStandardWeeks();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.ZERO;
      Minutes minutes0 = days0.toStandardMinutes();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.days((-86399999));
      Hours hours0 = days0.toStandardHours();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(1823L, dateTimeZone0);
      Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      Duration duration0 = days0.toStandardDuration();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Duration duration0 = days0.toStandardDuration();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Days days0 = Days.FIVE;
      Days days1 = Days.standardDaysIn(days0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Days days1 = Days.standardDaysIn(days0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      DateTime dateTime0 = DateTime.now();
      Interval interval0 = new Interval(hours0, dateTime0);
      Days days0 = Days.daysIn(interval0);
      Days days1 = days0.minus((-39));
      Days days2 = days1.plus((-39));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Days days0 = Days.parseDays("P2147483647D");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.ZERO;
      Days days1 = days0.negated();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Days days0 = Days.days((-86399999));
      Days days1 = days0.negated();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Days days0 = Days.THREE;
      Days days1 = days0.FOUR.multipliedBy(0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Days days0 = Days.ONE;
      Days days1 = days0.multipliedBy((-1669));
      Minutes minutes0 = days1.toStandardMinutes();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Days days0 = Days.FOUR;
      Days days1 = Days.FIVE;
      Days days2 = days0.minus(days1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Days days0 = Days.FIVE;
      Days days1 = days0.MAX_VALUE.minus(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Days days1 = days0.minus(242);
      Seconds seconds0 = days1.toStandardSeconds();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(1823L, dateTimeZone0);
      Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      int int0 = days0.getDays();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      int int0 = days0.getDays();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Days days1 = days0.dividedBy(815);
      Days days2 = days0.SEVEN.minus(days1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate("");
      LocalDate localDate1 = localDate0.withWeekyear(5);
      Days days0 = Days.daysBetween((ReadablePartial) localDate1, (ReadablePartial) localDate0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withWeekyear(100);
      Days days0 = Days.daysBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.minusDays((-1056));
      Days days0 = Days.daysBetween((ReadableInstant) dateTime1, (ReadableInstant) mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      // Undeclared exception!
      try { 
        days0.toStandardSeconds();
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * 86400
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      // Undeclared exception!
      try { 
        days0.MIN_VALUE.toStandardMinutes();
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 1440
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        days0.toStandardHours();
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 24
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.minusMonths(5);
      PeriodType periodType0 = PeriodType.standard();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime1, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        Days.standardDaysIn(mutablePeriod0);
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P5M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Period period0 = Period.weeks(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        Days.standardDaysIn(period0);
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -15032385536
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      // Undeclared exception!
      try { 
        days0.plus(days0);
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Days days0 = duration0.toStandardDays();
      // Undeclared exception!
      try { 
        days0.MAX_VALUE.plus(83);
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 83
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Days.parseDays("");
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        days0.negated();
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Days days0 = Days.FIVE;
      // Undeclared exception!
      try { 
        days0.TWO.multipliedBy(Integer.MAX_VALUE);
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2 * 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Days days0 = Days.ZERO;
      Days days1 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        days0.minus(days1);
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Days days0 = Days.ZERO;
      Days days1 = days0.MIN_VALUE.dividedBy(1);
      // Undeclared exception!
      try { 
        days1.minus(1);
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Days days0 = Days.FIVE;
      // Undeclared exception!
      try { 
        days0.MIN_VALUE.dividedBy(0);
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Days", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Duration duration0 = Duration.standardDays(Integer.MIN_VALUE);
      Duration duration1 = duration0.withDurationAdded((long) Integer.MIN_VALUE, Integer.MIN_VALUE);
      Interval interval0 = new Interval((ReadableInstant) null, duration1);
      // Undeclared exception!
      try { 
        Days.daysIn(interval0);
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 51228511935
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial(gregorianChronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Duration duration0 = Duration.standardDays(1249L);
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded(duration0, 4473924);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) localDateTime1, (ReadablePartial) localDateTime0);
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -5587931076
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Days days1 = days0.plus(0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Days days0 = Days.days(3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Days days0 = Days.days(6);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Days days0 = Days.days(0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Days days0 = Days.days(2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Days days0 = Days.days(4);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Days days0 = Days.days(1);
      boolean boolean0 = days0.isLessThan((Days) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Days days0 = Days.days(Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Days days0 = Days.days(5);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Days days0 = Days.ONE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Weeks weeks0 = days0.toStandardWeeks();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Days days1 = days0.minus((-39));
      boolean boolean0 = days0.isLessThan(days1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(hours0, 3881);
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime1, (ReadablePartial) localDateTime0);
      boolean boolean0 = days0.isLessThan((Days) null);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      boolean boolean0 = days0.isLessThan((Days) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      boolean boolean0 = days0.isLessThan(days0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Days days0 = Days.FOUR;
      Days days1 = days0.plus((-460));
      boolean boolean0 = days0.isGreaterThan(days1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Days days0 = Days.FIVE;
      boolean boolean0 = days0.isGreaterThan((Days) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      boolean boolean0 = days0.isGreaterThan((Days) null);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Days days0 = Days.FOUR;
      boolean boolean0 = days0.isGreaterThan(days0);
  }


  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Days days1 = days0.minus((Days) null);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Days days0 = Days.FOUR;
      Days days1 = days0.minus(days0);
      Seconds seconds0 = days1.toStandardSeconds();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Days days0 = Days.days((-589));
      Days days1 = days0.plus((Days) null);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Days days0 = Days.ZERO;
      Days days1 = days0.plus(days0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Days days0 = Days.parseDays((String) null);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Days days0 = Days.daysIn((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) islamicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      Days days0 = Days.daysIn(interval0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) localDate0, (ReadablePartial) null);
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Days days0 = Days.days(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Days days0 = Days.days(7);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Days days0 = Days.ONE;
      Days days1 = days0.FOUR.plus(days0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Hours hours0 = days0.FOUR.toStandardHours();
      Days days1 = hours0.toStandardDays();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Days days0 = Days.parseDays("P-2147483648D");
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Days days0 = Days.ONE;
      int int0 = days0.getDays();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Days days0 = Days.ONE;
      Duration duration0 = days0.THREE.toStandardDuration();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Days days0 = Days.ONE;
      Days days1 = days0.FIVE.multipliedBy(6353);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Days days0 = Days.ONE;
      Days days1 = days0.negated();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Duration duration0 = Duration.standardHours(34L);
      Days days0 = duration0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Days days1 = Days.standardDaysIn(days0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Days days0 = Days.ZERO;
      PeriodType periodType0 = days0.getPeriodType();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Days days0 = Days.daysBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Days days0 = Days.ZERO;
      Hours hours0 = days0.toStandardHours();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Duration duration0 = Duration.standardHours(34L);
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Days days0 = Days.FOUR;
      String string0 = days0.toString();
  }
}
