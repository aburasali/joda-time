/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 01:58:49 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormatSymbols;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.joda.time.Chronology;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

public class DateTimeUtils_ESTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset((-382L));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeUtils.OffsetMillisProvider dateTimeUtils_OffsetMillisProvider0 = new DateTimeUtils.OffsetMillisProvider((-1423L));
      long long0 = dateTimeUtils_OffsetMillisProvider0.getMillis();
      assertEquals(1392409279897L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeUtils.FixedMillisProvider dateTimeUtils_FixedMillisProvider0 = new DateTimeUtils.FixedMillisProvider((-1966L));
      long long0 = dateTimeUtils_FixedMillisProvider0.getMillis();
      assertEquals((-1966L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = DateTimeUtils.toJulianDayNumber((-9223372036854775808L));
      assertEquals((-106749550580L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = DateTimeUtils.toJulianDay(1674L);
      assertEquals(2440587.500019375, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      PeriodType periodType0 = hours0.getPeriodType();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      PeriodType periodType2 = DateTimeUtils.getPeriodType(periodType1);
      assertEquals(0, periodType2.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      long long0 = DateTimeUtils.getInstantMillis(instant0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-7730941132800000L));
      long long0 = DateTimeUtils.getInstantMillis(instant0);
      assertEquals((-7730941132800000000L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Minutes minutes0 = seconds0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      Duration duration0 = weeks0.toStandardDuration();
      long long0 = DateTimeUtils.getDurationMillis(duration0);
      assertEquals((-2147040000000L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay(2440587.5);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay(1392409281320L);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-3565L));
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals((-3565L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.setDefaultTimeZoneNames((Map<String, DateTimeZone>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.getDateFormatSymbols((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeUtils.getZone((DateTimeZone) null);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getChronology((Chronology) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Chronology chronology0 = DateTimeUtils.getInstantChronology(instant0);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = DateTimeUtils.toJulianDay((-9223372036854775808L));
      assertEquals((-1.0674955057980064E11), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.isContiguous((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Partial must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = DateTimeUtils.getDurationMillis((ReadableDuration) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Duration duration0 = hours0.toStandardDuration();
      long long0 = DateTimeUtils.getDurationMillis(duration0);
      assertEquals(18000000L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodType periodType0 = DateTimeUtils.getPeriodType((PeriodType) null);
      assertEquals(8, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeZone dateTimeZone1 = DateTimeUtils.getZone(dateTimeZone0);
      assertEquals("UTC", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ReadableInterval readableInterval0 = DateTimeUtils.getReadableInterval((ReadableInterval) null);
      assertNotNull(readableInterval0);
      assertEquals(1392409281320L, readableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInterval) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Instant instant0 = new Instant(18000000L);
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInstant) null, (ReadableInstant) instant0);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInstant) null, (ReadableInstant) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getInstantChronology((ReadableInstant) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(18000000L);
      long long0 = DateTimeUtils.getInstantMillis(instant0);
      assertEquals(18000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.setCurrentMillisProvider((DateTimeUtils.MillisProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The MillisProvider must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeUtils.OffsetMillisProvider dateTimeUtils_OffsetMillisProvider0 = new DateTimeUtils.OffsetMillisProvider(1L);
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_OffsetMillisProvider0);
      assertEquals(1392409281321L, dateTimeUtils_OffsetMillisProvider0.getMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset(0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset(1392409281320L);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeUtils.OffsetMillisProvider dateTimeUtils_OffsetMillisProvider0 = new DateTimeUtils.OffsetMillisProvider(1L);
      long long0 = dateTimeUtils_OffsetMillisProvider0.getMillis();
      assertEquals(1392409281321L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = DateTimeUtils.getInstantMillis((ReadableInstant) null);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeUtils.SystemMillisProvider dateTimeUtils_SystemMillisProvider0 = new DateTimeUtils.SystemMillisProvider();
      long long0 = dateTimeUtils_SystemMillisProvider0.getMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      DateFormatSymbols dateFormatSymbols0 = DateTimeUtils.getDateFormatSymbols(locale0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeUtils dateTimeUtils0 = new DateTimeUtils();
      assertEquals(1392409281320L, dateTimeUtils0.currentTimeMillis());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = DateTimeUtils.toJulianDayNumber((-2171L));
      assertEquals(2440587L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Map<String, DateTimeZone> map0 = DateTimeUtils.getDefaultTimeZoneNames();
      DateTimeUtils.setDefaultTimeZoneNames(map0);
      assertEquals(11, map0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay(1L);
      assertEquals((-210866673600000L), long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeUtils.setCurrentMillisSystem();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed(1L);
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals(1L, long0);
  }
}
