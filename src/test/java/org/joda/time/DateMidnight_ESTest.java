/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 01:51:28 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Foo;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

public class DateMidnight_ESTest  {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.minusDays((-156));
      assertEquals(1405814400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks((-817));
      assertEquals(1886457600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths((-2491));
      assertEquals(7942924800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      DateMidnight dateMidnight0 = new DateMidnight((-2327L), (Chronology) strictChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(983);
      assertEquals(594432000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths((-349));
      assertEquals(474508800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(10080L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfMonth();
      long long0 = dateMidnight_Property0.getMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.centuryOfEra();
      dateMidnight_Property0.getField();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateMidnight.Property dateMidnight_Property0 = new DateMidnight.Property((DateMidnight) null, (DateTimeField) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.minusYears((-33));
      assertEquals(2433715200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(1287L);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight2 = dateMidnight1.withZoneRetainFields(uTCDateTimeZone0);
      assertSame(dateMidnight2, dateMidnight1);
      assertEquals(0L, dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(0);
      DateMidnight dateMidnight2 = dateMidnight1.withYearOfEra(2605);
      assertEquals((-144337334400000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(0);
      assertEquals((-2208988800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) islamicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withYear(2175);
      assertEquals(24049094400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(25650000);
      assertEquals(809373655728000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(10080L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekOfWeekyear(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekOfWeekyear(30);
      assertEquals(17539200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(4437L, (Chronology) ethiopicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekOfWeekyear(1);
      assertEquals((-9676800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withYear(1);
      Days days0 = Days.FIVE;
      DateMidnight dateMidnight2 = dateMidnight1.withPeriodAdded(days0, 0);
      assertEquals((-62131795200000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(10080L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withMonthOfYear(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight(0L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(17887500);
      DateMidnight dateMidnight2 = dateMidnight1.withMonthOfYear(1);
      assertEquals(1545472137600000L, dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(100000000000000000L);
      assertEquals(99999999964800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears((-2546));
      MonthDay monthDay0 = new MonthDay();
      DateMidnight dateMidnight2 = dateMidnight1.withFields(monthDay0);
      assertEquals((-80340249600000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, (-2954));
      assertEquals((-6376060800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateMidnight dateMidnight1 = dateMidnight0.withField(dateTimeFieldType0, 1);
      assertEquals((-62131795200000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(3338L, (Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withEra(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withEra(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.withEra(0);
      assertEquals((-124334352000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(1287L);
      Duration duration0 = new Duration(46L);
      DateMidnight dateMidnight2 = dateMidnight1.withDurationAdded((ReadableDuration) duration0, (-156));
      assertEquals((-86400000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded(0L, (-1301));
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight(328L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfYear(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfYear(1);
      assertEquals(1388534400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(2, 2, 2);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfYear(2);
      assertEquals((-62103974400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfWeek(1);
      assertEquals(1391990400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      DateMidnight dateMidnight0 = new DateMidnight(52, 52, 1311, lenientChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfWeek((-633));
      assertEquals((-51391065600000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(10080L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfMonth(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfMonth(7);
      assertEquals(1391731200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(buddhistChronology0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      Chronology chronology0 = buddhistChronology0.withZone(dateTimeZone0);
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(chronology0);
      assertEquals((-1L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(1790);
      assertEquals(5588736220800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      Interval interval0 = dateMidnight0.toInterval();
      assertEquals(86400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      DateMidnight dateMidnight0 = new DateMidnight((-1L), (Chronology) copticChronology0);
      Interval interval0 = dateMidnight0.toInterval();
      assertEquals(0L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(0);
      Interval interval0 = dateMidnight1.toInterval();
      assertEquals((-62162985600000L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(4437L, (Chronology) ethiopicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(10080L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight(859L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(12);
      DateMidnight dateMidnight2 = dateMidnight1.plusMonths(1752);
      assertEquals((-19245945600000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2047));
      DateMidnight dateMidnight0 = new DateMidnight((-174L), dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.plusDays((-2047));
      assertEquals((-176947197953L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight0 = new DateMidnight(1479L, (Chronology) iSOChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) null);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1689L));
      Weeks weeks0 = Weeks.TWO;
      Minutes minutes0 = weeks0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      Duration duration0 = seconds0.toStandardDuration();
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadableDuration) duration0);
      DateMidnight dateMidnight2 = dateMidnight1.plus((ReadablePeriod) minutes0);
      assertEquals((-86400000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withYear(1);
      Duration duration0 = new Duration((-3201L));
      DateMidnight dateMidnight2 = dateMidnight1.plus((ReadableDuration) duration0);
      assertEquals((-62131881600000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L, (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.plus(0L);
      assertSame(dateMidnight0, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType1;
      int[] intArray0 = new int[3];
      Partial partial0 = new Partial(ethiopicChronology0, dateTimeFieldTypeArray0, intArray0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateMidnight dateMidnight0 = DateMidnight.parse("-113T--00", dateTimeFormatter0);
      assertEquals(956361600000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.parse("14");
      assertEquals((-61725369600000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      System.setCurrentTimeMillis(70);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) copticChronology0);
      assertEquals(0L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      System.setCurrentTimeMillis((-1747L));
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekOfWeekyear();
      Chronology chronology0 = dateMidnight_Property0.getChronology();
      DateMidnight dateMidnight1 = DateMidnight.now(chronology0);
      assertEquals((-86400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(0L);
      DateMidnight dateMidnight2 = dateMidnight1.minusYears(0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(0);
      DateMidnight dateMidnight2 = dateMidnight1.minusYears(0);
      assertEquals((-62163072000000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(3338L, (Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.minusDays(1);
      assertEquals((-86400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) uTCDateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(656L, (PeriodType) null, (Chronology) copticChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) mutablePeriod0);
      assertEquals(1392249600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-156L));
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("", periodFormatter0);
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) mutablePeriod0);
      assertEquals((-86400000L), dateMidnight0.getMillis());
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      Days days0 = Days.ZERO;
      Duration duration0 = days0.toStandardDuration();
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadableDuration) duration0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Duration duration0 = mutablePeriod0.toDurationFrom(dateMidnight0);
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadableDuration) duration0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight(859L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minus((long) 0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, dateTimeZone0);
      long long0 = dateMidnight0.checkInstant(1L, buddhistChronology0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      long long0 = dateMidnight0.checkInstant((-1818L), buddhistChronology0);
      assertEquals((-86400000L), long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) null);
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfEra((-1142));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1142 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfCentury((-2280));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2280 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(gJChronology0);
      // Undeclared exception!
      try { 
        dateMidnight1.withYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.field.SkipDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) julianChronology0);
      Foo foo0 = Foo.SIX;
      // Undeclared exception!
      try { 
        dateMidnight0.withPeriodAdded(foo0, (-30));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        dateMidnight0.withPeriodAdded(years0, (-2046));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 4393751543808
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) buddhistChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      // Undeclared exception!
      try { 
        dateMidnight0.withFieldAdded(durationFieldType0, (-292269054));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        dateMidnight0.withFieldAdded(durationFieldType0, (-2982));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      // Undeclared exception!
      try { 
        dateMidnight0.withField(dateTimeFieldType0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Weeks weeks0 = Weeks.weeks(2112278998);
      Duration duration0 = weeks0.toStandardDuration();
      // Undeclared exception!
      try { 
        dateMidnight0.withDurationAdded((ReadableDuration) duration0, 537);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 1277506337990400000 * 537
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        dateMidnight0.withDurationAdded(1000000000000000000L, (-151));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 1000000000000000000 * -151
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        dateMidnight1.withChronology(ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withCenturyOfEra((-608));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -608 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1L));
      // Undeclared exception!
      try { 
        dateMidnight0.plusYears(2146130476);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2146132445 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateMidnight0.plusYears(2147483449);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483449
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.plusWeeks((-2147483646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      Foo foo0 = Foo.MAX_VALUE;
      // Undeclared exception!
      try { 
        dateMidnight0.plus((ReadablePeriod) foo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null, 1);
      DateMidnight dateMidnight0 = new DateMidnight(219L, (Chronology) copticChronology0);
      Duration duration0 = Duration.standardMinutes((-58565894400000L));
      // Undeclared exception!
      try { 
        dateMidnight0.plus((ReadableDuration) duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC,mdfw=1])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        DateMidnight.parse("", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-2147483622)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateMidnight.parse("E5n>*LqtMmW'", dateTimeFormatter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateMidnight.parse((String) null, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserInternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateMidnight.parse("_.Bx$0i[_,{", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"_.Bx$0i[_,{\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.minusYears(2175);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -740 for year must be in the range [1,292271022]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.minusDays(2147483644);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      // Undeclared exception!
      try { 
        dateMidnight0.checkInstant(31557600000L, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((Object) ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.EthiopicChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded((ReadablePeriod) null, 0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      Minutes minutes0 = Minutes.ZERO;
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(minutes0, (-1778));
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Duration duration0 = new Duration(46L);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) duration0, (-156));
      assertEquals(1392249600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded(0L, (-1));
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded(15778476000L, (-4409));
      assertEquals((-68175043200000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(326565);
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      DateMidnight dateMidnight2 = dateMidnight1.minusYears(0);
      DateMidnight dateMidnight3 = dateMidnight2.plusYears(0);
      assertEquals((-326565L), dateMidnight3.getMillis());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, copticChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.minusWeeks(2101792506);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1), 1, 1);
      DateMidnight dateMidnight1 = dateMidnight0.withMonthOfYear(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      DateMidnight dateMidnight0 = new DateMidnight(52, 52, 1311, lenientChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plus((-2165L));
      assertEquals((-51335942400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) null);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfCentury();
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy((-3538));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3538 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((-156), 1, 7, uTCDateTimeZone0);
      assertEquals((-67089600000000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(30962844000000L, (DateTimeZone) uTCDateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      dateMidnight0.property(dateTimeFieldType0);
      assertEquals(30962822400000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minusDays(0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight(328L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(3366);
      assertEquals((-2035756800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1392336000000L);
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths(0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(10080L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths(1);
      assertEquals((-2678400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        dateMidnight0.minusYears((-2147483645));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483645
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1L));
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks((-1));
      assertEquals((-691200000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) null);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      Seconds seconds0 = Seconds.THREE;
      Duration duration0 = seconds0.toStandardDuration();
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) null, 7);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((long) 1080, 0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight(328L, (DateTimeZone) uTCDateTimeZone0);
      Duration duration0 = Duration.standardSeconds(0L);
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadableDuration) duration0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(30962844000000L, (DateTimeZone) uTCDateTimeZone0);
      Days days0 = Days.TWO;
      DurationFieldType durationFieldType0 = days0.getFieldType(0);
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, 0);
      assertEquals(30962822400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateMidnight0.withFieldAdded((DurationFieldType) null, (-30));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight(328L, (DateTimeZone) uTCDateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, 1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight(328L, (DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        dateMidnight0.withField((DateTimeFieldType) null, 1027);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateMidnight dateMidnight1 = dateMidnight0.withField(dateTimeFieldType0, 0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Object) null);
      DateMidnight dateMidnight1 = dateMidnight0.withFields((ReadablePartial) null);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(30962844000000L, (DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(1L);
      DateMidnight dateMidnight1 = dateMidnight0.withFields(localDateTime0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(uTCDateTimeZone0);
      assertSame(dateMidnight1, dateMidnight0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.getDateMidnight();
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMinimumValue();
      assertEquals(1389657600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfFloorCopy();
      assertEquals(1391212800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight(328L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfCeilingCopy();
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals((-62135596800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfWeek();
      DateMidnight dateMidnight1 = dateMidnight_Property0.addWrapFieldToCopy((-875));
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight(328L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundCeilingCopy();
      assertEquals(9223372036828800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(10080L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfMonth();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundFloorCopy();
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy("/XqqoqrV)f>vC@Mvx|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"/XqqoqrV)f>vC@Mvx|\" for weekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) buddhistChronology0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfMonth();
      DateMidnight dateMidnight1 = dateMidnight_Property0.addToCopy((-590L));
      assertEquals((-50976000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals(1391212800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight(328L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMaximumValue();
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      Duration duration0 = new Duration((long) 1);
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadableDuration) duration0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(1, 0, 0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight(328L, (DateTimeZone) uTCDateTimeZone0);
      dateMidnight0.dayOfYear();
      assertEquals(0L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(2605);
      assertEquals(20042467200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(10080L, (DateTimeZone) uTCDateTimeZone0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) islamicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) mutablePeriod0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(4246, 4246, 4246);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4246 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      dateMidnight0.year();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minus((long) (-2954));
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) islamicChronology0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.centuryOfEra();
      Locale locale0 = new Locale("M\"!%;$x70 4ObzEQ&>|", ",7R^A(.54", ",7R^A(.54");
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy("M\"!%;$x70 4ObzEQ&>|", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"M\"!%;$x70 4ObzEQ&>|\" for centuryOfEra is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(10080L, (DateTimeZone) uTCDateTimeZone0);
      dateMidnight0.toLocalDate();
      assertEquals(0L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) iSOChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(0);
      assertEquals(950486400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.plus((-677L));
      assertEquals(1392249600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      dateMidnight0.yearOfEra();
      assertEquals(0L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfYear(2787);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2787 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(4L, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Interval interval0 = dateMidnight0.toInterval();
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertEquals(1392336000000L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(10080L, (DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        dateMidnight0.withEra(866);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 866 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.addToCopy(0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1392336000000L);
      // Undeclared exception!
      try { 
        dateMidnight0.withWeekOfWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1567L));
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfWeek(366);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 366 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((-803), (-803), (-803), gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -803 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfMonth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse(",wJl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \",wJl\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LimitChronology limitChronology0 = LimitChronology.getInstance(buddhistChronology0, dateMidnight1, dateMidnight0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(limitChronology0);
      // Undeclared exception!
      try { 
        DateMidnight.now((Chronology) lenientChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is above the supported maximum of 2557-02-14T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(12);
      DateMidnight dateMidnight2 = dateMidnight1.minus((long) (-2954));
      assertEquals((-23853225600000L), dateMidnight2.getMillis());
      assertSame(dateMidnight2, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(ethiopicChronology0, ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.EthiopicChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(buddhistChronology0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.BuddhistChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
}
