/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 02:40:47 GMT 2019
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.ScaledDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScaledDurationField_ESTest extends ScaledDurationField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, (-6));
      ScaledDurationField scaledDurationField1 = new ScaledDurationField(millisDurationField0, durationFieldType0, 4978125);
      boolean boolean0 = scaledDurationField0.equals(scaledDurationField1);
      assertFalse(boolean0);
      assertFalse(scaledDurationField1.equals((Object)scaledDurationField0));
      assertEquals(4978125, scaledDurationField1.getScalar());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      Hours hours0 = Hours.FIVE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, 1489);
      long long0 = scaledDurationField0.getValueAsLong((long) 1489, 0L);
      assertEquals(1489, scaledDurationField0.getScalar());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-755L));
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, (-1713));
      long long0 = scaledDurationField0.getValueAsLong((-976452825L), 3175L);
      assertEquals((-755L), long0);
      assertEquals((-1713), scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DurationField durationField0 = buddhistChronology0.millis();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      Interval interval0 = new Interval(mutableDateTime0, mutableDateTime0);
      Seconds seconds0 = Seconds.secondsIn(interval0);
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 68);
      long long0 = scaledDurationField0.getValueAsLong(1400L);
      assertEquals(20L, long0);
      assertEquals(68, scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, (-1911));
      long long0 = scaledDurationField0.getValueAsLong(604800L);
      assertEquals((-1911), scaledDurationField0.getScalar());
      assertEquals((-316L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DurationField durationField0 = durationFieldType0.getField(gregorianChronology0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 366);
      int int0 = scaledDurationField0.getValue(0L, (long) 366);
      assertEquals(366, scaledDurationField0.getScalar());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.months();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 32);
      int int0 = scaledDurationField0.getValue(84151872000L, 84151872000L);
      assertEquals(1, int0);
      assertEquals(32, scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-755L));
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, (-1713));
      int int0 = scaledDurationField0.getValue((-2215449350L), 1672664259250L);
      assertEquals((-1713), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, 5);
      int int0 = scaledDurationField0.getValue(60000L);
      assertEquals(12000, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DurationField durationField0 = durationFieldType0.getField(iSOChronology0);
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, 415);
      int int0 = scaledDurationField0.getValue((-38545200000000L));
      assertEquals((-2150), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, (-1713));
      long long0 = scaledDurationField0.getUnitMillis();
      assertEquals(0L, long0);
      assertEquals((-1713), scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 100000000000000L);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, 965);
      long long0 = scaledDurationField0.getUnitMillis();
      assertEquals(96500000000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, (-1911));
      int int0 = scaledDurationField0.getScalar();
      assertEquals((-1911), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DurationField durationField0 = durationFieldType0.getField(gregorianChronology0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 366);
      scaledDurationField0.getMillis((long) 0, (long) 0);
      assertEquals(366, scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DurationField durationField0 = durationFieldType0.getField(gregorianChronology0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 366);
      long long0 = scaledDurationField0.getMillis((long) 366, 9223372036854775807L);
      assertEquals(81016588800000L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, 1183);
      scaledDurationField0.getMillis(1L);
      assertEquals(1183, scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, (-1911));
      long long0 = scaledDurationField0.getMillis(604800L);
      assertEquals((-1155772800L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.minutes();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-800));
      long long0 = scaledDurationField0.getMillis(0, (long) 1);
      assertEquals((-800), scaledDurationField0.getScalar());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-755L));
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, (-1713));
      long long0 = scaledDurationField0.getMillis((-1713), 0L);
      assertEquals((-2215448595L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 218);
      long long0 = scaledDurationField0.getMillis(0);
      assertEquals(0L, long0);
      assertEquals(218, scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, (-1911));
      long long0 = scaledDurationField0.getMillis((-1911));
      assertEquals(3651921L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.years();
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1489);
      long long0 = scaledDurationField0.getMillis((-4454));
      assertEquals((-209285895005712000L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DurationField durationField0 = durationFieldType0.getField(gregorianChronology0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 366);
      long long0 = scaledDurationField0.getDifferenceAsLong(366, 0L);
      assertEquals(366, scaledDurationField0.getScalar());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, (-1911));
      long long0 = scaledDurationField0.getDifferenceAsLong(604800L, (-1911));
      assertEquals((-1911), scaledDurationField0.getScalar());
      assertEquals((-317L), long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-755L));
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, (-1713));
      int int0 = scaledDurationField0.getDifference(2080L, (-2215449350L));
      assertEquals(1713, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-5), (-5));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.years();
      Minutes minutes0 = Minutes.TWO;
      Weeks weeks0 = minutes0.toStandardWeeks();
      Days days0 = weeks0.toStandardDays();
      DurationFieldType durationFieldType0 = days0.getFieldType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1537);
      int int0 = scaledDurationField0.getDifference((-5), 48503035224000L);
      assertEquals(1537, scaledDurationField0.getScalar());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, (-1713));
      scaledDurationField0.add(0L, (long) (-1713));
      assertEquals((-1713), scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-755L));
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, (-1713));
      long long0 = scaledDurationField0.add((-755L), (long) (-1713));
      assertEquals((-2215449350L), long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1179);
      long long0 = scaledDurationField0.add(0L, 0);
      assertEquals(1179, scaledDurationField0.getScalar());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, (-1911));
      long long0 = scaledDurationField0.add(604800L, (-1911));
      assertEquals(4256721L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      Hours hours0 = Hours.standardHoursIn(weeks0);
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, 1186);
      // Undeclared exception!
      try { 
        scaledDurationField0.getValueAsLong((long) 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 5097600000L);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, (-16));
      // Undeclared exception!
      try { 
        scaledDurationField0.getMillis(5097600000L, 21859200000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -81561600000 * 5097600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.months();
      Duration duration0 = Duration.millis(2461L);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, (ReadableInstant) null, periodType0);
      DurationFieldType durationFieldType0 = mutablePeriod0.getFieldType(1);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-1765));
      // Undeclared exception!
      try { 
        scaledDurationField0.getMillis(31622400000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -55813536000000 * 2629746000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.weeks();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 352831696);
      // Undeclared exception!
      try { 
        scaledDurationField0.getMillis(1811, (long) 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 638978201456 * 604800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, (-1713));
      // Undeclared exception!
      try { 
        scaledDurationField0.getDifferenceAsLong(2080L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.PreciseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.minutes();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-800));
      // Undeclared exception!
      try { 
        scaledDurationField0.add((-1321L), 16464000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.months();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 2);
      // Undeclared exception!
      try { 
        scaledDurationField0.add(5097600002L, 5259492000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: 10518984000
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 218);
      // Undeclared exception!
      try { 
        scaledDurationField0.add(31556952000L, (-22282041599782L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -4857485068752476 * 86400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.joda.time.chrono.LenientChronology");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1523);
      // Undeclared exception!
      try { 
        scaledDurationField0.add((-2578L), (-1850));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 100000000000000L);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, 965);
      // Undeclared exception!
      try { 
        scaledDurationField0.add((long) 965, (-246));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -237390 * 100000000000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, (-1911));
      long long0 = scaledDurationField0.getUnitMillis();
      assertEquals((-1911L), long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.weeks();
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-1224));
      ScaledDurationField scaledDurationField1 = new ScaledDurationField(durationField0, durationFieldType0, (-1224));
      boolean boolean0 = scaledDurationField0.equals(scaledDurationField1);
      assertTrue(boolean0);
      assertEquals((-1224), scaledDurationField1.getScalar());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1186);
      Period period0 = Period.years(0);
      Weeks weeks0 = Weeks.standardWeeksIn(period0);
      DurationFieldType durationFieldType1 = weeks0.getFieldType();
      ScaledDurationField scaledDurationField1 = new ScaledDurationField(durationField0, durationFieldType1, 57);
      boolean boolean0 = scaledDurationField0.equals(scaledDurationField1);
      assertFalse(boolean0);
      assertEquals(57, scaledDurationField1.getScalar());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1179);
      ScaledDurationField scaledDurationField1 = new ScaledDurationField(durationField0, durationFieldType0, (-2561));
      boolean boolean0 = scaledDurationField0.equals(scaledDurationField1);
      assertEquals((-2561), scaledDurationField1.getScalar());
      assertFalse(scaledDurationField1.equals((Object)scaledDurationField0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.minutes();
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 2);
      ScaledDurationField scaledDurationField1 = new ScaledDurationField(scaledDurationField0, durationFieldType0, 2);
      boolean boolean0 = scaledDurationField0.equals(scaledDurationField1);
      assertEquals(2, scaledDurationField1.getScalar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1179);
      boolean boolean0 = scaledDurationField0.equals(scaledDurationField0);
      assertEquals(1179, scaledDurationField0.getScalar());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.minutes();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-800));
      Object object0 = new Object();
      boolean boolean0 = scaledDurationField0.equals(object0);
      assertEquals((-800), scaledDurationField0.getScalar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.minutes();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      ScaledDurationField scaledDurationField0 = null;
      try {
        scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The scalar must not be 0 or 1
         //
         verifyException("org.joda.time.field.ScaledDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      ScaledDurationField scaledDurationField0 = null;
      try {
        scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The scalar must not be 0 or 1
         //
         verifyException("org.joda.time.field.ScaledDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1179);
      long long0 = scaledDurationField0.getValueAsLong((-18L), (-890L));
      assertEquals(1179, scaledDurationField0.getScalar());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 218);
      long long0 = scaledDurationField0.getMillis(1, (long) 1);
      assertEquals(18835200000L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 218);
      int int0 = scaledDurationField0.getDifference(2083L, 3208L);
      assertEquals(218, scaledDurationField0.getScalar());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.minutes();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-800));
      long long0 = scaledDurationField0.getMillis((long) 1, 2626L);
      assertEquals((-48000000L), long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 218);
      long long0 = scaledDurationField0.add((long) 218, (-1183));
      assertEquals((-22282041599782L), long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 218);
      long long0 = scaledDurationField0.add(0L, (long) 1);
      assertEquals(18835200000L, long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 218);
      long long0 = scaledDurationField0.getValueAsLong(0L);
      assertEquals(0L, long0);
      assertEquals(218, scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, (-1911));
      // Undeclared exception!
      try { 
        scaledDurationField0.getValue(2629800000L, (long) 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2629800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, (-1911));
      scaledDurationField0.hashCode();
      assertEquals((-1911), scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 218);
      int int0 = scaledDurationField0.getScalar();
      assertEquals(218, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.minutes();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-800));
      int int0 = scaledDurationField0.getValue((-1321L));
      assertEquals(0, int0);
      assertEquals((-800), scaledDurationField0.getScalar());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 218);
      long long0 = scaledDurationField0.getDifferenceAsLong(31556952000L, (-22282041599782L));
      assertEquals(1184L, long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.minutes();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-800));
      long long0 = scaledDurationField0.getMillis((-343L));
      assertEquals(16464000000L, long0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.centuries();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1179);
      // Undeclared exception!
      try { 
        scaledDurationField0.getMillis(12825000);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 15120675000 * 3155695200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
