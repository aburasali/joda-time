/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 03:04:59 GMT 2019
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.DelegatedDurationField;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.StrictDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DelegatedDateTimeField_ESTest extends DelegatedDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 482);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, unsupportedDurationField0);
      unsupportedDateTimeField0.getLeapDurationField();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dividedDateTimeField0, (DurationField) null, dateTimeFieldType0);
      delegatedDateTimeField0.getMaximumValue((-3720L));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      zoneInfoProvider0.getZone((String) null);
      Chronology chronology0 = ethiopicChronology0.withZone((DateTimeZone) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, dateTimeField0, 0);
      skipUndoDateTimeField0.getDifference(1, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      lenientDateTimeField0.getRangeDurationField();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      timeZone0.toZoneId();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology.getInstance(dateTimeZone1);
      lenientDateTimeField0.add(407L, 0);
      lenientDateTimeField0.getLeapDurationField();
      Duration duration0 = new Duration(1, 0);
      DateTimeZone.forOffsetHoursMinutes(1, 0);
      Locale locale0 = new Locale(")(=J%*Ay|9`", "org/joda/time/tz/data", "org/joda/time/tz/data");
      lenientDateTimeField0.getAsText(1, locale0);
      lenientDateTimeField0.getAsShortText((long) 1, locale0);
      lenientDateTimeField0.roundHalfEven(1L);
      lenientDateTimeField0.getWrappedField();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      lenientDateTimeField0.getAsShortText((ReadablePartial) yearMonth0, 1, locale0);
      lenientDateTimeField0.getMaximumValue((ReadablePartial) yearMonth0);
      // Undeclared exception!
      try { 
        lenientDateTimeField0.getAsText((-9223372036854775808L), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      DurationField durationField0 = durationFieldType0.getField(strictChronology0);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(unsupportedDateTimeField0, strictChronology0);
      Locale locale0 = new Locale("");
      // Undeclared exception!
      try { 
        lenientDateTimeField0.getAsShortText((-1311), locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(buddhistChronology0, dateTimeField0);
      Locale locale0 = Locale.KOREAN;
      skipDateTimeField0.getAsShortText(1, locale0);
      skipDateTimeField0.toString();
      MockDate mockDate0 = new MockDate((-448), 1, 1114, 1, (-448));
      mockDate0.toInstant();
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      skipDateTimeField0.getAsText((ReadablePartial) localTime0, 1, locale0);
      int[] intArray0 = new int[5];
      localTime0.plusHours(0);
      intArray0[0] = (-448);
      intArray0[1] = 1;
      intArray0[2] = 1114;
      intArray0[3] = (-448);
      skipDateTimeField0.get(1);
      skipDateTimeField0.isSupported();
      intArray0[4] = 1114;
      // Undeclared exception!
      try { 
        skipDateTimeField0.set((ReadablePartial) localTime0, (-448), intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -448
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(buddhistChronology0, dateTimeField0);
      Locale locale0 = Locale.KOREAN;
      String string0 = skipDateTimeField0.getAsShortText(1, locale0);
      assertEquals("1", string0);
      
      String string1 = skipDateTimeField0.toString();
      assertEquals("DateTimeField[secondOfDay]", string1);
      
      MockDate mockDate0 = new MockDate(1, 1, 1119, 1, 1);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      String string2 = skipDateTimeField0.getAsText((ReadablePartial) localTime0, 1, locale0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1119;
      intArray0[3] = 1;
      intArray0[4] = 1119;
      skipDateTimeField0.set((ReadablePartial) localTime0, 1, intArray0, 0);
      assertArrayEquals(new int[] {1, 0, 59, 1, 1119}, intArray0);
      
      String string3 = skipDateTimeField0.getAsText(1, locale0);
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      Chronology chronology0 = instant0.getChronology();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, dateTimeField0);
      Locale locale0 = Locale.ITALIAN;
      skipUndoDateTimeField0.roundHalfCeiling(1);
      skipUndoDateTimeField0.getAsText((long) 1, locale0);
      skipUndoDateTimeField0.getMaximumValue((-2973L));
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      locale0.getDisplayVariant();
      intArray0[1] = (-1988);
      intArray0[2] = 1;
      intArray0[3] = 1439;
      intArray0[4] = (-1988);
      intArray0[7] = 1;
      intArray0[8] = 1439;
      skipUndoDateTimeField0.addWrapPartial((ReadablePartial) null, (-1988), intArray0, 0);
      skipUndoDateTimeField0.set((long) 1439, "0", locale0);
      skipUndoDateTimeField0.getMaximumShortTextLength(locale0);
      skipUndoDateTimeField0.getMaximumValue((ReadablePartial) null);
      skipUndoDateTimeField0.getAsShortText((long) 0, locale0);
      skipUndoDateTimeField0.getAsShortText((ReadablePartial) null, (-1988), locale0);
      long long0 = skipUndoDateTimeField0.set((long) 0, "0");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DurationField durationField0 = lenientDateTimeField0.getRangeDurationField();
      assertNotNull(durationField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      timeZone0.toZoneId();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology.getInstance(dateTimeZone1);
      long long0 = lenientDateTimeField0.add(407L, 0);
      assertEquals(407L, long0);
      
      lenientDateTimeField0.getLeapDurationField();
      Instant instant0 = new Instant();
      Instant instant1 = instant0.toInstant();
      Duration duration0 = new Duration(1, 0);
      Instant instant2 = instant1.withDurationAdded((ReadableDuration) duration0, (-818));
      Instant instant3 = instant2.withDurationAdded((-2920L), 0);
      Instant instant4 = instant3.minus((ReadableDuration) duration0);
      dateTimeZone1.getOffset((ReadableInstant) instant4);
      Locale locale0 = new Locale(")(=J%*Ay|9`", "org/joda/time/tz/data", "org/joda/time/tz/data");
      buddhistChronology0.equals("Wnt\"h6.d l),");
      String string0 = lenientDateTimeField0.getAsText(1, locale0);
      String string1 = lenientDateTimeField0.getAsShortText((long) 1, locale0);
      assertTrue(string1.equals((Object)string0));
      
      long long1 = lenientDateTimeField0.roundHalfEven(1L);
      lenientDateTimeField0.getWrappedField();
      long long2 = lenientDateTimeField0.roundHalfFloor(1L);
      assertTrue(long2 == long1);
      assertEquals(1L, long2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      YearMonth yearMonth0 = new YearMonth(3600000L);
      int int0 = 0;
      int[] intArray0 = new int[0];
      String string0 = "DateTimeField[";
      delegatedDateTimeField0.addWrapPartial(yearMonth0, (-292275054), intArray0, 0);
      int int1 = 44;
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(0, 0, 1, 0, 2860, 0, 44, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.joda.time.field.DelegatedDateTimeField");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0);
      delegatedDateTimeField0.getWrappedField();
      delegatedDateTimeField0.getDifference(1, 690L);
      delegatedDateTimeField0.getDifference(0L, 15778476000L);
      delegatedDateTimeField0.getDurationField();
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set(15778476000L, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value null for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      buddhistChronology0.clockhourOfHalfday();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      dateTimeZone0.equals(gJChronology0);
      LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone1);
      dateTimeZone1.equals(1);
      int[] intArray0 = new int[1];
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleKeys();
      lenientDateTimeField0.getAsText((ReadablePartial) localDate0, 0, locale0);
      localDate0.getEra();
      intArray0[0] = 1;
      lenientDateTimeField0.getMaximumValue((ReadablePartial) localDate0, intArray0);
      BuddhistChronology.getInstance();
      dateTimeZone0.adjustOffset(0L, false);
      long long0 = (-2110L);
      // Undeclared exception!
      try { 
        lenientDateTimeField0.add(0L, (-2110L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      long long0 = lenientDateTimeField0.add((long) 1, 1);
      assertEquals(31536000001L, long0);
      
      intArray0[2] = 1;
      intArray0[3] = 1;
      lenientDateTimeField0.getMaximumValue();
      intArray0[4] = 1;
      lenientDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      lenientDateTimeField0.roundFloor(1);
      lenientDateTimeField0.getMinimumValue();
      lenientDateTimeField0.getMaximumValue((long) (-292268511));
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.ITALY;
      locale0.getDisplayScript(locale1);
      Locale.setDefault(locale0);
      String string0 = lenientDateTimeField0.toString();
      assertEquals("DateTimeField[year]", string0);
      
      String string1 = lenientDateTimeField0.getAsShortText((-1L), locale0);
      assertEquals("2512", string1);
      
      long long1 = lenientDateTimeField0.set((long) 1, "2512", locale0);
      assertEquals((-31535999999L), long1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      DurationField durationField0 = buddhistChronology0.weeks();
      DateTimeFieldType.secondOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, (DateTimeFieldType) null);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.roundHalfCeiling(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      lenientDateTimeField0.add((long) 1, 1);
      intArray0[2] = 1;
      intArray0[3] = 1;
      lenientDateTimeField0.getMaximumValue();
      intArray0[4] = 1;
      lenientDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      lenientDateTimeField0.roundFloor(1);
      lenientDateTimeField0.getMinimumValue();
      lenientDateTimeField0.getMaximumValue((long) (-292268511));
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.ITALY;
      locale0.getDisplayScript(locale1);
      Locale.setDefault(locale0);
      lenientDateTimeField0.toString();
      lenientDateTimeField0.getAsShortText((-1L), locale0);
      // Undeclared exception!
      try { 
        lenientDateTimeField0.set((ReadablePartial) null, 0, intArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      DurationField durationField0 = buddhistChronology0.weeks();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      long long0 = delegatedDateTimeField0.roundHalfCeiling(1);
      delegatedDateTimeField0.getMaximumTextLength((Locale) null);
      delegatedDateTimeField0.getLeapDurationField();
      DateTimeZone.forOffsetHoursMinutes(1, 3);
      delegatedDateTimeField0.roundHalfFloor(1);
      MonthDay monthDay0 = new MonthDay((Chronology) buddhistChronology0);
      delegatedDateTimeField0.add((ReadablePartial) monthDay0, 0, (int[]) null, 0);
      delegatedDateTimeField0.getAsShortText((-1253), (Locale) null);
      delegatedDateTimeField0.remainder((-259200000L));
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 1;
      intArray0[6] = 3;
      long long1 = delegatedDateTimeField0.roundHalfFloor((-31L));
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      Locale locale0 = Locale.US;
      strictDateTimeField0.getAsText(1, locale0);
      LocalDate localDate0 = new LocalDate(1351L);
      LocalDate localDate1 = localDate0.withYearOfCentury(1);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-97);
      intArray0[3] = 1;
      intArray0[4] = (-97);
      intArray0[5] = (-97);
      intArray0[6] = (-1849);
      intArray0[7] = 0;
      intArray0[8] = 1;
      // Undeclared exception!
      try { 
        strictDateTimeField0.set((ReadablePartial) localDate1, (-97), intArray0, "1", locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -97
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      MonthDay monthDay0 = new MonthDay((-1L));
      Period period0 = new Period(monthDay0, monthDay0);
      Period period1 = Period.months(1);
      period0.minus(period1);
      Period period2 = period0.plusMonths(0);
      buddhistChronology0.add((ReadablePeriod) period2, (-1L), 0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-1), 608, 0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(offsetDateTimeField0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      String string0 = delegatedDateTimeField0.getAsText(608, locale0);
      assertEquals("608", string0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      DurationField durationField0 = delegatedDateTimeField0.getRangeDurationField();
      assertNotNull(durationField0);
      
      delegatedDateTimeField0.getLeapAmount(1);
      long long0 = delegatedDateTimeField0.getDifferenceAsLong(100000000000L, 1);
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      lenientDateTimeField0.getRangeDurationField();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      timeZone0.toZoneId();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology.getInstance(dateTimeZone1);
      lenientDateTimeField0.add(407L, 0);
      lenientDateTimeField0.getLeapDurationField();
      Instant instant0 = new Instant();
      Instant instant1 = instant0.toInstant();
      Duration duration0 = new Duration(1, 0);
      Instant instant2 = instant1.withDurationAdded((ReadableDuration) duration0, (-818));
      Instant instant3 = instant2.withDurationAdded((-2920L), 0);
      Instant instant4 = instant3.minus((ReadableDuration) duration0);
      dateTimeZone1.getOffset((ReadableInstant) instant4);
      Locale locale0 = new Locale(")(=J%*Ay|9`", "org/joda/time/tz/data", "org/joda/time/tz/data");
      buddhistChronology0.equals("Wnt\"h6.d l),");
      lenientDateTimeField0.getAsText(1, locale0);
      lenientDateTimeField0.getAsShortText((long) 1, locale0);
      lenientDateTimeField0.roundHalfEven(1L);
      boolean boolean0 = lenientDateTimeField0.isLenient();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      delegatedDateTimeField0.roundHalfFloor(1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1577);
      intArray0[1] = 1;
      intArray0[4] = 1;
      intArray0[5] = (-1577);
      intArray0[6] = (-1577);
      int[] intArray1 = delegatedDateTimeField0.addWrapPartial(localTime0, (-1577), intArray0, 0);
      delegatedDateTimeField0.getDifferenceAsLong(0L, 0L);
      delegatedDateTimeField0.add((ReadablePartial) localTime0, (-1577), intArray1, 0);
      delegatedDateTimeField0.isLenient();
      delegatedDateTimeField0.getMaximumValue((long) 1);
      delegatedDateTimeField0.set(0L, 0);
      int int0 = delegatedDateTimeField0.getLeapAmount((-512L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      Locale locale0 = Locale.TAIWAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      mockGregorianCalendar0.getMaximum(0);
      localDate0.plusYears(1685);
      int[] intArray0 = new int[8];
      intArray0[1] = 1685;
      intArray0[3] = 1685;
      intArray0[4] = 1054;
      intArray0[5] = 1685;
      intArray0[6] = 1685;
      Locale locale1 = Locale.KOREA;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, (-756), 8);
      DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      long long0 = delegatedDateTimeField0.add(0L, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      Chronology chronology0 = instant0.getChronology();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, dateTimeField0);
      Locale locale0 = Locale.ITALIAN;
      skipUndoDateTimeField0.roundHalfCeiling(1);
      skipUndoDateTimeField0.getAsText((long) 1, locale0);
      skipUndoDateTimeField0.getMaximumValue();
      skipUndoDateTimeField0.getMaximumValue((-2973L));
      ReadablePartial readablePartial0 = null;
      locale0.getDisplayLanguage();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      locale0.getDisplayVariant();
      intArray0[1] = 1439;
      intArray0[2] = 1439;
      intArray0[3] = 1439;
      intArray0[4] = (-1988);
      intArray0[5] = 1439;
      intArray0[6] = 1439;
      intArray0[7] = 1439;
      intArray0[6] = 1439;
      skipUndoDateTimeField0.addWrapPartial((ReadablePartial) null, (-1988), intArray0, 0);
      skipUndoDateTimeField0.set((long) 0, "0", locale0);
      skipUndoDateTimeField0.getMaximumShortTextLength(locale0);
      skipUndoDateTimeField0.getMaximumValue((ReadablePartial) null);
      skipUndoDateTimeField0.getAsShortText((long) 1439, locale0);
      skipUndoDateTimeField0.getAsShortText((ReadablePartial) null, (-1988), locale0);
      skipUndoDateTimeField0.getMaximumShortTextLength(locale0);
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.set((long) 1439, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for minuteOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3311));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = gregorianChronology0.withZone(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, dateTimeField0);
      skipUndoDateTimeField0.isLeap(0L);
      skipUndoDateTimeField0.isLenient();
      long long0 = skipUndoDateTimeField0.add((-2429L), (-731));
      assertEquals((-23067072002429L), long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = (-1);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = null;
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, (DurationField) null, (DateTimeFieldType) null);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) mutablePeriod0);
      // Undeclared exception!
      try { 
        localDateTime1.withEra((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      lenientDateTimeField0.getMaximumValue();
      intArray0[4] = 1;
      lenientDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      lenientDateTimeField0.roundFloor(1);
      lenientDateTimeField0.getMinimumValue();
      lenientDateTimeField0.getMaximumValue((long) (-292268511));
      Locale locale0 = Locale.CHINESE;
      Locale.setDefault(locale0);
      lenientDateTimeField0.getMaximumTextLength(locale0);
      lenientDateTimeField0.toString();
      lenientDateTimeField0.getMaximumShortTextLength(locale0);
      lenientDateTimeField0.getAsShortText((-1L), locale0);
      DurationField durationField0 = lenientDateTimeField0.getRangeDurationField();
      assertNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      BuddhistChronology.getInstance();
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      lenientDateTimeField0.getMaximumValue();
      intArray0[4] = 1;
      lenientDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      lenientDateTimeField0.roundFloor(1);
      lenientDateTimeField0.getMinimumValue();
      lenientDateTimeField0.getMaximumValue((long) (-292268511));
      Locale locale0 = Locale.CHINESE;
      Locale.setDefault(locale0);
      lenientDateTimeField0.getMaximumTextLength(locale0);
      lenientDateTimeField0.toString();
      lenientDateTimeField0.getMaximumShortTextLength(locale0);
      lenientDateTimeField0.getAsShortText((-1L), locale0);
      lenientDateTimeField0.add((long) 1, 1);
      // Undeclared exception!
      try { 
        lenientDateTimeField0.getAsShortText((ReadablePartial) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(unsupportedDateTimeField0);
      Object object0 = new Object();
      buddhistChronology0.equals(object0);
      strictDateTimeField0.add(1L, (long) 1);
      strictDateTimeField0.getDifferenceAsLong(0L, 62035200000L);
      LocalDate localDate0 = new LocalDate((-38L));
      LocalTime localTime0 = new LocalTime(1, 1);
      Hours hours0 = Hours.SIX;
      int int0 = 0;
      LocalTime localTime1 = localTime0.withPeriodAdded(hours0, 0);
      int int1 = (-431);
      // Undeclared exception!
      try { 
        localTime1.withMillisOfDay((-431));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -431 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(dateTimeField0);
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField1, buddhistChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      dateTimeZone0.equals(gJChronology0);
      LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone1);
      Integer integer0 = new Integer(1);
      dateTimeZone1.equals(integer0);
      int[] intArray0 = new int[1];
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleKeys();
      lenientDateTimeField0.getAsText((ReadablePartial) localDate0, 0, locale0);
      localDate0.getEra();
      intArray0[0] = 1;
      lenientDateTimeField0.getMaximumValue((ReadablePartial) localDate0, intArray0);
      BuddhistChronology.getInstance();
      dateTimeZone0.adjustOffset(0L, false);
      long long0 = (-2110L);
      lenientDateTimeField0.add(0L, (-2110L));
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        lenientDateTimeField0.addWrapPartial(localDate0, 1, (int[]) null, (-23));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      delegatedDateTimeField0.addWrapField((long) 1, 1);
      delegatedDateTimeField0.getMaximumValue(1001L);
      LocalTime localTime0 = new LocalTime((long) 1);
      LocalTime localTime1 = localTime0.plusSeconds(59);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 0;
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalTime.now(dateTimeZone0);
      intArray0[8] = 59;
      delegatedDateTimeField0.add((ReadablePartial) localTime1, 0, intArray0, 0);
      delegatedDateTimeField0.getLeapDurationField();
      delegatedDateTimeField0.getLeapDurationField();
      delegatedDateTimeField0.isSupported();
      delegatedDateTimeField0.getWrappedField();
      LocalDateTime localDateTime0 = new LocalDateTime(1001L);
      LocalDateTime localDateTime1 = localDateTime0.withTime(0, 0, 0, 0);
      delegatedDateTimeField0.getMinimumValue((ReadablePartial) localDateTime1);
      delegatedDateTimeField0.remainder(1010L);
      delegatedDateTimeField0.getLeapAmount((-1612L));
      delegatedDateTimeField0.addWrapField((ReadablePartial) localTime0, 1, intArray0, (-322));
      assertArrayEquals(new int[] {1, 39, 1, 1, 1, 1, 1, 0, 59}, intArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      MonthDay monthDay0 = new MonthDay((-1L));
      Period period0 = new Period(monthDay0, monthDay0);
      Period period1 = period0.plusMonths((-2331));
      buddhistChronology0.add((ReadablePeriod) period1, (-1L), 0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-1), 608, 0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(offsetDateTimeField0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      delegatedDateTimeField0.getAsText(608, locale0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2331);
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.addWrapPartial(monthDay0, 1, intArray0, (-114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Fields invalid for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeZone.getProvider();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      long long0 = strictDateTimeField0.set((long) 1, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      UnsupportedDurationField.getInstance(durationFieldType0);
      DateTimeFieldType.weekyear();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      long long0 = strictDateTimeField0.remainder((-1191L));
      assertEquals((-1191L), long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 822;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(822);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = iSOChronology0.withUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeZone.getProvider();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0, 1);
      Object object0 = new Object();
      buddhistChronology0.equals(object0);
      skipDateTimeField0.getDifference(643L, 822);
      skipDateTimeField0.addWrapField((long) 0, 4716);
      skipDateTimeField0.roundCeiling(0L);
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: org/joda/time/tz/data
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(julianChronology0, delegatedDateTimeField0, (-1904));
      skipDateTimeField0.getAsText(0L);
      skipDateTimeField0.isSupported();
      delegatedDateTimeField0.set((long) (-1904), "13");
      delegatedDateTimeField0.getMaximumValue((long) (-1904));
      delegatedDateTimeField0.getRangeDurationField();
      delegatedDateTimeField0.getType();
      boolean boolean1 = delegatedDateTimeField0.isSupported();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      MonthDay monthDay0 = new MonthDay((-1L));
      Period period0 = new Period((-1L), 1);
      Period period1 = period0.plusMonths((-2331));
      buddhistChronology0.add((ReadablePeriod) period1, (-1L), 0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-1), 608, 0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(offsetDateTimeField0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      delegatedDateTimeField0.getAsText(608, locale0);
      delegatedDateTimeField0.getMaximumValue();
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.getAsText((ReadablePartial) monthDay0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      lenientDateTimeField0.add((long) 1, 1);
      intArray0[2] = 1;
      intArray0[3] = 1;
      lenientDateTimeField0.getMaximumValue();
      intArray0[4] = 1;
      lenientDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      lenientDateTimeField0.roundFloor(1);
      lenientDateTimeField0.getMinimumValue();
      lenientDateTimeField0.getMaximumValue((long) (-292268511));
      Locale locale0 = Locale.CHINESE;
      Locale.setDefault(locale0);
      lenientDateTimeField0.getMaximumTextLength(locale0);
      lenientDateTimeField0.toString();
      lenientDateTimeField0.getMaximumShortTextLength(locale0);
      Locale.forLanguageTag("DateTimeField[year]");
      lenientDateTimeField0.getAsShortText((-1L), locale0);
      lenientDateTimeField0.roundHalfFloor((-292268511));
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1, (Chronology) buddhistChronology0);
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 292279536;
      // Undeclared exception!
      try { 
        lenientDateTimeField0.set((ReadablePartial) localDateTime0, (-292268511), intArray1, 434);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -292268511
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      Chronology chronology0 = instant0.getChronology();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, dateTimeField0);
      Locale locale0 = Locale.ITALIAN;
      skipUndoDateTimeField0.roundHalfCeiling(1);
      String string0 = skipUndoDateTimeField0.getAsText((long) 1, locale0);
      assertEquals("0", string0);
      
      skipUndoDateTimeField0.getMaximumValue();
      skipUndoDateTimeField0.getMaximumValue((-2973L));
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      locale0.getDisplayVariant();
      intArray0[1] = 1439;
      intArray0[2] = 1439;
      intArray0[3] = 1439;
      intArray0[4] = (-1988);
      intArray0[5] = 1439;
      intArray0[6] = 1439;
      intArray0[7] = 1;
      intArray0[8] = 1439;
      skipUndoDateTimeField0.addWrapPartial((ReadablePartial) null, (-1988), intArray0, 0);
      long long0 = skipUndoDateTimeField0.set((long) 1439, "0", locale0);
      assertEquals(1439L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      delegatedDateTimeField0.addWrapField((long) 1, (-188));
      delegatedDateTimeField0.getMaximumValue(52001L);
      LocalTime localTime0 = new LocalTime((long) (-188));
      LocalTime localTime1 = localTime0.plusSeconds(59);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (-188);
      intArray0[2] = (-188);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (-188);
      intArray0[7] = 0;
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalTime.now(dateTimeZone0);
      intArray0[8] = 59;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.add((ReadablePartial) localTime1, 0, intArray0, (-26));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      Chronology chronology0 = iSOChronology0.withZone((DateTimeZone) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, dateTimeField0, (-340));
      skipUndoDateTimeField0.getMinimumValue(10000000000L);
      skipUndoDateTimeField0.roundCeiling((-292268511));
      skipUndoDateTimeField0.getDurationField();
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.set(0L, "D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"D\" for weekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      Chronology chronology0 = lenientChronology0.withUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, dateTimeField0);
      LocalTime.fromMillisOfDay((long) 1);
      int int0 = 86400000;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.isLeap((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      strictDateTimeField0.getAsText((long) 1);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      Locale locale0 = Locale.ENGLISH;
      locale0.hasExtensions();
      // Undeclared exception!
      try { 
        strictDateTimeField0.getAsShortText((ReadablePartial) monthDay0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'year' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      System.setCurrentTimeMillis(10000L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      DurationField durationField0 = offsetDateTimeField0.getDurationField();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      DurationField durationField1 = delegatedDateTimeField0.getRangeDurationField();
      delegatedDateTimeField0.getMaximumValue();
      long long0 = delegatedDateTimeField0.addWrapField(1L, 1439);
      assertSame(durationField0, durationField1);
      assertEquals(86340001L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) null, dateTimeField0, 1);
      long long0 = skipUndoDateTimeField0.remainder((-2955L));
      assertEquals(86397045L, long0);
      
      skipUndoDateTimeField0.getDurationField();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(1);
      LocalDateTime localDateTime2 = localDateTime1.withYearOfCentury(1);
      Minutes minutes0 = Minutes.ONE;
      LocalDateTime localDateTime3 = localDateTime2.plus((ReadablePeriod) minutes0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-82);
      intArray0[3] = 1;
      intArray0[4] = (-82);
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.set((ReadablePartial) localDateTime3, (-82), intArray0, (-151));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -151 for dayOfYear must be in the range [1,366]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) null, dateTimeField0, 1);
      skipDateTimeField0.add((long) 1, 0L);
      LocalTime localTime0 = new LocalTime((Object) null, (DateTimeZone) null);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2005);
      intArray0[1] = (-2005);
      intArray0[2] = 1;
      intArray0[3] = (-292275054);
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (-2005);
      intArray0[7] = (-2005);
      // Undeclared exception!
      try { 
        skipDateTimeField0.add((ReadablePartial) localTime0, (-2005), intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2005
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      lenientDateTimeField0.getMinimumValue((-2352L));
      dateTimeZone0.getName(11L, (Locale) null);
      lenientDateTimeField0.getMinimumValue((-2352L));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      lenientDateTimeField0.remainder(1);
      lenientDateTimeField0.getDurationField();
      ReadablePartial readablePartial0 = null;
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 533;
      intArray0[3] = 1;
      // Undeclared exception!
      try { 
        lenientDateTimeField0.add((ReadablePartial) null, 1, intArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      delegatedDateTimeField0.getMaximumShortTextLength(locale0);
      delegatedDateTimeField0.isSupported();
      delegatedDateTimeField0.getLeapAmount(9);
      Partial partial0 = new Partial(buddhistChronology0);
      Weeks weeks0 = Weeks.ZERO;
      Partial partial1 = partial0.minus(weeks0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      Partial partial2 = partial1.without(dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      // Undeclared exception!
      try { 
        partial2.withField(dateTimeFieldType1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyear' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("1~L(Xvp1,\\p");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)121;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      Days days0 = Days.THREE;
      Hours hours0 = days0.toStandardHours();
      buddhistChronology0.add((ReadablePeriod) hours0, 1584L, (-1897));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      delegatedDateTimeField0.roundHalfEven(1);
      delegatedDateTimeField0.roundHalfCeiling(691L);
      delegatedDateTimeField0.getLeapDurationField();
      delegatedDateTimeField0.getLeapAmount(0L);
      Locale locale0 = new Locale("Q4w!A");
      locale0.hasExtensions();
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set(2592000000L, (String) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value null for year is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = 1313L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(1313L);
      mutableDateTime0.getRoundingField();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 5);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, delegatedDurationField0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DateTimeField[");
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      DelegatedDateTimeField delegatedDateTimeField0 = null;
      try {
        delegatedDateTimeField0 = new DelegatedDateTimeField((DateTimeField) null, delegatedDurationField0, dateTimeFieldType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 28181250);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(buddhistChronology0, dividedDateTimeField0);
      LocalDateTime localDateTime0 = new LocalDateTime((-1532L));
      int int0 = skipDateTimeField0.getMinimumValue((ReadablePartial) localDateTime0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(lenientChronology0);
      Chronology chronology0 = strictChronology0.withZone((DateTimeZone) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      DurationField durationField0 = buddhistChronology0.days();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      buddhistChronology0.toString();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      int int0 = 0;
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, delegatedDateTimeField0, 0);
      skipUndoDateTimeField0.get(1);
      skipUndoDateTimeField0.roundCeiling((-1477L));
      skipUndoDateTimeField0.roundFloor(1);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set((long) 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfCentury must be in the range [1,100]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0, 2825);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 2825;
      intArray0[4] = 2825;
      int int0 = skipDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(iSOChronology0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(iSOChronology0, strictDateTimeField0);
      skipUndoDateTimeField0.getMaximumValue(0L);
      skipUndoDateTimeField0.set(0L, (-382));
      strictDateTimeField0.getName();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-382));
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      YearMonth yearMonth1 = yearMonth0.minusYears((-382));
      YearMonth yearMonth2 = yearMonth1.withChronologyRetainFields(iSOChronology0);
      yearMonth1.get(dateTimeFieldType0);
      Locale locale0 = Locale.CANADA;
      strictDateTimeField0.roundHalfFloor(1);
      strictDateTimeField0.getAsText((ReadablePartial) yearMonth2, locale0);
      strictDateTimeField0.getAsShortText((-2008L));
      strictDateTimeField0.roundHalfEven(292278993);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-1054);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.addWrapField((ReadablePartial) yearMonth2, (-407), intArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -407
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-16));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      offsetDateTimeField0.roundHalfCeiling(0L);
      dateTimeFieldType0.getField(buddhistChronology0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      int[] intArray0 = new int[2];
      intArray0[0] = (-16);
      intArray0[1] = 1;
      delegatedDateTimeField0.getMinimumValue((ReadablePartial) localDateTime0, intArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.lookup(linkedList0, linkedHashSet0);
      delegatedDateTimeField0.getAsText((-16), (Locale) null);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.addWrapField((ReadablePartial) localDateTime0, (-16), intArray0, (-16));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DurationField durationField0 = delegatedDateTimeField0.getDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(dateTimeField0);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(copticChronology0, dateTimeField1);
      skipUndoDateTimeField0.roundHalfFloor(1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DateTimeField[");
      copticChronology0.add(1544L, (-2778L), 1);
      dateTimeZone0.getStandardOffset((-2014L));
      skipUndoDateTimeField0.getName();
      Locale locale0 = Locale.JAPAN;
      skipUndoDateTimeField0.getAsShortText((-1), locale0);
      skipUndoDateTimeField0.getMinimumValue();
      skipUndoDateTimeField0.roundHalfEven((-2922684));
      skipUndoDateTimeField0.getName();
      try { 
        buddhistChronology0.getDateTimeMillis(0, 0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      DurationField durationField0 = buddhistChronology0.weeks();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      delegatedDateTimeField0.roundHalfCeiling(1);
      Locale locale0 = null;
      delegatedDateTimeField0.getMaximumTextLength((Locale) null);
      delegatedDateTimeField0.getLeapDurationField();
      LocalDate localDate0 = new LocalDate(1, 1, 3, buddhistChronology0);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.addWrapField((ReadablePartial) localDate0, 1, (int[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      delegatedDateTimeField0.addWrapField((long) 1, (-188));
      int int0 = delegatedDateTimeField0.getMaximumValue(52001L);
      LocalTime localTime0 = new LocalTime((long) (-188));
      LocalTime localTime1 = localTime0.plusSeconds(59);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (-188);
      intArray0[2] = (-188);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (-188);
      intArray0[7] = 0;
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalTime.now(dateTimeZone0);
      intArray0[8] = 59;
      delegatedDateTimeField0.add((ReadablePartial) localTime1, 0, intArray0, 0);
      delegatedDateTimeField0.getLeapDurationField();
      delegatedDateTimeField0.getLeapDurationField();
      delegatedDateTimeField0.isSupported();
      delegatedDateTimeField0.getWrappedField();
      LocalDateTime localDateTime0 = new LocalDateTime(52001L);
      LocalDateTime localDateTime1 = localDateTime0.withTime(0, 0, 0, 0);
      delegatedDateTimeField0.getMinimumValue((ReadablePartial) localDateTime1);
      delegatedDateTimeField0.remainder(1010L);
      int int1 = delegatedDateTimeField0.getLeapAmount((-1612L));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      strictDateTimeField0.getLeapAmount(1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      strictDateTimeField0.getAsText((-602L), locale0);
      strictDateTimeField0.roundHalfEven((-602L));
      strictDateTimeField0.isSupported();
      Object object0 = new Object();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) null, dateTimeField0);
      LocalTime localTime0 = new LocalTime(1, 1);
      localTime0.withMillisOfSecond(1);
      int int0 = skipUndoDateTimeField0.getMinimumValue((ReadablePartial) localTime0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime();
      Minutes minutes0 = Minutes.ZERO;
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(minutes0, 1358);
      LocalDateTime localDateTime2 = localDateTime1.plusSeconds(1358);
      LocalDateTime localDateTime3 = localDateTime2.plus((ReadablePeriod) minutes0);
      gJChronology0.set(localDateTime3, 1358);
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0, 45);
      skipDateTimeField0.getLeapAmount(0L);
      skipDateTimeField0.getAsShortText(0L);
      skipDateTimeField0.getMinimumValue();
      int[] intArray0 = new int[2];
      intArray0[0] = 1358;
      intArray0[1] = 0;
      int int0 = skipDateTimeField0.getMinimumValue((ReadablePartial) localDateTime0, intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone((String) null);
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      LocalDate localDate0 = new LocalDate((Chronology) buddhistChronology0);
      Date date0 = localDate0.toDate();
      YearMonth.fromDateFields(date0);
      yearMonth0.withYear((-2789));
      delegatedDateTimeField0.getMaximumValue((ReadablePartial) yearMonth0);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set((long) 0, "&,kUd}9QnL&'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"&,kUd}9QnL&'\" for hourOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Chronology chronology0 = islamicChronology0.withUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0);
      LocalTime localTime0 = new LocalTime(chronology0);
      LocalTime localTime1 = localTime0.minusSeconds(1);
      int int0 = skipDateTimeField0.getMaximumValue((ReadablePartial) localTime1);
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      // Undeclared exception!
      try { 
        lenientDateTimeField0.set((long) 1, "org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org/joda/time/tz/data\" for weekyearOfCentury is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(dateTimeField0);
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField1, buddhistChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      dateTimeZone0.equals(gJChronology0);
      LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone1);
      Integer integer0 = new Integer(1);
      dateTimeZone1.equals(integer0);
      int[] intArray0 = new int[1];
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleKeys();
      lenientDateTimeField0.getAsText((ReadablePartial) localDate0, 0, locale0);
      localDate0.getEra();
      intArray0[0] = 1;
      lenientDateTimeField0.getMaximumValue((ReadablePartial) localDate0, intArray0);
      BuddhistChronology.getInstance();
      dateTimeZone0.adjustOffset(0L, false);
      long long0 = (-2110L);
      lenientDateTimeField0.add(0L, (-2110L));
      lenientDateTimeField0.addWrapPartial(localDate0, 1, (int[]) null, 0);
      // Undeclared exception!
      try { 
        lenientDateTimeField0.set((ReadablePartial) localDate0, 1, (int[]) null, "c?", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"c?\" for clockhourOfHalfday is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      delegatedDateTimeField0.getMinimumValue();
      long long0 = delegatedDateTimeField0.remainder(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      LocalDate localDate1 = localDate0.plusYears(1);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      int int0 = delegatedDateTimeField0.getMaximumValue((ReadablePartial) localDate1, intArray0);
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) null, dateTimeField0, (-3853));
      long long0 = skipDateTimeField0.add((long) (-3853), 0L);
      assertEquals((-3853L), long0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      long long0 = lenientDateTimeField0.add((long) 1, 1);
      assertEquals(31536000001L, long0);
      
      intArray0[2] = 1;
      intArray0[3] = 1;
      lenientDateTimeField0.getMaximumValue();
      intArray0[4] = 1;
      lenientDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      lenientDateTimeField0.roundFloor(1);
      lenientDateTimeField0.getMinimumValue();
      lenientDateTimeField0.getMaximumValue((long) (-292268511));
      Locale locale0 = Locale.CHINESE;
      Locale.setDefault(locale0);
      lenientDateTimeField0.getMaximumTextLength(locale0);
      String string0 = lenientDateTimeField0.toString();
      assertEquals("DateTimeField[year]", string0);
      
      lenientDateTimeField0.getMaximumShortTextLength(locale0);
      String string1 = lenientDateTimeField0.getAsShortText((-1L), locale0);
      assertEquals("2512", string1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      // Undeclared exception!
      try { 
        strictDateTimeField0.set((long) 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for clockhourOfHalfday must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      int int0 = lenientDateTimeField0.get(2016L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DurationField durationField0 = buddhistChronology0.days();
      Years years0 = Years.MAX_VALUE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-2655));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, scaledDurationField0, dateTimeFieldType0);
      long long0 = delegatedDateTimeField0.roundFloor(1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(dateTimeField0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField1);
      long long0 = delegatedDateTimeField0.roundHalfCeiling(1209600000L);
      assertEquals(1209600000L, long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DurationField durationField0 = buddhistChronology0.centuries();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      int int0 = 58;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 58);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(remainderDateTimeField0);
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      int[] intArray0 = new int[6];
      intArray0[0] = 58;
      intArray0[1] = 1;
      localTime0.plusMillis(58);
      intArray0[2] = 1;
      intArray0[3] = 1963;
      intArray0[4] = 1;
      intArray0[5] = 58;
      buddhistChronology0.getZone();
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.addWrapPartial(localTime0, 58, intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 58
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      int int1 = 6928;
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(julianChronology0, dateTimeField0, 6928);
      skipUndoDateTimeField0.add(1L, 0L);
      skipUndoDateTimeField0.add(0L, 0L);
      skipUndoDateTimeField0.getMinimumValue();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((Object) buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.BuddhistChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) null, dateTimeField0);
      Locale locale0 = Locale.ROOT;
      skipDateTimeField0.getMaximumTextLength(locale0);
      LocalDate localDate0 = new LocalDate((Object) null);
      skipDateTimeField0.roundHalfFloor(3L);
      LocalDate localDate1 = localDate0.minusDays((-308));
      locale0.clone();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 9;
      // Undeclared exception!
      try { 
        skipDateTimeField0.set((ReadablePartial) localDate1, (-2780), intArray0, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for yearOfEra is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      YearMonth yearMonth0 = new YearMonth(3600000L);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set((ReadablePartial) yearMonth0, 0, intArray0, "DateTimeField[", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"DateTimeField[\" for millisOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) null, strictDateTimeField0, 0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      Period period0 = new Period(localDateTime0, localDateTime0);
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) period0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 834;
      intArray0[7] = 1;
      intArray0[8] = 0;
      int[] intArray1 = skipDateTimeField0.add((ReadablePartial) localDateTime1, 0, intArray0, 3);
      assertArrayEquals(new int[] {4, 1, 1, 1, 1, 0, 834, 1, 0}, intArray0);
      assertArrayEquals(new int[] {4, 1, 1, 1, 1, 0, 834, 1, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      int int0 = 80;
      buddhistChronology0.add((-160L), 84L, 80);
      delegatedDateTimeField0.roundHalfCeiling(2164L);
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set(378L, "org.joda.time.MutablePeriod", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.MutablePeriod\" for halfdayOfDay is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0, durationFieldType0);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, delegatedDurationField0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Chronology chronology0 = islamicChronology0.withUTC();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(unsupportedDateTimeField0, chronology0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        lenientDateTimeField0.addWrapField((ReadablePartial) localDate0, 0, (int[]) null, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // minuteOfHour field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DurationField durationField0 = buddhistChronology0.centuries();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType1);
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set((long) 1, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for millisOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
      dateTimeZone0.convertLocalToUTC((long) 1, false);
      Chronology chronology0 = lenientChronology0.withZone(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, dateTimeField0, 0);
      skipUndoDateTimeField0.isLenient();
      skipUndoDateTimeField0.roundHalfCeiling(1);
      int[] intArray0 = new int[0];
      int int0 = skipUndoDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      skipUndoDateTimeField0.add((ReadablePartial) null, 0, intArray0, 0);
      Locale locale0 = new Locale("org.joda.time.field.DelegatedDateTimeField");
      int int1 = skipUndoDateTimeField0.getMaximumTextLength(locale0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, millisDurationField0, dateTimeFieldType0);
      delegatedDateTimeField0.getMaximumValue();
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(32);
      LocalDateTime localDateTime2 = localDateTime1.withDayOfWeek(1);
      delegatedDateTimeField0.getAsText((ReadablePartial) localDateTime2, (Locale) null);
      delegatedDateTimeField0.getAsShortText(90L, (Locale) null);
      delegatedDateTimeField0.isSupported();
      DateTimeFieldType dateTimeFieldType1 = delegatedDateTimeField0.getType();
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      delegatedDateTimeField0.getMaximumValue((long) 1);
      dateTimeFieldType0.getRangeDurationType();
      delegatedDateTimeField0.getAsShortText((ReadablePartial) null, 0, (Locale) null);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.getAsText((ReadablePartial) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Chronology chronology0 = iSOChronology0.withZone((DateTimeZone) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0, 1);
      String string0 = skipDateTimeField0.getAsText((long) 1);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DelegatedDateTimeField delegatedDateTimeField0 = null;
      try {
        delegatedDateTimeField0 = new DelegatedDateTimeField((DateTimeField) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      int int0 = (-2495);
      dateTimeFieldType0.getDurationType();
      dateTimeFieldType0.getRangeDurationType();
      int int1 = 1430;
      int int2 = (-174);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2495), 1430, (-174));
      DurationField durationField0 = buddhistChronology0.millis();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(offsetDateTimeField0, durationField0, dateTimeFieldType0);
      delegatedDateTimeField0.isLenient();
      ReadablePartial readablePartial0 = null;
      offsetDateTimeField0.getAsText((ReadablePartial) null, 1430, (Locale) null);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.add((long) (-174), 3600L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 931 for halfdayOfDay must be in the range [1430,-174]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      long long0 = delegatedDateTimeField0.add(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      zoneInfoProvider0.getZone("DateTimeField[");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = islamicChronology0.getLeapYearPatternType();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(islamicChronology1, dateTimeField0, 1);
      skipUndoDateTimeField0.isLenient();
      int int0 = skipUndoDateTimeField0.getMinimumValue((long) 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(julianChronology0, dateTimeField0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(skipUndoDateTimeField0);
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      JulianChronology.getInstance(dateTimeZone0);
      strictDateTimeField0.getDifferenceAsLong(1, 1);
      DateTimeZone.forOffsetHoursMinutes(1, 1);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((Object) buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.BuddhistChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DelegatedDateTimeField delegatedDateTimeField0 = null;
      try {
        delegatedDateTimeField0 = new DelegatedDateTimeField((DateTimeField) null, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      buddhistChronology0.getZone();
      DurationField durationField0 = buddhistChronology0.millis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      delegatedDateTimeField0.isSupported();
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.getDifferenceAsLong(1, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The subtrahend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      String string0 = strictDateTimeField0.getAsShortText(3622L);
      assertEquals("24", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      delegatedDateTimeField0.getName();
      delegatedDateTimeField0.getMaximumValue();
      LocalTime localTime0 = new LocalTime((long) 1, (Chronology) buddhistChronology0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = delegatedDateTimeField0.getAsText((ReadablePartial) localTime0, 1, locale0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(gJChronology0, dateTimeField0, (-999));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(skipUndoDateTimeField0, dateTimeFieldType0);
      int int0 = delegatedDateTimeField0.getMaximumValue();
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      strictDateTimeField0.getMinimumValue(0L);
      strictDateTimeField0.roundFloor((-2097L));
      strictDateTimeField0.getDifference(895L, 1);
      strictDateTimeField0.addWrapField((-2097L), 1);
      // Undeclared exception!
      try { 
        LocalDate.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, unsupportedDurationField0, dateTimeFieldType0);
      String string0 = delegatedDateTimeField0.toString();
      assertEquals("DateTimeField[dayOfWeek]", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      delegatedDateTimeField0.roundHalfFloor(1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      delegatedDateTimeField0.getMaximumShortTextLength(locale0);
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1577);
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = (-1577);
      intArray0[6] = 32;
      int[] intArray1 = delegatedDateTimeField0.addWrapPartial(localTime0, (-1577), intArray0, 0);
      assertArrayEquals(new int[] {(-1577), 2, 1, 2, 1, (-1577), 32}, intArray1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      delegatedDateTimeField0.getType();
      long long0 = delegatedDateTimeField0.roundHalfEven((-1214L));
      assertEquals((-1000L), long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(islamicChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(islamicChronology0, dateTimeField0, 1);
      skipDateTimeField0.roundHalfCeiling(2961L);
      boolean boolean0 = skipDateTimeField0.isLeap(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals("secondOfMinute", delegatedDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      int int0 = (-414);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(buddhistChronology0, dateTimeField0, (-414));
      Locale locale0 = Locale.CHINA;
      skipDateTimeField0.getMaximumShortTextLength(locale0);
      skipDateTimeField0.roundHalfEven(1);
      skipDateTimeField0.add((long) 2, (-414));
      skipDateTimeField0.getLeapDurationField();
      int int1 = 4077;
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(1, 1, (-414), (-414), 4077, 1334);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -414 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      lenientDateTimeField0.getRangeDurationField();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      timeZone0.toZoneId();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology.getInstance(dateTimeZone1);
      lenientDateTimeField0.add(407L, 0);
      lenientDateTimeField0.getLeapDurationField();
      Instant instant0 = new Instant();
      Instant instant1 = instant0.toInstant();
      Duration duration0 = new Duration(1, 0);
      Instant instant2 = instant1.withDurationAdded((ReadableDuration) duration0, (-818));
      Instant instant3 = instant2.withDurationAdded((-2920L), 0);
      Instant instant4 = instant3.minus((ReadableDuration) duration0);
      dateTimeZone1.getOffset((ReadableInstant) instant4);
      Locale locale0 = new Locale(")(=J%*Ay|9`", "org/joda/time/tz/data", "org/joda/time/tz/data");
      buddhistChronology0.equals("Wnt\"h6.d l),");
      lenientDateTimeField0.getAsText(1, locale0);
      lenientDateTimeField0.getAsShortText((long) 1, locale0);
      lenientDateTimeField0.roundHalfEven(1L);
      DateTimeField dateTimeField1 = lenientDateTimeField0.getWrappedField();
      assertSame(dateTimeField0, dateTimeField1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrictDateTimeField strictDateTimeField0 = null;
      try {
        strictDateTimeField0 = new StrictDateTimeField((DateTimeField) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2064);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(unsupportedDurationField0);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, delegatedDurationField0);
      DurationField durationField0 = unsupportedDateTimeField0.getDurationField();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      long long0 = delegatedDateTimeField0.add((long) 2064, 1823);
      assertEquals(162547430402064L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(julianChronology0, dateTimeField0);
      Locale locale0 = Locale.JAPAN;
      String string0 = skipUndoDateTimeField0.getAsShortText(4978125, locale0);
      assertEquals("4978125", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DurationField durationField0 = delegatedDateTimeField0.getLeapDurationField();
      assertNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      MockDate mockDate0 = new MockDate(23034375, (-3196), 23034375, 400, 1894, 0);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      Months months0 = Months.TEN;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 1);
      LocalDateTime localDateTime2 = localDateTime1.withYearOfEra(4376);
      Locale locale0 = Locale.ENGLISH;
      String string0 = lenientDateTimeField0.getAsShortText((ReadablePartial) localDateTime2, locale0);
      assertEquals("41", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.millis();
      DelegatedDateTimeField delegatedDateTimeField0 = null;
      try {
        delegatedDateTimeField0 = new DelegatedDateTimeField((DateTimeField) null, durationField0, (DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      Integer integer0 = new Integer(1);
      long long0 = delegatedDateTimeField0.remainder((long) integer0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) null, dateTimeField0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(skipUndoDateTimeField0);
      Integer integer0 = new Integer(1);
      String string0 = skipUndoDateTimeField0.getAsShortText((-630L));
      assertEquals("12", string0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((int) integer0);
      strictDateTimeField0.getAsText((-630L));
      LocalDate localDate0 = new LocalDate((long) integer0, dateTimeZone0);
      skipUndoDateTimeField0.getAsText((ReadablePartial) localDate0, (Locale) null);
      String string1 = strictDateTimeField0.getAsShortText((-3314), (Locale) null);
      assertEquals("-3314", string1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      delegatedDateTimeField0.roundHalfFloor(1);
      boolean boolean0 = delegatedDateTimeField0.isLeap(1318L);
      int[] intArray0 = new int[7];
      intArray0[4] = 1;
      intArray0[5] = (-1577);
      boolean boolean1 = delegatedDateTimeField0.isSupported();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      lenientDateTimeField0.getRangeDurationField();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      timeZone0.toZoneId();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology.getInstance(dateTimeZone1);
      lenientDateTimeField0.add(407L, 0);
      lenientDateTimeField0.getLeapDurationField();
      Duration duration0 = new Duration(1, 0);
      Locale locale0 = new Locale(")(=J%*Ay|9`", "org/joda/time/tz/data", "org/joda/time/tz/data");
      lenientDateTimeField0.getAsText(1, locale0);
      lenientDateTimeField0.getAsShortText((long) 1, locale0);
      lenientDateTimeField0.roundHalfEven(1L);
      lenientDateTimeField0.getWrappedField();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(2, yearMonth0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      YearMonth yearMonth0 = new YearMonth((long) 1);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.set((ReadablePartial) yearMonth0, 1, intArray0, "DateTimeField[", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"DateTimeField[\" for minuteOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(buddhistChronology0, dateTimeField0);
      Locale locale0 = Locale.KOREAN;
      skipDateTimeField0.getAsShortText(1, locale0);
      skipDateTimeField0.toString();
      MockDate mockDate0 = new MockDate((-448), 1, 1119, 1, (-448));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      skipDateTimeField0.getAsText((ReadablePartial) localTime0, 1, locale0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-448);
      intArray0[1] = 1;
      intArray0[2] = 1119;
      intArray0[3] = (-448);
      intArray0[4] = 1119;
      // Undeclared exception!
      try { 
        skipDateTimeField0.set((ReadablePartial) localTime0, (-448), intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -448
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 822;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(822);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = iSOChronology0.withUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeZone.getProvider();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0, 1);
      Object object0 = new Object();
      buddhistChronology0.equals(object0);
      skipDateTimeField0.getDifference(643L, 822);
      skipDateTimeField0.addWrapField((long) 0, 4714);
      skipDateTimeField0.roundCeiling(36000000L);
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: org/joda/time/tz/data
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(dateTimeField0);
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField1, buddhistChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      dateTimeZone0.equals(gJChronology0);
      LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone1);
      Integer integer0 = new Integer(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[1];
      localDate0.getEra();
      intArray0[0] = 1;
      lenientDateTimeField0.getMaximumValue((ReadablePartial) localDate0, intArray0);
      BuddhistChronology.getInstance();
      dateTimeZone0.adjustOffset(0L, true);
      long long0 = lenientDateTimeField0.add(0L, (long) 1);
      assertEquals(3600000L, long0);
      
      lenientDateTimeField0.addWrapPartial(localDate0, 1, (int[]) null, 0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      lenientDateTimeField0.getMinimumValue();
      String string0 = lenientDateTimeField0.getAsText((-290L));
      assertEquals("11", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      Chronology chronology0 = instant0.getChronology();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(chronology0, dateTimeField0);
      Locale locale0 = Locale.ITALIAN;
      skipUndoDateTimeField0.roundHalfCeiling(1);
      skipUndoDateTimeField0.getAsText((long) 1, locale0);
      skipUndoDateTimeField0.getMaximumValue((-2973L));
      locale0.getDisplayVariant();
      skipUndoDateTimeField0.set((long) (-1988), "0", locale0);
      skipUndoDateTimeField0.getMaximumShortTextLength(locale0);
      skipUndoDateTimeField0.getMaximumValue((ReadablePartial) null);
      skipUndoDateTimeField0.getAsShortText((long) 1, locale0);
      skipUndoDateTimeField0.getAsShortText((ReadablePartial) null, (-1988), locale0);
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.set((long) 1439, "~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"~\" for minuteOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeZone.getProvider();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      // Undeclared exception!
      try { 
        strictDateTimeField0.set((long) 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for clockhourOfHalfday must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      lenientDateTimeField0.getMinimumValue((ReadablePartial) null, intArray0);
      lenientDateTimeField0.roundFloor(1);
      lenientDateTimeField0.getMinimumValue();
      lenientDateTimeField0.getMaximumValue((long) (-292268511));
      Locale locale0 = Locale.ITALY;
      String string0 = lenientDateTimeField0.toString();
      YearMonth yearMonth0 = new YearMonth();
      String string1 = lenientDateTimeField0.getAsShortText((ReadablePartial) yearMonth0, locale0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, unsupportedDurationField0, dateTimeFieldType0);
      LocalDate localDate0 = new LocalDate(1, 1, 1);
      delegatedDateTimeField0.getMinimumValue((ReadablePartial) localDate0);
      delegatedDateTimeField0.getAsText((long) 1);
      delegatedDateTimeField0.getWrappedField();
      assertEquals("weekyear", delegatedDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LocalTime localTime0 = new LocalTime(1, 1, 1, 1);
      int[] intArray0 = new int[7];
      intArray0[1] = 1;
      intArray0[6] = 0;
      delegatedDateTimeField0.getDifferenceAsLong((-19L), 1);
      delegatedDateTimeField0.add((ReadablePartial) localTime0, 1, intArray0, 0);
      delegatedDateTimeField0.isLenient();
      Integer integer0 = new Integer(1);
      delegatedDateTimeField0.set((long) 0, 1);
      int int0 = delegatedDateTimeField0.getLeapAmount((-19L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      DurationField durationField0 = buddhistChronology0.weeks();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0);
      delegatedDateTimeField0.roundHalfCeiling(1);
      Locale locale0 = null;
      delegatedDateTimeField0.getMaximumTextLength((Locale) null);
      LocalDate localDate0 = new LocalDate(1, 1, 3, buddhistChronology0);
      // Undeclared exception!
      try { 
        delegatedDateTimeField0.addWrapField((ReadablePartial) localDate0, 1, (int[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
}
