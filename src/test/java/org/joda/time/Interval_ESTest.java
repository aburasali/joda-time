/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 01:56:00 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Foo;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

public class Interval_ESTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Interval interval0 = new Interval(3L, 3L);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(3L, (Chronology) gJChronology0);
      Weeks weeks0 = Weeks.standardWeeksIn(mutablePeriod0);
      Duration duration0 = weeks0.toStandardDuration();
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Interval interval1 = duration0.toIntervalFrom(mutableDateTime0);
      boolean boolean0 = interval0.abuts(interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      MutableInterval mutableInterval0 = new MutableInterval((-9223372036854775808L), (-9223372036854775808L));
      Interval interval1 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.abuts(interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      Interval interval1 = interval0.withPeriodAfterStart((ReadablePeriod) null);
      boolean boolean0 = interval1.abuts((ReadableInterval) null);
      assertEquals(1392336000000L, interval1.getEndMillis());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      System.setCurrentTimeMillis((-26L));
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      Interval interval1 = interval0.gap(interval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Interval interval0 = new Interval((-2203L), (-2203L));
      Interval interval1 = interval0.withStartMillis((-2203L));
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L));
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = interval0.withStart(dateTime0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 58, 45, 0, 58, 4, 58, 58);
      Interval interval0 = new Interval(mutableDateTime0, mutablePeriod0);
      Interval interval1 = interval0.withPeriodBeforeEnd(mutablePeriod0);
      assertEquals(0L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      Interval interval0 = new Interval(hours0, mutableDateTime0);
      Interval interval1 = interval0.withPeriodBeforeEnd(hours0);
      assertEquals((-21600000L), interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1L), (-1L));
      Interval interval0 = mutableInterval0.toInterval();
      Hours hours0 = Hours.SEVEN;
      Interval interval1 = interval0.withPeriodBeforeEnd(hours0);
      assertEquals((-25200001L), interval1.getStartMillis());
      assertEquals((-1L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Interval interval1 = interval0.withPeriodAfterStart((ReadablePeriod) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Days days0 = Days.ZERO;
      Interval interval0 = new Interval((-1512), (-1512));
      Interval interval1 = interval0.withPeriodAfterStart(days0);
      assertNotSame(interval1, interval0);
      assertEquals((-1512L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Duration duration0 = minutes0.toStandardDuration();
      Interval interval0 = new Interval((ReadableInstant) null, duration0);
      Interval interval1 = interval0.withEndMillis(31083597720000L);
      assertEquals(31083597720000L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-9223372036854775808L), (-9223372036854775808L));
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = interval0.withEndMillis((-2251L));
      assertEquals((-2251L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime(0L, dateTimeZone0);
      MutableInterval mutableInterval0 = new MutableInterval((ReadablePeriod) null, dateTime0);
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = interval0.withEnd(dateTime0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Interval interval0 = new Interval((-2861L), (-2861L));
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2861L), chronology0);
      Interval interval1 = interval0.withEnd(mutableDateTime0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      Interval interval1 = interval0.withDurationBeforeEnd((ReadableDuration) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Interval interval0 = new Interval((-1410L), (-101L), (Chronology) null);
      Duration duration0 = Duration.ZERO;
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      assertEquals((-101L), interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      Interval interval1 = interval0.withDurationAfterStart((ReadableDuration) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Interval interval0 = new Interval(hours0, mutableDateTime0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Interval interval1 = interval0.withChronology(gregorianChronology0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = Instant.EPOCH;
      MutableInterval mutableInterval0 = new MutableInterval(duration0, instant0);
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = interval0.toInterval();
      assertEquals(0L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Days days0 = Days.days(0);
      Instant instant0 = Instant.ofEpochMilli((-37L));
      Interval interval0 = new Interval(days0, instant0);
      Interval interval1 = interval0.toInterval();
      assertEquals((-37L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Interval interval0 = Interval.parse((String) null);
      assertEquals((-1L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      Interval interval0 = new Interval(hours0, mutableDateTime0);
      Duration duration0 = Duration.standardHours(2);
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      Interval interval2 = interval1.overlap(interval1);
      assertNotNull(interval2);
      assertFalse(interval0.equals((Object)interval1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      Interval interval0 = new Interval(hours0, mutableDateTime0);
      Interval interval1 = interval0.overlap(interval0);
      assertEquals(0L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      Interval interval0 = new Interval(hours0, mutableDateTime0);
      Duration duration0 = Duration.standardHours(2);
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      Interval interval2 = interval1.overlap(interval0);
      assertEquals((-14400000L), interval2.getEndMillis());
      assertNotNull(interval2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval1 = interval0.gap(mutableInterval0);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = new Interval((-1L), (-1L));
      Interval interval2 = interval0.gap(interval1);
      assertEquals((-1L), interval2.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      // Undeclared exception!
      try { 
        interval0.withStartMillis(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Days days0 = Days.days(0);
      Instant instant0 = Instant.ofEpochMilli((-37L));
      Duration duration0 = Duration.standardHours((-37L));
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      Interval interval0 = new Interval(days0, instant1);
      // Undeclared exception!
      try { 
        interval0.withStart(instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Months months0 = Months.EIGHT;
      Duration duration0 = Duration.ZERO;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, 1);
      Interval interval0 = new Interval(duration0, dateTime0);
      Interval interval1 = interval0.withChronology(copticChronology0);
      // Undeclared exception!
      try { 
        interval1.withPeriodBeforeEnd(months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Interval interval0 = new Interval((-1410L), (-101L), (Chronology) null);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(4323L, (-1410L), periodType0, julianChronology0);
      // Undeclared exception!
      try { 
        interval0.withPeriodBeforeEnd(mutablePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        interval0.withPeriodBeforeEnd(years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Interval interval0 = new Interval(3600, 3600);
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 3600, periodType0);
      Period period0 = mutablePeriod0.toPeriod();
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, (-1151));
      Minutes minutes0 = period1.toStandardMinutes();
      // Undeclared exception!
      try { 
        interval0.withPeriodAfterStart(minutes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-9223372036854775808L), (-9223372036854775808L));
      Interval interval0 = mutableInterval0.toInterval();
      Period period0 = Period.hours(3213);
      Period period1 = period0.negated();
      // Undeclared exception!
      try { 
        interval0.withPeriodAfterStart(period1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775808 + -11566800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Duration duration0 = new Duration(655L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(655L, dateTimeZone0);
      Interval interval0 = duration0.toIntervalTo(dateTime0);
      DateTime dateTime1 = dateTime0.minusWeeks((-1037));
      Interval interval1 = interval0.withEnd(dateTime1);
      Interval interval2 = interval1.withPeriodBeforeEnd((ReadablePeriod) null);
      // Undeclared exception!
      try { 
        interval2.withEndMillis(655L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Interval interval0 = new Interval(0L, 0L, copticChronology0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(1, 1, 1, 1, 1, 1, 1, uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        interval0.withEnd(mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Interval interval0 = new Interval((-88L), 0L);
      Duration duration0 = new Duration(4246L, 0L);
      // Undeclared exception!
      try { 
        interval0.withDurationBeforeEnd(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTime dateTime0 = new DateTime(0L, (Chronology) islamicChronology0);
      Interval interval0 = new Interval(dateTime0, dateTime0);
      Duration duration0 = new Duration(100000L, 1711L);
      // Undeclared exception!
      try { 
        interval0.withDurationAfterStart(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Duration duration0 = Duration.millis((-1592L));
      Period period0 = new Period((ReadableInstant) null, duration0);
      Interval interval0 = null;
      try {
        interval0 = new Interval(period0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Foo foo0 = Foo.SEVEN;
      Interval interval0 = null;
      try {
        interval0 = new Interval((ReadableInstant) null, foo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) uTCDateTimeZone0);
      Period period0 = Period.weeks(1);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      Period period1 = period0.withField(durationFieldType0, (-2345));
      Interval interval0 = null;
      try {
        interval0 = new Interval(mutableDateTime0, period1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Interval interval0 = null;
      try {
        interval0 = new Interval((ReadableInstant) null, years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      Interval interval0 = null;
      try {
        interval0 = new Interval(dateTime0, dateTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      Duration duration0 = mutablePeriod0.toDurationFrom((ReadableInstant) null);
      Duration duration1 = duration0.plus((-1L));
      Interval interval0 = null;
      try {
        interval0 = new Interval((ReadableInstant) null, duration1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-3405L));
      Interval interval0 = null;
      try {
        interval0 = new Interval(duration0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object object0 = new Object();
      Interval interval0 = null;
      try {
        interval0 = new Interval(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No interval converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Interval interval0 = null;
      try {
        interval0 = new Interval(1808L, 0L, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Interval interval0 = null;
      try {
        interval0 = new Interval(152L, 1L, julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval(86400000L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      Interval interval0 = new Interval(hours0, mutableDateTime0);
      Duration duration0 = Duration.standardHours(2);
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      assertEquals((-7200000L), interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(3600L);
      Instant instant0 = Instant.now();
      Interval interval0 = duration0.toIntervalFrom(instant0);
      Duration duration1 = new Duration(3600L);
      Interval interval1 = interval0.withDurationAfterStart(duration1);
      assertEquals(1392409281320L, interval1.getStartMillis());
      assertEquals(1392409284920L, interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Duration duration0 = new Duration(655L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(655L, dateTimeZone0);
      Interval interval0 = duration0.toIntervalTo(dateTime0);
      DateTime dateTime1 = dateTime0.minusWeeks((-1037));
      Interval interval1 = interval0.withEnd(dateTime1);
      Interval interval2 = interval1.withEndMillis(655L);
      assertNotSame(interval2, interval1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      Interval interval0 = new Interval(0L, 0L, uTCDateTimeZone0);
      Interval interval1 = interval0.withEndMillis(0L);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(3600L);
      Instant instant0 = Instant.now();
      Interval interval0 = duration0.toIntervalFrom(instant0);
      Interval interval1 = interval0.withStartMillis(3600L);
      assertEquals(3600L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Interval interval0 = new Interval((-2203L), (-1L), ethiopicChronology0);
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
      try { 
        interval0.withPeriodAfterStart(hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Interval interval0 = new Interval((Object) null, julianChronology0);
      assertEquals(1392409281320L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Interval interval0 = new Interval((Object) null);
      assertEquals(1392409281320L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(3600L);
      Instant instant0 = Instant.now();
      Interval interval0 = duration0.toIntervalFrom(instant0);
      Foo foo0 = Foo.SIX;
      // Undeclared exception!
      try { 
        interval0.withPeriodBeforeEnd(foo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(3600L);
      Instant instant0 = Instant.now();
      Interval interval0 = duration0.toIntervalFrom(instant0);
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Interval interval0 = new Interval(hours0, mutableDateTime0);
      Interval interval1 = interval0.withEnd(mutableDateTime0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      Interval interval0 = new Interval(hours0, mutableDateTime0);
      Interval interval1 = interval0.withStart(mutableDateTime0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = new DateTime(0L, (Chronology) copticChronology0);
      Interval interval0 = new Interval(duration0, dateTime0);
      Interval interval1 = interval0.withChronology(copticChronology0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = new DateTime(0L, (Chronology) copticChronology0);
      Interval interval0 = new Interval(duration0, dateTime0);
      boolean boolean0 = interval0.abuts(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1L), (-1L));
      Interval interval0 = mutableInterval0.toInterval();
      System.setCurrentTimeMillis((-1L));
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1L), (-1L));
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = interval0.gap((ReadableInterval) null);
      assertNotNull(interval1);
      
      boolean boolean0 = interval1.abuts((ReadableInterval) null);
      assertTrue(boolean0);
      assertEquals((-1L), interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      Interval interval1 = interval0.withPeriodBeforeEnd((ReadablePeriod) null);
      Interval interval2 = interval1.gap((ReadableInterval) null);
      assertNotNull(interval2);
      assertEquals(1392409281320L, interval2.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      Interval interval1 = interval0.withPeriodAfterStart((ReadablePeriod) null);
      Interval interval2 = interval0.overlap(interval1);
      assertNull(interval2);
      assertEquals(1392336000000L, interval1.getStartMillis());
      assertNotSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Interval interval0 = new Interval(hours0, mutableDateTime0);
      Interval interval1 = interval0.overlap(interval0);
      assertNotNull(interval1);
      assertEquals(1392391281320L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("PEzMRm/^s+5<8qkWmmH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"PEzMRm\" is malformed at \"EzMRm\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("/-8bV< ][o>#)iX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: /-8bV< ][o>#)iX
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("X{8U4IV,k[yc>q*c^lN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: X{8U4IV,k[yc>q*c^lN
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("$+Fj:|/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: $+Fj:|/
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      Interval interval1 = interval0.withStartMillis(0L);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Integer integer0 = new Integer((-458));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Interval interval0 = null;
      try {
        interval0 = new Interval(integer0, ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No interval converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Interval interval0 = new Interval(hours0, mutableDateTime0);
      Interval interval1 = interval0.withStart(mutableDateTime0);
      assertEquals(1392409281320L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      Interval interval1 = interval0.gap((ReadableInterval) null);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      Foo foo0 = Foo.MIN_VALUE;
      // Undeclared exception!
      try { 
        interval0.withPeriodAfterStart(foo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Interval interval0 = new Interval(hours0, mutableDateTime0);
      Interval interval1 = interval0.toInterval();
      assertEquals(1392391281320L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parse("No valid ISO8601 format for fields: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: No valid ISO8601 format for fields: 
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(3600L);
      Instant instant0 = Instant.now();
      Interval interval0 = duration0.toIntervalFrom(instant0);
      Interval interval1 = interval0.withEnd(instant0);
      boolean boolean0 = interval1.abuts(interval0);
      assertTrue(boolean0);
  }
}
