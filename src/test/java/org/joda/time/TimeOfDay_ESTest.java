/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 02:22:42 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.zone.ZoneRulesException;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

public class TimeOfDay_ESTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      TimeOfDay timeOfDay0 = new TimeOfDay();
      int[] intArray0 = new int[0];
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      // Undeclared exception!
      try { 
        timeOfDay1.withHourOfDay(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = new Period();
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(period0, 0);
      gregorianChronology0.set(localDateTime1, 0);
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) gregorianChronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.withMinuteOfHour(0);
      int int0 = 7678125;
      timeOfDay1.plusMinutes((-891));
      // Undeclared exception!
      timeOfDay0.plusHours(int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      // Undeclared exception!
      try { 
        timeOfDay0.MIDNIGHT.withField(dateTimeFieldType0, (-1273));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1273 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone(".hA~}rVhQ");
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      // Undeclared exception!
      try { 
        timeOfDay1.toDateTimeToday((DateTimeZone) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(1209600000L);
      timeOfDay0.getSecondOfMinute();
      timeOfDay0.MIDNIGHT.compareTo(timeOfDay0);
      TimeOfDay timeOfDay1 = timeOfDay0.withMinuteOfHour(3);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      ReadablePeriod readablePeriod0 = null;
      int int0 = 945;
      gJChronology0.add((ReadablePeriod) null, 0L, 945);
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      TimeZone.setDefault(timeZone0);
      dateTimeZone1.getName(0L);
      TimeOfDay timeOfDay2 = timeOfDay1.minusMillis(3);
      DateTime dateTime0 = timeOfDay0.toDateTimeToday(dateTimeZone1);
      TimeOfDay timeOfDay3 = timeOfDay1.MIDNIGHT.withSecondOfMinute(timeOfDay0.MILLIS_OF_SECOND);
      timeOfDay0.toString();
      timeOfDay0.plus(readablePeriod0);
      TimeOfDay timeOfDay4 = timeOfDay1.withChronologyRetainFields(gJChronology0);
      TimeOfDay timeOfDay5 = timeOfDay0.minus(readablePeriod0);
      long long0 = 0L;
      DateTimeUtils.setCurrentMillisFixed(long0);
      timeOfDay4.toDateTime(dateTime0);
      timeOfDay3.getFieldTypes();
      timeOfDay0.toDateTimeToday();
      int int1 = 777;
      int int2 = 4;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int2, timeOfDay4.HOUR_OF_DAY, timeOfDay0.SECOND_OF_MINUTE, timeOfDay4.SECOND_OF_MINUTE, int0);
      TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      timeOfDay5.getField(timeOfDay5.MINUTE_OF_HOUR, (Chronology) gJChronology0);
      timeOfDay2.toDateTimeToday();
      int int3 = 1000;
      timeOfDay5.plusHours(int3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      TimeZone.setDefault(timeZone0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(0L);
      DateTimeUtils.setCurrentMillisFixed(0L);
      TimeOfDay.fromMillisOfDay(290L, (Chronology) gJChronology0);
      timeOfDay0.toDateTimeToday(dateTimeZone1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(1L);
      int int0 = new Integer(2);
      DateTimeFieldType dateTimeFieldType0 = null;
      int int1 = 3;
      Chronology chronology0 = null;
      // Undeclared exception!
      try { 
        timeOfDay0.getField(2, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((TimeOfDay) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1958), (-1958), (-1958), 1000, 6);
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1000;
      intArray0[1] = (-1958);
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 2;
      intArray0[6] = (-1958);
      intArray0[7] = 1;
      intArray0[8] = 3;
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      timeOfDay1.withMillisOfSecond(0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1954L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      TimeOfDay timeOfDay1 = new TimeOfDay((long) 3, (Chronology) gJChronology0);
      Hours hours0 = Hours.EIGHT;
      timeOfDay0.isAfter(timeOfDay1);
      TimeOfDay timeOfDay2 = timeOfDay1.MIDNIGHT.plus(hours0);
      timeOfDay0.MIDNIGHT.compareTo((ReadablePartial) timeOfDay1);
      timeOfDay0.toLocalTime();
      timeOfDay0.getHourOfDay();
      mutableDateTime0.toString();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      timeOfDay2.MIDNIGHT.indexOf(dateTimeFieldType0);
      timeOfDay0.toDateTimeToday((DateTimeZone) null);
      TimeOfDay timeOfDay3 = timeOfDay2.minus(hours0);
      timeOfDay3.minusMinutes(1);
      timeOfDay3.size();
      timeOfDay3.getFieldTypes();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      DateTimeUtils.setCurrentMillisOffset(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 1822);
      LocalTime localTime1 = localTime0.withMinuteOfHour(3);
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withHourOfDay(0);
      timeOfDay0.compareTo((ReadablePartial) localTime1);
      TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(1822);
      long long0 = (-861L);
      UTCProvider uTCProvider0 = new UTCProvider();
      String string0 = "g";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      TimeOfDay timeOfDay3 = TimeOfDay.fromMillisOfDay(long0, (Chronology) ethiopicChronology0);
      Minutes minutes0 = Minutes.THREE;
      timeOfDay3.plus(minutes0);
      timeOfDay2.size();
      int int0 = (-1);
      Integer integer0 = new Integer(int0);
      timeOfDay0.equals(integer0);
      timeOfDay0.toString();
      int int1 = (-1067);
      int int2 = (-4825);
      int int3 = 993;
      try { 
        ethiopicChronology0.getDateTimeMillis((long) timeOfDay1.MINUTE_OF_HOUR, int1, int2, int3, timeOfDay2.SECOND_OF_MINUTE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1067 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 3);
      DateTimeUtils.setCurrentMillisFixed(5);
      timeOfDay0.getSecondOfMinute();
      timeOfDay0.plusMinutes((-4211));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(701L, (Chronology) iSOChronology0);
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, (Chronology) iSOChronology0);
      Months months0 = Months.TEN;
      TimeOfDay timeOfDay2 = timeOfDay1.MIDNIGHT.withPeriodAdded(months0, 0);
      timeOfDay2.plusMinutes(1000);
      TimeOfDay timeOfDay3 = timeOfDay1.withHourOfDay(timeOfDay0.MILLIS_OF_SECOND);
      TimeOfDay timeOfDay4 = new TimeOfDay(timeOfDay0.MILLIS_OF_SECOND, timeOfDay3.MINUTE_OF_HOUR);
      int int0 = 5;
      timeOfDay3.withPeriodAdded(months0, int0);
      int int1 = 80;
      TimeOfDay timeOfDay5 = timeOfDay3.minusMillis(int1);
      long long0 = (-209L);
      Duration duration0 = Duration.millis(long0);
      Duration duration1 = duration0.dividedBy((long) timeOfDay3.SECOND_OF_MINUTE);
      duration1.toPeriod((Chronology) iSOChronology0);
      Period period0 = new Period(timeOfDay5.MILLIS_OF_SECOND, timeOfDay4.HOUR_OF_DAY, timeOfDay4.MINUTE_OF_HOUR, timeOfDay1.MILLIS_OF_SECOND, timeOfDay3.HOUR_OF_DAY, timeOfDay0.HOUR_OF_DAY, timeOfDay4.HOUR_OF_DAY, timeOfDay0.HOUR_OF_DAY);
      int int2 = 1;
      Period period1 = period0.minusHours(int2);
      timeOfDay5.minus(period1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Chronology chronology0 = instant0.getChronology();
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-1511L), chronology0);
      int[] intArray0 = new int[8];
      intArray0[0] = 337;
      Months months0 = Months.TWO;
      chronology0.add((ReadablePeriod) months0, 0L, 337);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 3;
      intArray0[6] = 1;
      intArray0[7] = (-458);
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      // Undeclared exception!
      try { 
        timeOfDay1.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 337 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      LocalDate localDate1 = localDate0.plusMonths((-1));
      LocalDate localDate2 = localDate1.minusDays(2);
      LocalDate localDate3 = localDate2.withLocalMillis(0L);
      Date date0 = localDate3.toDate();
      Weeks weeks0 = Weeks.parseWeeks((String) null);
      localDate1.plus(weeks0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      Hours hours0 = seconds0.toStandardHours();
      localDate2.withPeriodAdded(hours0, 3);
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(date0);
      timeOfDay0.getMillisOfSecond();
      timeOfDay0.size();
      TimeOfDay timeOfDay1 = timeOfDay0.minusHours(571);
      int int0 = 250;
      // Undeclared exception!
      try { 
        timeOfDay1.withMinuteOfHour(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 250 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer(0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      iSOChronology0.withUTC();
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(1209600000L, (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        timeOfDay0.withSecondOfMinute(4078);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4078 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      EthiopicChronology.getInstance();
      dateTimeZone0.isFixed();
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-797L), (Chronology) ethiopicChronology0);
      timeOfDay0.getMillisOfSecond();
      TimeOfDay timeOfDay1 = new TimeOfDay(dateTimeZone0);
      timeOfDay0.getHourOfDay();
      timeOfDay1.plusSeconds(1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      timeOfDay0.withSecondOfMinute(3);
      DateTimeZone.forOffsetHoursMinutes(2, 3);
      Days days0 = Days.THREE;
      timeOfDay0.minus(days0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeOfDay timeOfDay1 = timeOfDay0.withMillisOfSecond(12);
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      DateTimeZone.setNameProvider(defaultNameProvider0);
      // Undeclared exception!
      try { 
        timeOfDay1.withMinuteOfHour(771);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 771 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((Object) null);
      TimeOfDay timeOfDay1 = timeOfDay0.withMinuteOfHour(2);
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      timeOfDay1.MIDNIGHT.getField(3, (Chronology) julianChronology0);
      timeOfDay0.size();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = DateTime.now();
      timeOfDay0.MIDNIGHT.toDateTimeToday();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 1);
      Chronology chronology0 = gJChronology0.withUTC();
      timeOfDay0.withChronologyRetainFields(chronology0);
      // Undeclared exception!
      try { 
        ZoneId.of("org/joda/time/tz/data");
        fail("Expecting exception: ZoneRulesException");
      
      } catch(ZoneRulesException e) {
         //
         // Unknown time-zone ID: org/joda/time/tz/data
         //
         verifyException("java.time.zone.ZoneRulesProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      DateTimeUtils.setCurrentMillisFixed((-2256L));
      timeOfDay0.toDateTimeToday();
      int int0 = 0;
      TimeOfDay timeOfDay1 = timeOfDay0.plusMinutes(0);
      timeOfDay1.MIDNIGHT.withMillisOfSecond(int0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      int int1 = (-3463);
      timeOfDay0.plusMinutes(int1);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      timeOfDay1.MIDNIGHT.isSupported(dateTimeFieldType0);
      TimeOfDay timeOfDay2 = timeOfDay0.minusHours(int0);
      int int2 = 0;
      TimeOfDay timeOfDay3 = timeOfDay2.MIDNIGHT.withMillisOfSecond(int2);
      // Undeclared exception!
      try { 
        timeOfDay3.withFieldAdded(durationFieldType0, timeOfDay1.MILLIS_OF_SECOND);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'days' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withField(dateTimeFieldType0, 2);
      int int0 = 860;
      TimeOfDay timeOfDay2 = timeOfDay0.minusMillis(860);
      timeOfDay2.toString();
      TimeOfDay.fromMillisOfDay((long) timeOfDay1.MINUTE_OF_HOUR);
      String string0 = "}!S.HwG_3w0x<_I[v0";
      // Undeclared exception!
      try { 
        Years.parseYears(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"}!S.HwG_3w0x<_I[v0\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Chronology chronology0 = gregorianChronology0.withZone(uTCDateTimeZone0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-1522L), chronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.withChronologyRetainFields(gregorianChronology0);
      timeOfDay1.minusMinutes(1);
      int int0 = 242;
      TimeOfDay timeOfDay2 = timeOfDay0.minusHours(int0);
      int int1 = 13;
      timeOfDay1.minusMillis(int1);
      TimeOfDay.fromMillisOfDay((long) int1, chronology0);
      timeOfDay1.getHourOfDay();
      int int2 = 4248;
      timeOfDay2.plusMillis(int2);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      int int3 = 1;
      // Undeclared exception!
      try { 
        timeOfDay2.withField(dateTimeFieldType0, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'year' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay(14, 14, 2, copticChronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withSecondOfMinute(1);
      TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay(15);
      timeOfDay1.toLocalTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      timeOfDay2.MIDNIGHT.indexOf(dateTimeFieldType0);
      dateTimeFieldType0.getRangeDurationType();
      // Undeclared exception!
      try { 
        timeOfDay0.MIDNIGHT.withHourOfDay(93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 93 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone0);
      timeOfDay0.getFieldType(2);
      timeOfDay0.withSecondOfMinute(2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      int int0 = 13;
      TimeOfDay timeOfDay1 = timeOfDay0.withPeriodAdded((ReadablePeriod) null, 13);
      timeOfDay1.withPeriodAdded((ReadablePeriod) null, 2);
      // Undeclared exception!
      try { 
        timeOfDay0.getFieldType((-1164));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 15, 0, 0);
      timeOfDay0.plusMinutes(57);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone((String) null);
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) null);
      Locale locale0 = Locale.KOREA;
      timeOfDay0.MIDNIGHT.toString((String) null, locale0);
      Hours hours0 = Hours.hoursBetween((ReadablePartial) timeOfDay0, (ReadablePartial) timeOfDay0);
      TimeOfDay timeOfDay1 = timeOfDay0.plus(hours0);
      hours0.toMutablePeriod();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null, 3);
      // Undeclared exception!
      try { 
        timeOfDay1.getField(91, (Chronology) gregorianChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 91
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      LocalDate localDate1 = localDate0.plusMonths((-1));
      LocalDate localDate2 = localDate1.minusDays(2);
      LocalDate localDate3 = localDate2.withLocalMillis(0L);
      Date date0 = localDate3.toDate();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      Hours hours0 = seconds0.toStandardHours();
      localDate2.withPeriodAdded(hours0, 3);
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(date0);
      timeOfDay0.size();
      TimeOfDay timeOfDay1 = timeOfDay0.minusHours(571);
      int int0 = 250;
      // Undeclared exception!
      try { 
        timeOfDay1.withMinuteOfHour(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 250 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 1;
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      Chronology chronology0 = lenientChronology0.withUTC();
      timeOfDay1.withChronologyRetainFields(chronology0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      timeOfDay0.MIDNIGHT.toDateTime((ReadableInstant) null);
      Chronology chronology0 = ethiopicChronology0.withUTC();
      TimeOfDay timeOfDay1 = TimeOfDay.fromMillisOfDay((-684L), chronology0);
      timeOfDay0.getMillisOfSecond();
      timeOfDay0.plusSeconds(0);
      timeOfDay1.getMinuteOfHour();
      String string0 = "Africa/Addis_Ababa";
      // Undeclared exception!
      try { 
        MutablePeriod.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Africa/Addis_Ababa\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      Hours hours0 = Hours.SIX;
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) hours0);
      DateTime dateTime2 = dateTime1.plusYears((-56));
      GregorianCalendar gregorianCalendar0 = dateTime2.toGregorianCalendar();
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(gregorianCalendar0);
      TimeOfDay timeOfDay1 = timeOfDay0.plus(hours0);
      // Undeclared exception!
      try { 
        timeOfDay1.getField((-26), (Chronology) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -26
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(2586L);
      TimeOfDay timeOfDay1 = timeOfDay0.plusHours(441);
      timeOfDay1.MIDNIGHT.compareTo(timeOfDay0);
      timeOfDay1.MIDNIGHT.compareTo(timeOfDay0);
      timeOfDay1.toString();
      timeOfDay1.size();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      timeOfDay0.equals(dateTimeFieldType0);
      int int0 = 1000;
      timeOfDay0.plusHours(int0);
      long long0 = (-956L);
      TimeOfDay timeOfDay2 = TimeOfDay.fromMillisOfDay(long0);
      int int1 = 3;
      int int2 = 3;
      TimeOfDay timeOfDay3 = timeOfDay2.MIDNIGHT.plusMillis(int2);
      int int3 = 3359;
      // Undeclared exception!
      try { 
        timeOfDay3.MIDNIGHT.withHourOfDay(int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3359 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0, 0);
      Period period0 = new Period(2511L, 4219L);
      TimeOfDay timeOfDay1 = timeOfDay0.plus(period0);
      timeOfDay0.toDateTimeToday();
      timeOfDay1.withSecondOfMinute(0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("The");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'The' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 97;
      intArray0[1] = (-3649);
      int int0 = 2;
      intArray0[2] = 2;
      intArray0[3] = 25650000;
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((TimeOfDay) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 2357;
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(2357, 2357, 2357, julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2357 for hourOfDay must not be larger than 23
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(322L);
      timeOfDay0.withMinuteOfHour(2);
      // Undeclared exception!
      try { 
        timeOfDay0.withMillisOfSecond((-1371));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1371 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(1L);
      timeOfDay0.getMillisOfSecond();
      int int0 = 3;
      // Undeclared exception!
      try { 
        timeOfDay0.withField((DateTimeFieldType) null, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'null' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((Object) null);
      timeOfDay0.plusMinutes(543);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(822, 822, 822);
      TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(12, 637, copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 637 for minuteOfHour must not be larger than 59
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      zoneInfoProvider0.getZone("");
      JulianChronology.getInstance((DateTimeZone) null, 3);
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(0L, (Chronology) julianChronology0);
      TimeZone timeZone0 = null;
      TimeOfDay timeOfDay1 = timeOfDay0.minusMillis(3);
      timeOfDay1.compareTo(timeOfDay0);
      Locale locale0 = Locale.TAIWAN;
      String string0 = "";
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, 1);
      timeOfDay0.MIDNIGHT.getFields();
      int int0 = (-1273);
      TimeOfDay timeOfDay1 = timeOfDay0.minusSeconds((-1273));
      Months months0 = Months.FOUR;
      timeOfDay1.plus(months0);
      UTCProvider uTCProvider0 = new UTCProvider();
      String string0 = "";
      uTCProvider0.getZone(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      TimeOfDay timeOfDay0 = new TimeOfDay(2318L, (Chronology) gregorianChronology0);
      // Undeclared exception!
      timeOfDay0.plusMinutes(86400000);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Days days0 = Days.days(3);
      days0.toMutablePeriod();
      gregorianChronology0.get((ReadablePeriod) days0, 0L, (long) 3);
      Chronology chronology0 = gregorianChronology0.withZone((DateTimeZone) null);
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 3, chronology0);
      timeOfDay0.toLocalTime();
      Period period0 = new Period();
      timeOfDay0.plus(period0);
      TimeOfDay timeOfDay1 = timeOfDay0.minusSeconds(3);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      // Undeclared exception!
      try { 
        timeOfDay0.withField(dateTimeFieldType0, timeOfDay1.MINUTE_OF_HOUR);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfWeek' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      Chronology chronology0 = iSOChronology0.withZone(uTCDateTimeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay(1000L, chronology0);
      timeOfDay0.plusMillis(0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay("=I,t,hSs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"=I,t,hSs\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((-23), (-23));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -23 for hourOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay("7)N?c:qef1{4fd{z\"", iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"7)N?c:qef1{4fd{z\"\" is malformed at \")N?c:qef1{4fd{z\"\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(1963, 2303, 798, 798);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1963 for hourOfDay must not be larger than 23
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone0);
      LocalDate localDate0 = new LocalDate();
      Date date0 = localDate0.toDate();
      TimeOfDay timeOfDay1 = TimeOfDay.fromDateFields(date0);
      timeOfDay1.minusSeconds(1656);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 1;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
      Chronology chronology0 = buddhistChronology0.withZone(dateTimeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 3, 3, 1, chronology0);
      // Undeclared exception!
      try { 
        timeOfDay0.withFieldAdded((DurationFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'null' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-471L));
      timeOfDay0.toString();
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      timeOfDay0.minus(period0);
      TimeOfDay timeOfDay1 = timeOfDay0.plusMinutes(3);
      int int0 = (-1950);
      TimeOfDay timeOfDay2 = timeOfDay1.MIDNIGHT.withPeriodAdded(period0, int0);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      days0.get(durationFieldType0);
      timeOfDay2.plusHours(timeOfDay1.HOUR_OF_DAY);
      int int1 = (-2233);
      // Undeclared exception!
      try { 
        timeOfDay1.withMinuteOfHour(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2233 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 3;
      TimeOfDay timeOfDay0 = new TimeOfDay(3, 3);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance((Chronology) null, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      timeOfDay0.withFieldAdded(durationFieldType0, (-458));
      timeOfDay0.getSecondOfMinute();
      Seconds seconds0 = Seconds.ZERO;
      timeOfDay0.withPeriodAdded(seconds0, 2);
      DateTime dateTime0 = new DateTime(2571L);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Date date0 = localDateTime0.toDate();
      TimeOfDay.fromDateFields(date0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      java.time.Instant instant0 = MockInstant.ofEpochSecond(1000L);
      Date date0 = Date.from(instant0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(date0);
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.minusMinutes(1);
      int int0 = 1958;
      TimeOfDay timeOfDay2 = timeOfDay0.minusMinutes(int0);
      TimeOfDay.fromDateFields(date0);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      dateTimeFieldType0.getDurationType();
      timeOfDay1.indexOf(dateTimeFieldType0);
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      TimeOfDay timeOfDay3 = TimeOfDay.fromMillisOfDay((long) timeOfDay2.HOUR_OF_DAY);
      TimeOfDay timeOfDay4 = timeOfDay3.MIDNIGHT.withSecondOfMinute(timeOfDay1.SECOND_OF_MINUTE);
      String string0 = "W,e";
      // Undeclared exception!
      try { 
        timeOfDay4.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: W
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay(1000L, (Chronology) gregorianChronology0);
      timeOfDay0.MIDNIGHT.minusMinutes(3674);
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      LocalDateTime localDateTime0 = LocalDateTime.now();
      int int0 = (-1286);
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfYear(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1286 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-224L));
      TimeOfDay.fromDateFields(mockDate0);
      int int0 = 3;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance(gregorianChronology0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      Seconds seconds0 = Seconds.secondsIn(mutableInterval0);
      Days days0 = seconds0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      int int0 = 1;
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withPeriodAdded(minutes0, 1);
      timeOfDay1.MIDNIGHT.toDateTimeToday();
      timeOfDay1.MIDNIGHT.isBefore(timeOfDay0);
      // Undeclared exception!
      try { 
        timeOfDay0.MIDNIGHT.withHourOfDay(1095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1095 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((-320L));
      timeOfDay0.size();
      Months months0 = Months.TEN;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      // Undeclared exception!
      try { 
        timeOfDay0.withFieldAdded(durationFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'months' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      TimeOfDay timeOfDay1 = timeOfDay0.plusMinutes((-889));
      timeOfDay1.compareTo(timeOfDay0);
      timeOfDay1.minusMinutes(timeOfDay0.MINUTE_OF_HOUR);
      timeOfDay1.getSecondOfMinute();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Chronology chronology0 = copticChronology0.withZone(dateTimeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay((Object) null, chronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.withSecondOfMinute(1);
      DateTimeZone.getNameProvider();
      timeOfDay0.minusMillis(1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      // Undeclared exception!
      try { 
        timeOfDay0.withField(dateTimeFieldType0, timeOfDay1.SECOND_OF_MINUTE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Chronology chronology0 = instant0.getChronology();
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((-1511L), chronology0);
      int[] intArray0 = new int[8];
      intArray0[0] = 337;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 3;
      intArray0[6] = 1;
      intArray0[7] = (-458);
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      // Undeclared exception!
      try { 
        timeOfDay1.minusMinutes(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 336 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, uTCDateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(uTCDateTimeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay(chronology0);
      timeOfDay0.plusSeconds((-2240));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 1343;
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay((-2382), 1343, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2382 for hourOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 4;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(14, 3, 4, (-2390), gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2390 for millisOfSecond must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, intArray0);
      // Undeclared exception!
      try { 
        timeOfDay1.withMillisOfSecond(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(697L, (Chronology) iSOChronology0);
      TimeOfDay timeOfDay1 = new TimeOfDay(timeOfDay0, (Chronology) iSOChronology0);
      TimeOfDay timeOfDay2 = timeOfDay1.withHourOfDay(3);
      timeOfDay1.withSecondOfMinute(2);
      TimeOfDay timeOfDay3 = timeOfDay2.minusMillis(80);
      long long0 = (-209L);
      Duration duration0 = Duration.millis(long0);
      Duration duration1 = duration0.negated();
      Period period0 = duration1.toPeriod((Chronology) iSOChronology0);
      int int0 = 1;
      Period period1 = period0.minusWeeks(int0);
      int int1 = 1;
      Period period2 = period1.minusHours(int1);
      timeOfDay3.minus(period2);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      iSOChronology0.getDateTimeMillis(2, 1, 1, 3);
      iSOChronology0.equals(timeOfDay0);
      Chronology chronology0 = iSOChronology0.withUTC();
      timeOfDay0.getField(1, chronology0);
      timeOfDay0.getFieldTypes();
      // Undeclared exception!
      try { 
        timeOfDay0.withHourOfDay(712);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 712 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      timeOfDay0.withMillisOfSecond(30);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      julianChronology0.add((long) 1, (long) 1, 354);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      timeOfDay0.isSupported(dateTimeFieldType0);
      timeOfDay0.getField(2, (Chronology) julianChronology0);
      timeOfDay0.getMinuteOfHour();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Chronology chronology0 = ethiopicChronology0.withUTC();
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(0L, chronology0);
      timeOfDay0.plusSeconds(1232);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0, 3);
      Chronology chronology0 = copticChronology0.withZone(uTCDateTimeZone0);
      TimeOfDay.fromMillisOfDay(2726L, chronology0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 2, 2, 2);
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      timeOfDay0.MIDNIGHT.getField(2, chronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      timeOfDay0.toDateTimeToday(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        TimeOfDay.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) uTCDateTimeZone0, islamicChronology_LeapYearPatternType0);
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) islamicChronology0);
      DateTimeUtils.setCurrentMillisOffset(1437L);
      timeOfDay0.toLocalTime();
      timeOfDay0.toDateTimeToday();
      // Undeclared exception!
      try { 
        TimeOfDay.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      timeOfDay0.getMinuteOfHour();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-178), (-178), (-178));
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        timeOfDay0.withMinuteOfHour(2765);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2765 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 157;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      Chronology chronology0 = iSOChronology0.withZone(uTCDateTimeZone0);
      TimeOfDay timeOfDay0 = null;
      try {
        timeOfDay0 = new TimeOfDay(157, 157, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 157 for hourOfDay must not be larger than 23
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      TimeOfDay timeOfDay0 = new TimeOfDay(14, 14, 2, copticChronology0);
      // Undeclared exception!
      try { 
        timeOfDay0.withHourOfDay(35);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 35 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = new Period();
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(period0, 0);
      gregorianChronology0.set(localDateTime1, 0);
      TimeOfDay timeOfDay0 = new TimeOfDay((Chronology) gregorianChronology0);
      // Undeclared exception!
      timeOfDay0.plusHours(7678125);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(0L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1954L);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      TimeOfDay timeOfDay1 = new TimeOfDay((long) 3, (Chronology) gJChronology0);
      Hours hours0 = Hours.EIGHT;
      timeOfDay0.isAfter(timeOfDay1);
      TimeOfDay timeOfDay2 = timeOfDay1.MIDNIGHT.plus(hours0);
      timeOfDay0.MIDNIGHT.compareTo((ReadablePartial) timeOfDay1);
      timeOfDay0.toLocalTime();
      timeOfDay0.getHourOfDay();
      timeOfDay2.MIDNIGHT.withSecondOfMinute(2);
      timeOfDay1.withSecondOfMinute(0);
      int int0 = TimeOfDay.HOUR_OF_DAY;
      timeOfDay0.toDateTimeToday((DateTimeZone) null);
      TimeOfDay timeOfDay3 = timeOfDay2.minus(hours0);
      timeOfDay3.minusMinutes(1);
      timeOfDay3.size();
      timeOfDay3.getFieldTypes();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4760);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      EthiopicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) lenientChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      GJChronology.getInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TimeOfDay timeOfDay0 = new TimeOfDay((Object) null, gJChronology0);
      timeOfDay0.getFieldType(1);
      ethiopicChronology0.withZone(dateTimeZone0);
      TimeOfDay timeOfDay1 = timeOfDay0.MIDNIGHT.withSecondOfMinute(3);
      timeOfDay0.getSecondOfMinute();
      timeOfDay0.withChronologyRetainFields(gJChronology0);
      Minutes minutes0 = Minutes.THREE;
      TimeOfDay timeOfDay2 = timeOfDay0.plus(minutes0);
      TimeOfDay timeOfDay3 = timeOfDay2.MIDNIGHT.withHourOfDay(3);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 2, 2, 0, 2835, 2);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      TimeOfDay.fromDateFields(date0);
      timeOfDay2.getField(3);
      timeOfDay2.minusHours(26);
      timeOfDay0.toString();
      timeOfDay0.getSecondOfMinute();
      Years years0 = Years.yearsBetween((ReadablePartial) timeOfDay3, (ReadablePartial) timeOfDay0);
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = 1019;
      // Undeclared exception!
      try { 
        timeOfDay1.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'years' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Chronology chronology0 = copticChronology0.withUTC();
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(2533L, chronology0);
      TimeOfDay timeOfDay1 = timeOfDay0.withMillisOfSecond(1);
      int int0 = 4760;
      timeOfDay0.MIDNIGHT.withChronologyRetainFields(chronology0);
      TimeOfDay timeOfDay2 = timeOfDay1.MIDNIGHT.minusSeconds(4760);
      // Undeclared exception!
      try { 
        timeOfDay2.getField(int0, (Chronology) copticChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 4760
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-2), (-2));
      TimeOfDay timeOfDay0 = new TimeOfDay(dateTimeZone0);
      TimeOfDay timeOfDay1 = TimeOfDay.fromMillisOfDay(3600000L);
      TimeOfDay timeOfDay2 = timeOfDay0.MIDNIGHT.plusMinutes(0);
      timeOfDay0.toString();
      int int0 = 14;
      TimeOfDay timeOfDay3 = timeOfDay0.minusHours(int0);
      TimeOfDay timeOfDay4 = timeOfDay3.minusHours(timeOfDay2.HOUR_OF_DAY);
      Duration duration0 = new Duration((long) timeOfDay1.SECOND_OF_MINUTE);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      PeriodType periodType0 = null;
      Period period0 = new Period(duration0, mutableDateTime0, periodType0);
      Period period1 = period0.normalizedStandard();
      Period period2 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      period1.plus(period2);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      int int1 = 0;
      Period period3 = period1.withFieldAdded(durationFieldType0, int1);
      period3.getMinutes();
      int int2 = (-2676);
      timeOfDay1.withPeriodAdded(period3, int2);
      int int3 = 4760;
      timeOfDay2.plusMinutes(int3);
      timeOfDay4.withSecondOfMinute(timeOfDay3.MINUTE_OF_HOUR);
      int int4 = 1055;
      int int5 = (-2405);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(int4, mutableDateTime0.ROUND_NONE, int5, julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(1209600000L);
      TimeOfDay timeOfDay1 = timeOfDay0.minusMillis((-4219));
      timeOfDay1.getSecondOfMinute();
      timeOfDay1.MIDNIGHT.compareTo(timeOfDay0);
      TimeOfDay timeOfDay2 = timeOfDay1.withMinuteOfHour(timeOfDay0.MILLIS_OF_SECOND);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      ReadablePeriod readablePeriod0 = null;
      long long0 = 0L;
      int int0 = 945;
      gJChronology0.add(readablePeriod0, long0, int0);
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      TimeZone.setDefault(timeZone0);
      long long1 = 0L;
      dateTimeZone1.getName(long1);
      TimeOfDay timeOfDay3 = timeOfDay2.minusMillis(timeOfDay0.MILLIS_OF_SECOND);
      DateTime dateTime0 = timeOfDay0.toDateTimeToday(dateTimeZone1);
      TimeOfDay timeOfDay4 = timeOfDay2.MIDNIGHT.withSecondOfMinute(timeOfDay0.MILLIS_OF_SECOND);
      timeOfDay0.toString();
      timeOfDay1.plus(readablePeriod0);
      TimeOfDay timeOfDay5 = timeOfDay2.withChronologyRetainFields(gJChronology0);
      TimeOfDay timeOfDay6 = timeOfDay0.minus(readablePeriod0);
      long long2 = 0L;
      TimeOfDay timeOfDay7 = TimeOfDay.fromMillisOfDay(long2);
      DateTimeUtils.setCurrentMillisFixed(long2);
      timeOfDay5.toDateTime(dateTime0);
      assertEquals(1392336000000L, dateTime0.getMillis());
      
      timeOfDay4.getFieldTypes();
      assertEquals(3, timeOfDay4.getSecondOfMinute());
      
      timeOfDay0.toDateTimeToday();
      int int1 = 777;
      int int2 = 4;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int2, timeOfDay5.HOUR_OF_DAY, timeOfDay1.SECOND_OF_MINUTE, timeOfDay5.SECOND_OF_MINUTE, int0);
      TimeOfDay timeOfDay8 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(17, timeOfDay8.getMinuteOfHour());
      assertEquals(45, timeOfDay8.getSecondOfMinute());
      assertEquals(2, timeOfDay8.getHourOfDay());
      assertEquals(0, timeOfDay8.getMillisOfSecond());
      
      timeOfDay7.getField(timeOfDay6.MINUTE_OF_HOUR, (Chronology) gJChronology0);
      DateTime dateTime1 = timeOfDay3.toDateTimeToday();
      assertNotSame(timeOfDay2, timeOfDay5);
      assertEquals(184216L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay(5901L);
      // Undeclared exception!
      try { 
        timeOfDay0.getField((-21), (Chronology) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -21
         //
         verifyException("org.joda.time.TimeOfDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, uTCDateTimeZone0);
      zonedChronology0.withZone(uTCDateTimeZone0);
      TimeOfDay timeOfDay0 = new TimeOfDay(1, 1, 1);
      TimeOfDay timeOfDay1 = timeOfDay0.plusSeconds((-2240));
      assertEquals(41, timeOfDay1.getSecondOfMinute());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      timeOfDay0.MIDNIGHT.withField(dateTimeFieldType0, 2);
      int int0 = 860;
      TimeOfDay timeOfDay1 = null;
      try {
        timeOfDay1 = new TimeOfDay(0, 860);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 860 for minuteOfHour must not be larger than 59
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      TimeOfDay timeOfDay0 = TimeOfDay.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(4, timeOfDay0.size());
      
      TimeOfDay timeOfDay1 = timeOfDay0.plusMillis(365);
      assertEquals(20, timeOfDay1.getHourOfDay());
      assertEquals(21, timeOfDay1.getSecondOfMinute());
      assertEquals(21, timeOfDay1.getMinuteOfHour());
      assertEquals(685, timeOfDay1.getMillisOfSecond());
  }
}
