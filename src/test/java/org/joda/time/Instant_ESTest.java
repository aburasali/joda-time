/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 02:54:29 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.MutableDateTime;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.chrono.GJChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

public class Instant_ESTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Instant instant0 = null;
      try {
        instant0 = new Instant("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(39L);
      Instant instant1 = instant0.withMillis(39L);
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = new Instant((-2559L));
      Duration duration0 = new Duration((-2559L), (-2559L));
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, (-1));
      assertEquals((-2559L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(3498L);
      Instant instant1 = instant0.withDurationAdded(1000000000000000L, (-379));
      assertEquals((-378999999999996502L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Instant instant1 = instant0.minus(241L);
      Instant instant2 = instant1.toInstant();
      MutableDateTime mutableDateTime0 = instant2.toMutableDateTimeISO();
      assertEquals((-241L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = new Instant();
      instant0.EPOCH.toMutableDateTime();
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Instant instant1 = instant0.toInstant();
      assertSame(instant0, instant1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.toInstant();
      assertEquals(1392409281320L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals((-12219292800000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Instant instant0 = new Instant(2832L);
      Instant instant1 = instant0.minus(2832L);
      Instant instant2 = instant1.withDurationAdded(10000L, 0);
      Duration duration0 = new Duration(instant1, instant1);
      Instant instant3 = instant2.plus((ReadableDuration) duration0);
      assertEquals(0L, instant3.getMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      Duration duration0 = new Duration(60000L, (-3883L));
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      assertEquals((-12219292863883L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Instant instant1 = instant0.plus(0L);
      assertSame(instant0, instant1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Instant instant1 = instant0.plus((-3314L));
      assertEquals((-3314L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      Instant instant0 = Instant.parse("", dateTimeFormatter1);
      assertEquals(3600000L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Instant instant0 = Instant.parse("1970-01-01T00:00:00.000Z");
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Instant instant0 = Instant.parse("6");
      assertEquals((-61977830400000L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(0L);
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond(3);
      assertEquals(3000L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed(0L);
      Instant instant0 = Instant.now();
      assertEquals(0L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis((-1624L));
      Instant instant0 = Instant.now();
      assertEquals((-1624L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Instant instant1 = instant0.minus((ReadableDuration) null);
      assertSame(instant0, instant1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis(100000000000000L);
      Instant instant0 = new Instant();
      Instant instant1 = instant0.minus(100000000000000L);
      DateTime dateTime0 = instant1.toDateTimeISO();
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.minus((-1L));
      assertEquals(1392409281321L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Instant instant0 = Instant.now();
      long long0 = instant0.getMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      long long0 = instant0.getMillis();
      assertEquals((-12219292800000L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Instant instant0 = new Instant((-1L));
      Duration duration0 = new Duration((-1L), 1392409281320L);
      // Undeclared exception!
      try { 
        instant0.EPOCH.withDurationAdded((ReadableDuration) duration0, Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 1392409281321 * 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        Instant.parse("", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-2147483647)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        Instant.parse("", dateTimeFormatter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        Instant.parse("VT7}[N7x<D#7k'uI", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"VT7}[N7x<D#7k'uI\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.ofEpochSecond(1000000000000000982L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 1000000000000000982 * 1000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Instant instant0 = new Instant((-9223372036854775808L));
      Duration duration0 = Duration.standardDays(2427L);
      // Undeclared exception!
      try { 
        instant0.minus((ReadableDuration) duration0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775808 + -209692800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      // Undeclared exception!
      try { 
        instant0.minus((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(452L);
      Period period0 = Period.ZERO;
      Duration duration0 = period0.toStandardDuration();
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, (-7));
      assertEquals(452L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.EPOCH.withDurationAdded((ReadableDuration) null, 28265625);
      assertNotSame(instant0, instant1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Instant instant0 = new Instant();
      // Undeclared exception!
      try { 
        instant0.withDurationAdded((-207014400000L), 1610612736);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -207014400000 * 1610612736
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withDurationAdded(0L, 0);
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withMillis((-42521587200000L));
      DateTime dateTime0 = instant1.toDateTimeISO();
      assertEquals((-42521587200000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Instant instant0 = new Instant((-2559L));
      Duration duration0 = new Duration((-2559L), (-2559L));
      Instant instant1 = instant0.minus((ReadableDuration) duration0);
      assertEquals((-2559L), instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Instant instant0 = Instant.parse("", dateTimeFormatter0);
      Chronology chronology0 = instant0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      long long0 = instant0.getMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-160L));
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertEquals((-160000L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse("1970-01-01T00:00:00.000Z", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = Duration.standardSeconds((-1151L));
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals(1392409281320L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli(0L);
      Instant instant1 = instant0.withMillis(0L);
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse("X:zM.u,bhntq)2L.g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"X:zM.u,bhntq)2L.g\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-1421280001000L));
      assertEquals((-1421280001000L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.minus((ReadableDuration) null);
      assertEquals(1392409281320L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTime dateTime0 = instant0.toDateTimeISO();
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Instant instant0 = new Instant();
      Integer integer0 = new Integer(0);
      Instant instant1 = instant0.plus((long) integer0);
      assertEquals(1392409281320L, instant1.getMillis());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Instant instant0 = new Instant();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = Duration.standardMinutes(3);
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      assertEquals(1392409461320L, instant1.getMillis());
  }
}
