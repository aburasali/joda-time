/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 02:52:47 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.InternalParser;
import org.joda.time.format.InternalParserDateTimeParser;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InternalParserDateTimeParser_ESTest extends InternalParserDateTimeParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-21), false);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("org/joda/time/tz/data", "");
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-346L), islamicChronology0, locale0, (Integer) islamicChronology0.AH, 177);
      int int0 = dateTimeParser0.parseInto(dateTimeParserBucket0, "org.joda.time.chrono.BasicGJChronology", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 0);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_PaddedNumber0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Locale locale0 = Locale.JAPANESE;
      Integer integer0 = new Integer((-50));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, (-50));
      int int0 = dateTimeParser0.parseInto(dateTimeParserBucket0, "", (-1536));
      assertEquals(1535, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("org/joda/time/tz/data", "");
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, islamicChronology0, locale0, (Integer) islamicChronology0.AH, 177);
      int int0 = internalParserDateTimeParser0.parseInto(dateTimeParserBucket0, (CharSequence) "org/joda/time/tz/data", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-21), false);
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("org/joda/time/tz/data", "");
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-346L), islamicChronology0, locale0, (Integer) islamicChronology0.AH, 177);
      int int0 = internalParserDateTimeParser0.parseInto(dateTimeParserBucket0, (CharSequence) "", (-21));
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      int int0 = dateTimeParser0.estimateParsedLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-21), false);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      int int0 = dateTimeParser0.estimateParsedLength();
      assertEquals((-21), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneId0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2027L, gregorianChronology0, locale0, (Integer) null, 1);
      // Undeclared exception!
      try { 
        dateTimeParser0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", (-3904));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.US;
      Integer integer0 = new Integer(1);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1515L), gJChronology0, locale0, integer0, (-1));
      // Undeclared exception!
      try { 
        dateTimeParser0.parseInto(dateTimeParserBucket0, (String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('P');
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_CharacterLiteral0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.US;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1419), iSOChronology0, locale0, (Integer) null, (-1587));
      // Undeclared exception!
      try { 
        internalParserDateTimeParser0.parseInto(dateTimeParserBucket0, (CharSequence) "org/joda/time/tz/data", (-1587));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 0);
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_PaddedNumber0);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Integer integer0 = new Integer(2035);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, iSOChronology0, locale0, integer0, 0);
      // Undeclared exception!
      try { 
        internalParserDateTimeParser0.parseInto(dateTimeParserBucket0, (CharSequence) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('P');
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_CharacterLiteral0);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Locale locale0 = Locale.TAIWAN;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1419), iSOChronology0, locale0, (Integer) null, 1);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[7];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        internalParserDateTimeParser0.parseInto(dateTimeParserBucket0, (CharSequence) charBuffer0, (-2113));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3918, 3918, 3918);
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormat_StyleFormatter0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(929);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Locale locale0 = Locale.JAPAN;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(3918, ethiopicChronology0, locale0, (Integer) 1, 1315);
      // Undeclared exception!
      try { 
        internalParserDateTimeParser0.parseInto(dateTimeParserBucket0, (CharSequence) null, 1315);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No datetime pattern for locale: ja_JP
         //
         verifyException("org.joda.time.format.DateTimeFormat$StyleFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('-');
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_CharacterLiteral0);
      InternalParserDateTimeParser internalParserDateTimeParser1 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_CharacterLiteral0);
      boolean boolean0 = internalParserDateTimeParser0.equals(internalParserDateTimeParser1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 299, true);
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_FixedNumber0);
      boolean boolean0 = internalParserDateTimeParser0.equals(internalParserDateTimeParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('P');
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_CharacterLiteral0);
      Integer integer0 = new Integer((-1419));
      boolean boolean0 = internalParserDateTimeParser0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of((InternalParser) null);
      assertNull(dateTimeParser0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 0);
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_PaddedNumber0);
      InternalParserDateTimeParser internalParserDateTimeParser1 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(internalParserDateTimeParser0);
      assertEquals(0, internalParserDateTimeParser1.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 441, true);
      InternalParserDateTimeParser internalParserDateTimeParser0 = (InternalParserDateTimeParser)InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("org/joda/time/tz/data", "org/joda/time/tz/data");
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(441, islamicChronology0, locale0, (Integer) 1, 1);
      int int0 = internalParserDateTimeParser0.parseInto(dateTimeParserBucket0, (CharSequence) "org/joda/time/tz/data", 441);
      assertEquals((-442), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 441, true);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      int int0 = dateTimeParser0.estimateParsedLength();
      assertEquals(441, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 441, true);
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeParser0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("org/joda/time/tz/data", "org/joda/time/tz/data");
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(441, islamicChronology0, locale0, (Integer) 1, 1);
      int int0 = dateTimeParser0.parseInto(dateTimeParserBucket0, "org/joda/time/tz/data", 441);
      assertEquals((-442), int0);
  }
}
