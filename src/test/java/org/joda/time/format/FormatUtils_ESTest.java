/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 01:07:06 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Locale;
import java.util.Set;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.format.FormatUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FormatUtils_ESTest extends FormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FormatUtils.createErrorMessage("", 48);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Invalid format: \"\" is too short");
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) charBuffer0, (-1804));
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("m~U\"+3u");
      Writer writer0 = mockFileWriter0.append((CharSequence) "m~U\"+3u", 1, 1);
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = '(';
      mockFileWriter0.write(charArray0);
      mockFileWriter0.flush();
      mockFileWriter0.write("");
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, (-1964L), 100);
      FormatUtils.createErrorMessage("", 100);
      FormatUtils.appendPaddedInteger((Appendable) writer0, 100, 1255);
      FormatUtils.calculateDigitCount((-1964L));
      FormatUtils.writePaddedInteger(writer0, (long) 100, 1255);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 100);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-2863));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z?R~;>*nTXt|y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 9223372036854775794L, 456);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Oyk~@B");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      long long0 = (-3564L);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) pipedWriter0, 1231);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3137);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.flush();
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.close();
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, 3137);
      assertEquals("3137", stringWriter0.toString());
      
      stringWriter0.write("");
      assertEquals("3137", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) 3137);
      assertEquals("31373137", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 3137, 3137);
      StringBuffer stringBuffer0 = new StringBuffer(3137);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = new StringBuffer("");
      assertNotNull(stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      StringBuffer stringBuffer2 = stringBuffer0.append((Object) "");
      assertNotNull(stringBuffer2);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertNotSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer2.toString());
      assertEquals(0, stringBuffer2.length());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 3137, 3137);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertEquals(3137, stringBuffer0.length());
      
      int int0 = FormatUtils.calculateDigitCount(2156L);
      assertEquals(4, int0);
      
      FormatUtils.appendUnpaddedInteger(stringBuffer2, 3137);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertNotSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer2.equals((Object)stringBuffer1));
      assertEquals(3141, stringBuffer0.length());
      assertEquals(3141, stringBuffer2.length());
      
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, (-2467L));
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, (-114));
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-9223372036854775808L), 15);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h");
      mockFile0.mkdir();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFile0.setWritable(false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, 2290L, 627);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, (-1L), 2);
      FormatUtils.appendPaddedInteger((Appendable) mockFileWriter0, 100, 0);
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, (-3056L), 2);
      FormatUtils.appendUnpaddedInteger((Appendable) mockFileWriter0, (-9223372036854775808L));
      FormatUtils.appendUnpaddedInteger((Appendable) mockFileWriter0, 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("d");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/aburasali/Documents/Research/joda-time");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "d");
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, 51L, 0);
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, (-1), 1865);
      FormatUtils.createErrorMessage("Invalid format: \"", 0);
      StringBuffer stringBuffer0 = new StringBuffer("k{fU*XKCe");
      FormatUtils.appendPaddedInteger(stringBuffer0, 9223372036854775777L, 1865);
      FormatUtils.writeUnpaddedInteger((Writer) bufferedWriter0, 214);
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, 42L, (-1));
      FormatUtils.parseTwoDigits(stringBuffer0, 214);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter1 = stringWriter0.append('U');
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, 1396L, 38);
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      stringWriter1.write(charArray0);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, (long) 38, 38);
      FormatUtils.calculateDigitCount((byte)33);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) (byte) (-87));
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter1, 1);
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-392L));
      FormatUtils.createErrorMessage("", 2188);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, Integer.MIN_VALUE, 1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      bufferedWriter0.append('`');
      FormatUtils.writeUnpaddedInteger((Writer) bufferedWriter0, 10L);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("d");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/aburasali/Documents/Research/joda-time");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "d");
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, 51L, 0);
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, (-1), 1865);
      FormatUtils.createErrorMessage("Invalid format: \"", 0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Invalid format: \"");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-1));
      FormatUtils.calculateDigitCount(0L);
      FormatUtils.appendPaddedInteger((Appendable) bufferedWriter0, 10000, (-1307));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hN1'z<glgR`");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 9223372036854775776L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 9223372036854775776L, (-1182));
      FormatUtils.parseTwoDigits("hN1'z<glgR`", 5);
      StringBuffer stringBuffer1 = new StringBuffer("hN1'z<glgR`");
      FormatUtils.appendUnpaddedInteger(stringBuffer1, (-1182));
      stringBuffer1.append((Object) "hN1'z<glgR`");
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer1, (-1));
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 5);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer1, (-1182));
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-1L));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (-1), 246);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter1 = stringWriter0.append('G');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " QajHN:JO2SI<1a");
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, 1396L, 38);
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      stringWriter1.write(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(38);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 38);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, (-1L), 38);
      FormatUtils.calculateDigitCount((byte)33);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) (byte) (-94));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)85);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.println(0.0);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintWriter0, (int) (byte)33, (int) (byte) (-94));
      FormatUtils.calculateDigitCount(10000L);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, 100, 108);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter1 = stringWriter0.append('G');
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, 1396L, 38);
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      stringWriter1.write(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(38);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 38);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, (-1L), 38);
      FormatUtils.calculateDigitCount((byte)33);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) (byte) (-87));
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter1, 1);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 42L);
      FormatUtils.calculateDigitCount((-9223372036854775808L));
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-392L));
      FormatUtils.createErrorMessage("", 2188);
      FormatUtils.writePaddedInteger((Writer) stringWriter1, Integer.MIN_VALUE, 660);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      stringBuffer0.codePoints();
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, (-1));
      stringBuffer0.append((-1));
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) (-1), (-1));
      stringBuffer0.append((double) (-1));
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('H');
      int int0 = 3126;
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, 3126);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter1, (long) (-1));
      // Undeclared exception!
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 0, 10000);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FormatUtils.calculateDigitCount(1000L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = new StringBuffer(1086);
      FormatUtils.appendPaddedInteger(stringBuffer0, 1086, 1031);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 1000, 1000);
      FormatUtils.createErrorMessage("x5o.#(1%,N]VaZbh4!", 76);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("d");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/aburasali/Documents/Research/joda-time");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "d");
      outputStreamWriter0.close();
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, (-1), 1865);
      FormatUtils.createErrorMessage("%iHmq", 0);
      try { 
        FormatUtils.appendPaddedInteger((Appendable) outputStreamWriter0, 20, (-1034));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        FormatUtils.writePaddedInteger((Writer) pipedWriter0, (-9223372036854775808L), 449);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter1 = stringWriter0.append('G');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " QajHN:JO2SI<1a");
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, 1396L, 38);
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      stringWriter1.write(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(38);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 38);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, (-1L), 38);
      FormatUtils.calculateDigitCount((byte)33);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) (byte) (-94));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)85);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintWriter0, (int) (byte)33, (int) (byte) (-94));
      FormatUtils.calculateDigitCount(10010L);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FormatUtils.createErrorMessage("=#&$y?K7_}zd{%Ro", 4);
      FormatUtils.createErrorMessage("Invalid format: \"=#&$y?K7_}zd{%Ro\" is malformed at \"y?K7_}zd{%Ro\"", 4);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('[');
      // Undeclared exception!
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 504L, 13421772);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("2147483648");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append('7');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 10000L, (-1));
      StringBuffer stringBuffer0 = new StringBuffer("2147483648");
      FormatUtils.appendPaddedInteger(stringBuffer0, 10000L, (-1));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 0L, (-1));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      stringWriter0.write("", 0, 0);
      stringWriter0.write("A?Vc\"[m\"mNRZq~Ja.?");
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) 4, 34);
      FormatUtils.createErrorMessage("A?Vc\"[m\"mNRZq~Ja.?", 1);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.codePoints();
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (long) 34, (-1332));
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 85L);
      FormatUtils.appendPaddedInteger((Appendable) stringWriter0, 85L, (-1332));
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 19);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 19);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("d", false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, 51L, 0);
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, (-1), 1851);
      FormatUtils.calculateDigitCount((-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hN1'z<glgR`");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-9223372036854775808L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (-9223372036854775808L), (-1182));
      FormatUtils.parseTwoDigits("hN1'z<glgR`", 5);
      StringBuffer stringBuffer1 = new StringBuffer("hN1'z<glgR`");
      FormatUtils.appendUnpaddedInteger(stringBuffer1, (-1182));
      stringBuffer1.append((Object) "hN1'z<glgR`");
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer1, (-1));
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 5);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer1, (-1182));
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-1L));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("d", false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, 51L, 0);
      Writer writer0 = outputStreamWriter0.append('M');
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, (-1), 1865);
      FormatUtils.writeUnpaddedInteger(writer0, 100);
      FormatUtils.writeUnpaddedInteger((Writer) outputStreamWriter0, 1865);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      stringBuffer0.chars();
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      stringBuffer0.reverse();
      charArray0[1] = 'Y';
      stringBuffer0.ensureCapacity((-1));
      int int0 = 0;
      stringBuffer0.append(charArray0, 0, 0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-1));
      StringBuffer stringBuffer1 = stringBuffer0.append((float) 0);
      int int1 = 0;
      FormatUtils.parseTwoDigits(stringBuffer0, 0);
      FormatUtils.calculateDigitCount((-1L));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer1);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('X');
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter2, 36);
      // Undeclared exception!
      try { 
        stringBuffer0.replace(0, (-29), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > end
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FormatUtils.calculateDigitCount(1396L);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        FormatUtils.writePaddedInteger((Writer) pipedWriter0, (long) 4, Integer.MAX_VALUE);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FormatUtils.createErrorMessage("JhK?WD7mWjas<[1", 2);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Invalid format: \"JhK?WD7mWjas<[1\" is malformed at \"K?WD7mWjas<[1\"");
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      charBuffer0.put(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) charBuffer0, 18, 4);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) charBuffer0, 63L);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, 100L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 10000L, 28);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Z{}V JM9b>q");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Z{}V JM9b>q";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "Z{}V JM9b>q";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) "Z{}V JM9b>q";
      Object object1 = new Object();
      objectArray0[8] = object1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      FormatUtils.appendPaddedInteger((Appendable) printStream0, 48, 34);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("[iIil`E^VjQ%xz");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-518L));
      stringBuffer0.insert(17, 872L);
      FormatUtils.appendPaddedInteger(stringBuffer0, 17, 17);
      StringBuffer stringBuffer1 = stringBuffer0.append("S~E$w:>^b_j]SVbB");
      FormatUtils.calculateDigitCount(1488L);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 156L, 17);
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = 'Y';
      charArray0[2] = 'o';
      charArray0[3] = '=';
      charArray0[4] = 'C';
      charArray0[5] = '>';
      charArray0[6] = '-';
      charArray0[7] = 'H';
      stringBuffer1.append(charArray0);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 14);
      stringBuffer1.insert(14, (Object) "[iIil`E^VjQ%xz");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      FormatUtils.appendPaddedInteger(stringBuffer0, (-2143), 2145471011);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h");
      mockFile0.mkdir();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '}';
      charArray0[2] = 'L';
      charArray0[3] = 'n';
      charArray0[4] = 'X';
      mockFile0.setWritable(true, true);
      charArray0[5] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      mockFileWriter0.append((CharSequence) charBuffer0);
      charBuffer0.asReadOnlyBuffer();
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, 2290L, 627);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) charBuffer0, 2290L, 627);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer("");
      long long0 = 10L;
      StringBuffer stringBuffer1 = stringBuffer0.append(10L);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) stringBuffer1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringBuffer0.trimToSize();
      int int0 = 20;
      FormatUtils.appendPaddedInteger(stringBuffer0, 10L, 20);
      stringBuffer2.insert(20, (CharSequence) stringBuffer1);
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits("", 20);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FormatUtils.calculateDigitCount((-1689L));
      FormatUtils.createErrorMessage("", 5);
      StringBuffer stringBuffer0 = new StringBuffer("[C'3+l~GgdG_$%U1XS");
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 0L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(28);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, 16, 1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%rSSc}h9)");
      FormatUtils.createErrorMessage("l", 1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      FormatUtils.createErrorMessage("o|};", 901);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Invalid format: \"o|};\" is too short");
      stringBuffer0.ensureCapacity(0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0L);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 210L);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (-457), 1);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0);
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 1, 1525);
      FormatUtils.calculateDigitCount(0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) pipedWriter0, (-3045));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringBuffer stringBuffer0 = null;
      String string0 = "Lj$X .GeQlW:#";
      int int0 = 34;
      FormatUtils.createErrorMessage("Lj$X .GeQlW:#", 34);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, 34, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "Mv!@8~El`dfN\"2PPM";
      StringBuffer stringBuffer0 = new StringBuffer("Mv!@8~El`dfN\"2PPM");
      FormatUtils.appendPaddedInteger(stringBuffer0, (-93L), 20);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "Mv!@8~El`dfN\"2PPM");
      // Undeclared exception!
      try { 
        stringBuffer1.deleteCharAt(1117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1117
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FormatUtils.calculateDigitCount((-1076L));
      FormatUtils.createErrorMessage("", 5);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('+');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      ByteBuffer.wrap(byteArray0);
      FormatUtils.appendPaddedInteger((Appendable) mockPrintWriter0, 5, 5);
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, (-891L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      long long0 = 15L;
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 15L);
      int int0 = 0;
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0);
      Object object0 = new Object();
      stringBuffer0.append(object0);
      URI uRI0 = MockURI.aFileURI;
      stringBuffer0.append(1.0F);
      MockFile mockFile0 = new MockFile(uRI0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "%yn5NYb%{Gr", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "\" is too short";
      FormatUtils.createErrorMessage("\" is too short", (-1));
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) null, (long) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "o*&R5lc.XnP>";
      StringBuffer stringBuffer0 = new StringBuffer("o*&R5lc.XnP>");
      StringBuffer stringBuffer1 = new StringBuffer(0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      stringBuffer0.append((CharSequence) charBuffer0);
      stringBuffer0.append(stringBuffer1);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-83L), (-1));
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Ui|j|0TsRk*X)>Z");
      int int0 = (-1);
      stringBuffer0.codePoints();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-1));
      int int1 = 302;
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 302, (-1));
      int int2 = (-453);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, (-453));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Ui|j|0TsRk*X)>Z");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.release();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(filterOutputStream0, false, "Ui|j|0TsRk*X)>Z");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Ui|j|0TsRk*X)>Z
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("\" is malformed at \"");
      mockFileWriter0.append((CharSequence) "\" is malformed at \"");
      Writer writer0 = mockFileWriter0.append('b');
      long long0 = 10L;
      int int0 = 27;
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, 10L, 27);
      FormatUtils.calculateDigitCount(10L);
      FormatUtils.writeUnpaddedInteger(writer0, (long) 2);
      long long1 = (-779L);
      FormatUtils.appendUnpaddedInteger((Appendable) writer0, (-779L));
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        stringBuffer0.append((CharSequence) "", 2, 27);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 2, end 27, s.length() 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FormatUtils.calculateDigitCount(100L);
      StringWriter stringWriter0 = new StringWriter();
      CharSequence charSequence0 = null;
      int int0 = (-839);
      stringWriter0.write("f:k'IvM>M<\"Qq0#", 0, 3);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, (-839), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = null;
      int int0 = (-1923);
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage((String) null, (-1923));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = (-979L);
      FormatUtils.calculateDigitCount((-979L));
      StringBuffer stringBuffer0 = null;
      int int0 = (-554);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, (long) 4, (-554));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FormatUtils.calculateDigitCount(1028L);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FormatUtils.calculateDigitCount(10000L);
      StringBuffer stringBuffer0 = new StringBuffer("9223372036854775808");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 5);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 3715);
      MockFile mockFile0 = new MockFile("", "9223372036854775808");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringBuffer0;
      objectArray0[4] = (Object) stringBuffer0;
      PrintStream printStream0 = mockPrintStream0.format("9223372036854775808", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      FormatUtils.writeUnpaddedInteger((Writer) mockPrintWriter0, (long) 3715);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 735;
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) null, 735);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 34;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) null, 1443L, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FormatUtils.calculateDigitCount((-439L));
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      int int0 = 100;
      FormatUtils.writePaddedInteger((Writer) stringWriter1, 4, 100);
      CharBuffer charBuffer0 = CharBuffer.allocate(1799);
      int int1 = 798;
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'j';
      // Undeclared exception!
      try { 
        charBuffer0.put(charArray0, 1799, 1799);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits((CharSequence) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) null, (-3739L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) pipedWriter0, (-495L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = 'E';
      charArray0[2] = 'X';
      charArrayWriter0.append((CharSequence) null);
      charArray0[3] = 'u';
      charArray0[4] = 'z';
      charArray0[5] = 'R';
      charArray0[6] = '!';
      charArray0[7] = 'j';
      charArray0[8] = '<';
      charArrayWriter0.write(charArray0, 0, 0);
      charArrayWriter0.write(0);
      FormatUtils.writeUnpaddedInteger((Writer) charArrayWriter0, (-1163));
      FormatUtils.appendPaddedInteger((Appendable) charArrayWriter0, 0, 0);
      FormatUtils.calculateDigitCount(1L);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FormatUtils.calculateDigitCount(307L);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FormatUtils.calculateDigitCount((-965L));
      // Undeclared exception!
      try { 
        FormatUtils.writeUnpaddedInteger((Writer) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Writer writer0 = null;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits(charBuffer0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "<CsI!z=V/A_$";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<CsI!z=V/A_$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "<CsI!z=V/A_$";
      objectArray0[2] = (Object) "<CsI!z=V/A_$";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "<CsI!z=V/A_$";
      int int0 = 1;
      mockFileOutputStream0.write(1);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "<CsI!z=V/A_$", objectArray0);
      long long0 = (-1154L);
      FormatUtils.writePaddedInteger((Writer) printWriter0, (-1154L), 27);
      int int1 = (-725);
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter0, (-1L), (-725));
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits("<CsI!z=V/A_$", 27);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Appendable appendable0 = null;
      int int0 = 1;
      int int1 = 0;
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((Appendable) null, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockFile mockFile0 = new MockFile("aD/d", "aD/d");
      mockFile0.setExecutable(false, false);
      mockFile0.toURI();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, (-1451L), 4);
      mockFile0.mkdir();
      StringBuffer stringBuffer0 = null;
      mockFile0.mkdirs();
      int int0 = 1;
      mockFile0.setWritable(false);
      mockFile0.setExecutable(true, true);
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, 1, 6023);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((-2176));
      StringBuffer stringBuffer2 = stringBuffer0.append((-2151.702259792296));
      FormatUtils.appendPaddedInteger(stringBuffer0, (-203), (-963));
      MockFile mockFile0 = new MockFile("@A~l_j(wSyxx`>y0");
      mockFile0.getAbsolutePath();
      mockFile0.setReadable(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, (-963), (-963));
      FormatUtils.writeUnpaddedInteger((Writer) mockFileWriter0, 468);
      FormatUtils.appendPaddedInteger(stringBuffer2, (-938), 100);
      FormatUtils.appendUnpaddedInteger(stringBuffer1, (-1L));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Writer writer0 = null;
      int int0 = (-2163);
      int int1 = 0;
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, (-2163), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = '#';
      charArray0[2] = 'R';
      charArray0[3] = '7';
      charArray0[4] = '2';
      charArray0[5] = '.';
      stringBuffer0.append(charArray0);
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1), 45);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockFile mockFile0 = new MockFile("m>0v=s%");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = new Locale("isX'ziukUQzsrIG", "]!2BA", "y<R>zB}");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, "org.joda.time.format.FormatUtils", objectArray0);
      FormatUtils.appendPaddedInteger((Appendable) printStream0, 2861, 2861);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("`");
      stringBuffer0.insert(0, 2345.54825);
      stringBuffer0.chars();
      FormatUtils.appendPaddedInteger(stringBuffer0, (-1019L), (-1404));
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (long) 0, (-2272));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, 481L, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter1 = new PipedWriter(pipedReader0);
      FormatUtils.appendPaddedInteger((Appendable) pipedWriter1, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('o');
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      stringWriter1.write(charArray0);
      char[] charArray1 = new char[3];
      FormatUtils.createErrorMessage("", 2865);
      stringWriter1.append((CharSequence) "Invalid format: \"\" is too short");
      charArray1[0] = 'o';
      charArray1[1] = 'o';
      FormatUtils.calculateDigitCount(0);
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter1, 1);
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FormatUtils.calculateDigitCount(0L);
      StringBuffer stringBuffer0 = new StringBuffer("\"AMYb-!*AyJ");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 10);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringBuffer stringBuffer0 = null;
      long long0 = 3321L;
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, 3321L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "~QUr6&v1Ytmm)w&8";
      int int0 = 27;
      FormatUtils.createErrorMessage("~QUr6&v1Ytmm)w&8", 27);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("!E$N");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      try { 
        mockFileOutputStream0.write(byteArray0, (int) (byte) (-91), (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FormatUtils.calculateDigitCount(10L);
      FormatUtils.createErrorMessage("sE3&NX&\"hk!|.Mo$", 0);
      FormatUtils.createErrorMessage("Invalid format: \"sE3&NX&\"hk!|.Mo$\"", 2);
      StringBuffer stringBuffer0 = new StringBuffer("");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 3137;
      StringWriter stringWriter0 = new StringWriter(3137);
      stringWriter0.flush();
      stringWriter0.close();
      FormatUtils.appendUnpaddedInteger((Appendable) stringWriter0, 3137);
      String string0 = "";
      stringWriter0.write("");
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) 3137);
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 3137, 3137);
      int int1 = (-1);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) charBuffer0, (-7372));
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.calculateDigitCount((-1L));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("8KHmu*OX`-", (-532));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = 0L;
      int int0 = (-81);
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, 0L, (-81));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((Appendable) null, 2581L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(947);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append(true);
      FormatUtils.parseTwoDigits(stringBuffer0, 0);
      CharBuffer charBuffer0 = CharBuffer.allocate(746);
      FormatUtils.appendUnpaddedInteger((Appendable) charBuffer0, (long) 0);
      FormatUtils.appendPaddedInteger(stringBuffer0, 0, 0);
      FormatUtils.parseTwoDigits(charBuffer0, 445);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits(stringBuffer0, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(5032);
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(5342);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      FormatUtils.writeUnpaddedInteger((Writer) pipedWriter0, 5342);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 1011;
      try { 
        FormatUtils.writePaddedInteger((Writer) pipedWriter0, 1011, 1011);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage(">\"`(2d{Cd", (-1620));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FormatUtils.createErrorMessage("", 0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FormatUtils.calculateDigitCount((-552L));
      // Undeclared exception!
      try { 
        FormatUtils.writePaddedInteger((Writer) null, 0L, (-3892));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 0;
      try { 
        FormatUtils.writePaddedInteger((Writer) pipedWriter0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FormatUtils.writePaddedInteger((Writer) charArrayWriter0, 1331, 0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-863L));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-1L));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = new Object();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(1231);
      pipedWriter0.connect(pipedReader0);
      FormatUtils.writePaddedInteger((Writer) pipedWriter0, (-9223372036854775808L), 449);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FormatUtils.createErrorMessage("ldV.@hsjqM", 19);
      FormatUtils.calculateDigitCount(19);
      MockFileWriter mockFileWriter0 = new MockFileWriter("ldV.@hsjqM");
      FormatUtils.writeUnpaddedInteger((Writer) mockFileWriter0, 3141L);
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, 3141L, 2833);
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, (-2441L), 19);
      FormatUtils.createErrorMessage("Invalid format: \"ldV.@hsjqM\" is too short", 19);
      FormatUtils.writeUnpaddedInteger((Writer) mockFileWriter0, 525L);
      FormatUtils.appendPaddedInteger((Appendable) mockFileWriter0, (long) 19, 25);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("[iIil`E^VjQ%xz");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-518L));
      StringBuffer stringBuffer1 = new StringBuffer("[iIil`E^VjQ%xz");
      FormatUtils.appendPaddedInteger(stringBuffer0, 17, 17);
      StringBuffer stringBuffer2 = stringBuffer0.append("S~E$w:>^b_j]SVbB");
      FormatUtils.calculateDigitCount(872L);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 156L, 17);
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = 'o';
      charArray0[3] = '=';
      charArray0[4] = 'C';
      charArray0[5] = '>';
      charArray0[6] = '-';
      charArray0[7] = 'H';
      stringBuffer2.append(charArray0);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 14);
      stringBuffer2.insert(14, (Object) "[iIil`E^VjQ%xz");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-52);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits(charBuffer0, (byte) (-23));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FormatUtils.calculateDigitCount(911L);
      StringBuffer stringBuffer0 = new StringBuffer("I<Gwx#r`o;brq`E;F");
      stringBuffer0.append((Object) "I<Gwx#r`o;brq`E;F");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"enD");
      stringBuffer0.trimToSize();
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = stringBuffer0.append(3);
      StringBuffer stringBuffer2 = stringBuffer0.append(false);
      stringBuffer2.append((double) 911L);
      stringBuffer0.insert(3, false);
      FormatUtils.appendPaddedInteger(stringBuffer0, 3506L, 3);
      stringBuffer0.append(3);
      FormatUtils.createErrorMessage("I<Gwx#r`o;brq`E;F", 3);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer2, 911L, (-2220));
      FormatUtils.appendUnpaddedInteger(stringBuffer1, 911L);
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer0, 456L);
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("d,L)", (-2220));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hN1'<glgR`");
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-9223372036854775808L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-1182);
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (-9223372036854775808L), (-1182));
      int int1 = 5;
      FormatUtils.calculateDigitCount(5);
      StringBuffer stringBuffer1 = new StringBuffer("hN1'<glgR`");
      FormatUtils.appendUnpaddedInteger(stringBuffer1, (-1182));
      stringBuffer1.append((Object) "hN1'<glgR`");
      FormatUtils.appendUnpaddedInteger((Appendable) stringBuffer1, (-1));
      // Undeclared exception!
      try { 
        stringBuffer1.delete((-1), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('U');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("U", stringWriter0.toString());
      assertEquals("U", stringWriter1.toString());
      
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, 1396L, 38);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("U00000000000000000000000000000000001396", stringWriter0.toString());
      assertEquals("U00000000000000000000000000000000001396", stringWriter1.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      stringWriter1.write(charArray0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'U', 'U'}, charArray0);
      assertEquals("U00000000000000000000000000000000001396UU", stringWriter0.toString());
      assertEquals("U00000000000000000000000000000000001396UU", stringWriter1.toString());
      
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, (long) 38, 38);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("U00000000000000000000000000000000001396UU00000000000000000000000000000000000038", stringWriter0.toString());
      assertEquals("U00000000000000000000000000000000001396UU00000000000000000000000000000000000038", stringWriter1.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) (byte) (-87));
      assertSame(stringWriter0, stringWriter1);
      assertEquals("U00000000000000000000000000000000001396UU00000000000000000000000000000000000038-87", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter1, 1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("U00000000000000000000000000000000001396UU00000000000000000000000000000000000038-871", stringWriter0.toString());
      assertEquals("U00000000000000000000000000000000001396UU00000000000000000000000000000000000038-871", stringWriter1.toString());
      
      int int0 = FormatUtils.calculateDigitCount((-9223372036854775808L));
      assertEquals(20, int0);
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-392L));
      assertSame(stringWriter0, stringWriter1);
      assertEquals("U00000000000000000000000000000000001396UU00000000000000000000000000000000000038-871-392", stringWriter0.toString());
      
      String string0 = FormatUtils.createErrorMessage("", 2188);
      assertNotNull(string0);
      assertEquals("Invalid format: \"\" is too short", string0);
      
      FormatUtils.writePaddedInteger((Writer) stringWriter1, Integer.MIN_VALUE, 660);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEqualsstringWriter0.toString());
      assertEqualsstringWriter1.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hN1'z<glgR`");
      assertFalse(boolean0);
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-9223372036854775808L));
      assertEquals("-9223372036854775808", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = 2659;
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (-9223372036854775808L), 2659);
      assertEquals(2680, stringBuffer0.length());
      
      int int1 = 5;
      int int2 = FormatUtils.parseTwoDigits("hN1'z<glgR`", 5);
      assertEquals(175, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      StringBuffer stringBuffer1 = new StringBuffer("hN1'z<glgR`");
      assertNotNull(stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals(11, stringBuffer1.length());
      assertEquals("hN1'z<glgR`", stringBuffer1.toString());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer1, 2659);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals(15, stringBuffer1.length());
      assertEquals("hN1'z<glgR`2659", stringBuffer1.toString());
      
      int int3 = (-1);
      StringBuffer stringBuffer2 = stringBuffer1.append((Object) "hN1'z<glgR`");
      assertNotNull(stringBuffer2);
      assertSame(stringBuffer1, stringBuffer2);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertNotSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      assertEquals(26, stringBuffer1.length());
      assertEquals("hN1'z<glgR`2659hN1'z<glgR`", stringBuffer1.toString());
      assertEquals(26, stringBuffer2.length());
      assertEquals("hN1'z<glgR`2659hN1'z<glgR`", stringBuffer2.toString());
      
      StringBuffer stringBuffer3 = new StringBuffer("");
      assertNotNull(stringBuffer3);
      assertFalse(stringBuffer3.equals((Object)stringBuffer2));
      assertFalse(stringBuffer3.equals((Object)stringBuffer1));
      assertFalse(stringBuffer3.equals((Object)stringBuffer0));
      assertEquals(0, stringBuffer3.length());
      assertEquals("", stringBuffer3.toString());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer3, 0L);
      assertNotSame(stringBuffer3, stringBuffer2);
      assertNotSame(stringBuffer3, stringBuffer1);
      assertNotSame(stringBuffer3, stringBuffer0);
      assertFalse(stringBuffer3.equals((Object)stringBuffer2));
      assertFalse(stringBuffer3.equals((Object)stringBuffer1));
      assertFalse(stringBuffer3.equals((Object)stringBuffer0));
      assertEquals(1, stringBuffer3.length());
      assertEquals("0", stringBuffer3.toString());
      
      StringBuffer stringBuffer4 = stringBuffer1.insert(18, true);
      assertNotNull(stringBuffer4);
      assertSame(stringBuffer1, stringBuffer2);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer1, stringBuffer4);
      assertNotSame(stringBuffer1, stringBuffer3);
      assertNotSame(stringBuffer4, stringBuffer3);
      assertSame(stringBuffer4, stringBuffer2);
      assertNotSame(stringBuffer4, stringBuffer0);
      assertSame(stringBuffer4, stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(stringBuffer1.equals((Object)stringBuffer3));
      assertFalse(stringBuffer4.equals((Object)stringBuffer3));
      assertFalse(stringBuffer4.equals((Object)stringBuffer0));
      assertEquals(30, stringBuffer1.length());
      assertEquals("hN1'z<glgR`2659hN1true'z<glgR`", stringBuffer1.toString());
      assertEquals("hN1'z<glgR`2659hN1true'z<glgR`", stringBuffer4.toString());
      assertEquals(30, stringBuffer4.length());
      
      // Undeclared exception!
      try { 
        stringBuffer2.insert(132, (float) 2659);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 132
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)33;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-11), (byte) (-94), (byte)33}, byteArray0);
      
      StringWriter stringWriter1 = stringWriter0.append('G');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("G", stringWriter0.toString());
      assertEquals("G", stringWriter1.toString());
      
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, 1396L, 38);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("G00000000000000000000000000000000001396", stringWriter0.toString());
      assertEquals("G00000000000000000000000000000000001396", stringWriter1.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      stringWriter1.write(charArray0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'G', 'G'}, charArray0);
      assertEquals("G00000000000000000000000000000000001396GG", stringWriter0.toString());
      assertEquals("G00000000000000000000000000000000001396GG", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(38);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 38);
      assertEquals(2, stringBuffer0.length());
      assertEquals("38", stringBuffer0.toString());
      
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, (-1L), 38);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("G00000000000000000000000000000000001396GG-00000000000000000000000000000000000001", stringWriter0.toString());
      assertEquals("G00000000000000000000000000000000001396GG-00000000000000000000000000000000000001", stringWriter1.toString());
      
      int int0 = FormatUtils.calculateDigitCount((byte)33);
      assertEquals(2, int0);
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) (byte) (-94));
      assertSame(stringWriter0, stringWriter1);
      assertEquals("G00000000000000000000000000000000001396GG-00000000000000000000000000000000000001-94", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter1, (int) (byte) (-11));
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("G00000000000000000000000000000000001396GG-00000000000000000000000000000000000001-94-11", stringWriter0.toString());
      assertEquals("G00000000000000000000000000000000001396GG-00000000000000000000000000000000000001-94-11", stringWriter1.toString());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 42L);
      assertEquals(4, stringBuffer0.length());
      assertEquals("3842", stringBuffer0.toString());
      
      int int1 = FormatUtils.calculateDigitCount((-9223372036854775808L));
      assertEquals(20, int1);
      assertFalse(int1 == int0);
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-415L));
      assertSame(stringWriter0, stringWriter1);
      assertEquals("G00000000000000000000000000000000001396GG-00000000000000000000000000000000000001-94-11-415", stringWriter0.toString());
      
      String string0 = FormatUtils.createErrorMessage("", 2188);
      assertNotNull(string0);
      assertEquals("Invalid format: \"\" is too short", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)33;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-11), (byte) (-94), (byte)33}, byteArray0);
      
      StringWriter stringWriter1 = stringWriter0.append('G');
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("G", stringWriter0.toString());
      assertEquals("G", stringWriter1.toString());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RK");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " QajHN:JO2SI<1a");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, 1396L, 38);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("G00000000000000000000000000000000001396", stringWriter0.toString());
      assertEquals("G00000000000000000000000000000000001396", stringWriter1.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      stringWriter1.write(charArray0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'G', 'G'}, charArray0);
      assertEquals("G00000000000000000000000000000000001396GG", stringWriter0.toString());
      assertEquals("G00000000000000000000000000000000001396GG", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(38);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (long) 38);
      assertEquals(2, stringBuffer0.length());
      assertEquals("38", stringBuffer0.toString());
      
      FormatUtils.appendPaddedInteger((Appendable) stringWriter1, (-1L), 38);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("G00000000000000000000000000000000001396GG-00000000000000000000000000000000000001", stringWriter0.toString());
      assertEquals("G00000000000000000000000000000000001396GG-00000000000000000000000000000000000001", stringWriter1.toString());
      
      int int0 = FormatUtils.calculateDigitCount((byte)33);
      assertEquals(2, int0);
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (long) (byte) (-94));
      assertSame(stringWriter0, stringWriter1);
      assertEquals("G00000000000000000000000000000000001396GG-00000000000000000000000000000000000001-94", stringWriter0.toString());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)85);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      FormatUtils.appendPaddedInteger((Appendable) mockPrintWriter0, (int) (byte)33, (int) (byte) (-94));
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      int int1 = FormatUtils.calculateDigitCount(10000L);
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      
      FormatUtils.appendPaddedInteger(stringBuffer0, (int) (byte) (-11), 2);
      assertEquals("38-11", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter1, 25, (int) (byte) (-11));
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("G00000000000000000000000000000000001396GG-00000000000000000000000000000000000001-9425", stringWriter0.toString());
      assertEquals("G00000000000000000000000000000000001396GG-00000000000000000000000000000000000001-9425", stringWriter1.toString());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = new byte[3];
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertNotNull(byteBuffer0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-44), (byte)0}, byteArray0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals(3, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(3, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-44), (byte)0}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals(3, byteBuffer0.limit());
      assertEquals(3, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=3 lim=3 cap=3]", byteBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.capacity());
      assertEquals("\u0000\uFFFD\u0000", charBuffer0.toString());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, (long) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      IntStream intStream0 = stringBuffer0.chars();
      assertNotNull(intStream0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      StringBuffer stringBuffer1 = stringBuffer0.reverse();
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      stringBuffer0.ensureCapacity((-1659));
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      int int0 = 0;
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0, 0, 0);
      assertNotNull(stringBuffer2);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'X', '\u0000'}, charArray0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer2.length());
      assertEquals("", stringBuffer2.toString());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-1659));
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals(5, stringBuffer0.length());
      assertEquals("-1659", stringBuffer0.toString());
      
      int int1 = 0;
      int int2 = FormatUtils.parseTwoDigits(stringBuffer0, 0);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals((-29), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(5, stringBuffer0.length());
      assertEquals("-1659", stringBuffer0.toString());
      
      String string1 = FormatUtils.createErrorMessage("", 0);
      assertNotNull(string1);
      assertEquals("Invalid format: \"\"", string1);
      assertFalse(string1.equals((Object)string0));
      
      FormatUtils.appendPaddedInteger(stringBuffer0, (-2147483647), (-2147483647));
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals("-1659-2147483647", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      
      int int3 = FormatUtils.calculateDigitCount((-1L));
      assertEquals(2, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      // Undeclared exception!
      try { 
        stringBuffer0.replace(0, (-29), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > end
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("]Ze_{7G{P");
      assertNotNull(stringBuffer0);
      assertEquals("]Ze_{7G{P", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
      
      IntStream intStream0 = stringBuffer0.chars();
      assertNotNull(intStream0);
      assertEquals("]Ze_{7G{P", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
      
      char[] charArray0 = new char[2];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/aburasali/Documents/Research/joda-time");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)22;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-42), (byte) (-74), (byte)22}, byteArray0);
      
      charArray0[0] = 'X';
      StringBuffer stringBuffer1 = stringBuffer0.reverse();
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(9, stringBuffer0.length());
      assertEquals("P{G7{_eZ]", stringBuffer0.toString());
      assertEquals(9, stringBuffer1.length());
      assertEquals("P{G7{_eZ]", stringBuffer1.toString());
      
      charArray0[1] = 'Y';
      stringBuffer0.ensureCapacity((-1659));
      assertSame(stringBuffer0, stringBuffer1);
      assertEquals(9, stringBuffer0.length());
      assertEquals("P{G7{_eZ]", stringBuffer0.toString());
      
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0, 0, 0);
      assertNotNull(stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'X', 'Y'}, charArray0);
      assertEquals(9, stringBuffer0.length());
      assertEquals("P{G7{_eZ]", stringBuffer0.toString());
      assertEquals("P{G7{_eZ]", stringBuffer2.toString());
      assertEquals(9, stringBuffer2.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-1659));
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertEquals("P{G7{_eZ]-1659", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
      
      int int0 = FormatUtils.parseTwoDigits(stringBuffer0, 0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertEquals(395, int0);
      assertEquals("P{G7{_eZ]-1659", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
      
      int int1 = FormatUtils.calculateDigitCount((-8L));
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      StringBuffer stringBuffer3 = stringBuffer0.replace(0, 395, "]Ze_{7G{P");
      assertNotNull(stringBuffer3);
      assertSame(stringBuffer0, stringBuffer3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer3, stringBuffer0);
      assertSame(stringBuffer3, stringBuffer1);
      assertSame(stringBuffer3, stringBuffer2);
      assertEquals("]Ze_{7G{P", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
      assertEquals("]Ze_{7G{P", stringBuffer3.toString());
      assertEquals(9, stringBuffer3.length());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("]Ze_{7G{P");
      assertNotNull(mockPrintStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      assertNotNull(outputStreamWriter0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      FormatUtils.appendPaddedInteger((Appendable) printWriter0, (-9223372036854775808L), 14);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, (-3034), 0);
      assertSame(stringBuffer0, stringBuffer3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertEquals(14, stringBuffer0.length());
      assertEquals("]Ze_{7G{P-3034", stringBuffer0.toString());
      
      FormatUtils.appendPaddedInteger((Appendable) stringBuffer0, 395, 638);
      assertSame(stringBuffer0, stringBuffer3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertEquals(652, stringBuffer0.length());
      assertEquals("]Ze_{7G{stringBuffer0.toString());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("]Ze_{7G{P");
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      
      FormatUtils.writePaddedInteger((Writer) mockPrintWriter1, 239, 0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("e*5", (-3034));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(1231);
      assertNotNull(pipedReader0);
      
      pipedWriter0.connect(pipedReader0);
      FormatUtils.writePaddedInteger((Writer) pipedWriter0, (-9223372036854775808L), 449);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        FormatUtils.writePaddedInteger((Writer) pipedWriter0, 9223372036854775794L, 449);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      assertNotNull(bufferedWriter0);
      assertEquals("", stringWriter0.toString());
      
      bufferedWriter0.write((-2148));
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, (long) (-2148), (-2148));
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, 42, 28);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("d");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/aburasali/Documents/Research/joda-time");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "d");
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, 51L, 0);
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, (-1), 1865);
      FormatUtils.createErrorMessage("Invalid format: \"", 0);
      StringBuffer stringBuffer0 = new StringBuffer("k{fU*XKCe");
      FormatUtils.appendPaddedInteger(stringBuffer0, 9223372036854775777L, 1865);
      FormatUtils.writeUnpaddedInteger((Writer) bufferedWriter0, 214);
      FormatUtils.writePaddedInteger((Writer) bufferedWriter0, 11L, (-1));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h");
      mockFile0.mkdir();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFile0.setWritable(false, false);
      mockFile0.setWritable(true, true);
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, 2290L, 627);
      FormatUtils.calculateDigitCount((-1L));
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, (-1L), 2);
      FormatUtils.appendPaddedInteger((Appendable) mockFileWriter0, 100, 0);
      FormatUtils.writePaddedInteger((Writer) mockFileWriter0, (-3056L), 2);
  }
}
