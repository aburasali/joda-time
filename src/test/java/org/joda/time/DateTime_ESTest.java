/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 22 01:28:25 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Foo;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTime_ESTest extends DateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.minusMillis((-2935));
      assertEquals(2935L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Instant instant0 = new Instant(3832L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = instant0.toDateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.minusSeconds((-310));
      assertEquals(313832L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Instant instant0 = new Instant((long) 2);
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.minusMinutes((-2952));
      assertEquals(177120002L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      DateTime dateTime0 = DateTime.now((Chronology) zonedChronology0);
      DateTime dateTime1 = dateTime0.minusHours((-2019));
      assertEquals(1399677681320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.minusWeeks((-1093));
      assertEquals(2053455681320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-22L));
      DateTime dateTime1 = dateTime0.minusMonths((-1));
      assertEquals(2678399978L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.plusMillis((-2855));
      assertEquals(1392409278465L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      DateTime dateTime1 = dateTime0.plusSeconds(1118);
      assertEquals(1392410399320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      DateTime dateTime1 = dateTime0.plusMinutes((-1680));
      assertEquals(1392308481320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.plusHours(1);
      assertEquals(1392412881320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      DateTime dateTime1 = dateTime0.plusDays(1);
      assertEquals(1392495681320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      DateTime dateTime1 = dateTime0.plusMonths((-3501));
      assertEquals((-7814547518680L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime.Property dateTime_Property0 = dateTime0.dayOfMonth();
      // Undeclared exception!
      try { 
        dateTime_Property0.setCopy((String) null, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value null for dayOfMonth is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = new DateTime((Chronology) gregorianChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.dayOfMonth();
      // Undeclared exception!
      try { 
        dateTime_Property0.setCopy(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.weekOfWeekyear();
      long long0 = dateTime_Property0.getMillis();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime.Property dateTime_Property0 = dateTime0.dayOfMonth();
      DateTimeField dateTimeField0 = dateTime_Property0.getField();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime.Property dateTime_Property0 = dateTime0.dayOfMonth();
      DateTime dateTime1 = dateTime_Property0.withMinimumValue();
      assertEquals(1391286081320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.yearOfEra();
      DateTime dateTime1 = dateTime_Property0.roundCeilingCopy();
      DateTime dateTime2 = dateTime1.withZoneRetainFields(uTCDateTimeZone0);
      assertEquals(0L, dateTime2.getMillis());
      assertSame(dateTime2, dateTime1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime dateTime1 = dateTime0.withZoneRetainFields(uTCDateTimeZone0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime1 = dateTime0.withZone(uTCDateTimeZone0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withWeekyear(0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime2 = dateTime1.withZone(uTCDateTimeZone0);
      assertSame(dateTime2, dateTime1);
      assertEquals((-62162998718680L), dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.withYearOfEra(236548278);
      assertEquals(7464680491234881320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.withYearOfCentury(23);
      assertEquals(1676406081320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      DateTime dateTime1 = dateTime0.withYearOfCentury(1);
      assertEquals((-374816318680L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.withYear(2890);
      assertEquals(29036348481320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.withWeekOfWeekyear(2);
      assertEquals(1389385281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, 1);
      DateTime dateTime1 = dateTime0.withWeekOfWeekyear(1);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      assertTrue(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalTime localTime0 = new LocalTime(0L, (Chronology) buddhistChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      assertEquals(1392336000000L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime(0L, (Chronology) strictChronology0);
      LocalTime localTime0 = new LocalTime(0L);
      DateTime dateTime1 = dateTime0.withTime(localTime0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      DateTime dateTime1 = dateTime0.withTime(1, 1, 1, 1);
      assertEquals(1392339661001L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.withMonthOfYear(4);
      assertEquals(7776000000L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, 1);
      DateTime dateTime1 = dateTime0.withMonthOfYear(1);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, 1);
      DateTime dateTime1 = dateTime0.withMinuteOfHour(0);
      assertEquals((-62135593199000L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1, 2, 4, 5, 1, 4, 3);
      DateTime dateTime1 = dateTime0.withMillisOfSecond(3);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      DateTime dateTime0 = DateTime.now((Chronology) zonedChronology0);
      DateTime dateTime1 = dateTime0.withMillisOfDay(2014);
      assertEquals(1392336002014L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      DateTime dateTime1 = dateTime0.withMillis((-1942L));
      assertEquals((-1942L), dateTime1.getMillis());
      assertEquals(1392336000000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.withLaterOffsetAtOverlap();
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withLaterOffsetAtOverlap();
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTime dateTime0 = new DateTime(2, 5, 1, 4, 0, 4);
      DateTime dateTime1 = dateTime0.withHourOfDay(0);
      assertEquals((-62093692796000L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTime dateTime1 = dateTime0.withField(dateTimeFieldType0, 1);
      assertEquals(1388607681320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.withEra(0);
      assertEquals((-125719011518680L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.withEarlierOffsetAtOverlap();
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, 1);
      DateTime dateTime1 = dateTime0.withEarlierOffsetAtOverlap();
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-19L));
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.withDurationAdded((-19L), 45);
      assertEquals((-19855L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      DateTime dateTime1 = dateTime0.withDayOfYear(1);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((-1754L), (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.withDayOfYear(100);
      assertEquals((-22896001754L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1595L, dateTimeZone0);
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.withDayOfWeek(5);
      assertEquals(86401595L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Instant instant0 = new Instant((long) 2);
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.withDayOfWeek(3);
      assertEquals((-86399998L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      DateTime dateTime1 = dateTime0.withDayOfMonth(24);
      assertEquals(1393273281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null, (DateTimeZone) null);
      DateTime dateTime1 = dateTime0.withYearOfEra(18);
      DateTime dateTime2 = dateTime1.withDayOfMonth(18);
      assertEquals((-61594918718680L), dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.minusMonths(17887500);
      DateTime dateTime1 = dateTime0.withDate(localDate1);
      assertEquals((-47038189117118680L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.withDate(112, 1, 1);
      assertEquals((-58632781118680L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.dayOfWeek();
      DateTime dateTime1 = dateTime_Property0.roundCeilingCopy();
      DateTime dateTime2 = dateTime1.withChronology(buddhistChronology0);
      assertNotSame(dateTime2, dateTime1);
      assertEquals(0L, dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime dateTime1 = dateTime0.withCenturyOfEra(1679);
      assertEquals(5216364230397892L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.toDateTimeISO();
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.minusWeeks(236548278);
      DateTime dateTime2 = dateTime1.toDateTimeISO();
      assertEquals((-143063006125118680L), dateTime2.getMillis());
      assertSame(dateTime2, dateTime1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), 1);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      DateTime dateTime1 = dateTime0.toDateTime(dateTimeZone0);
      assertNotSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1);
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) islamicChronology0);
      assertNotSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.minusYears(1575);
      DateTime dateTime2 = dateTime1.toDateTime();
      assertEquals((-48309795518680L), dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((-58565821119093L), (Chronology) gregorianChronology0);
      DateTime dateTime1 = dateTime0.plusYears(37);
      assertEquals((-57398211519093L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1824L);
      DateTime dateTime1 = dateTime0.plusWeeks((-1));
      DateTime dateTime2 = dateTime1.plusSeconds((-1));
      assertEquals((-604799176L), dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.minusWeeks(236548278);
      DateTime dateTime2 = dateTime1.plusMinutes(1620);
      assertEquals((-143063006027918680L), dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      DateTime dateTime1 = dateTime0.plusMillis(1);
      assertEquals(1392409281321L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime dateTime1 = dateTime0.plusHours((-23));
      assertEquals((-82802108L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = new DateTime((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.withMillis(0);
      DateTime dateTime2 = dateTime1.plusDays(0);
      assertEquals(0L, dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      Period period0 = Period.ZERO;
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) period0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Instant instant0 = new Instant((long) 2);
      DateTime dateTime0 = instant0.toDateTime();
      Months months0 = Months.FOUR;
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) months0);
      assertEquals(10368000002L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((-518L), (DateTimeZone) uTCDateTimeZone0);
      Minutes minutes0 = Minutes.ONE;
      Days days0 = minutes0.toStandardDays();
      Duration duration0 = days0.toStandardDuration();
      DateTime dateTime1 = dateTime0.plus((ReadableDuration) duration0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-22L));
      DateTime dateTime1 = dateTime0.plus((long) (-3303));
      assertEquals((-3325L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter1);
      assertEquals((-1L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withYear(0);
      DateTime dateTime0 = localDate1.toDateTimeAtCurrentTime();
      DateTime dateTime1 = dateTime0.minusSeconds(0);
      assertEquals((-62163344318680L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalTime localTime0 = new LocalTime(0L, (Chronology) buddhistChronology0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.minusMonths(942);
      DateTime dateTime2 = dateTime1.toDateTime((DateTimeZone) uTCDateTimeZone0);
      assertEquals((-1085097600000L), dateTime2.getMillis());
      assertNotSame(dateTime2, dateTime1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.minusDays((-282));
      assertEquals(1416774081320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      Seconds seconds0 = Seconds.ONE;
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) seconds0);
      assertEquals((-3108L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(1L, (Chronology) copticChronology0);
      Duration duration0 = Duration.standardSeconds(1);
      DateTime dateTime1 = dateTime0.minus((ReadableDuration) duration0);
      assertEquals((-999L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.minus(0L);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      LocalTime localTime0 = new LocalTime(0L);
      DateTime dateTime1 = dateTime0.withTime(localTime0);
      DateTime dateTime2 = dateTime1.minus((-2108L));
      assertEquals((-86397892L), dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        dateTime0.withYearOfEra(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        dateTime0.withYear((-2147483587));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483587 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      // Undeclared exception!
      try { 
        dateTime0.withWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTime0.withTime((LocalTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = new DateTime(2521L, (DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        dateTime0.withTime((-1346), (-1346), 4426, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1346 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
      try { 
        dateTime0.withSecondOfMinute(172);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 172 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = new DateTime((-1L), (Chronology) copticChronology0);
      Period period0 = Period.months(1);
      // Undeclared exception!
      try { 
        dateTime0.withPeriodAdded(period0, (-2064888122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        dateTime0.withPeriodAdded(days0, (-1820));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 3908420239360 * 86400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalTime localTime0 = new LocalTime(0L, (Chronology) buddhistChronology0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        dateTime0.withMinuteOfHour(321);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 321 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-22L));
      // Undeclared exception!
      try { 
        dateTime0.withMillisOfSecond((-3303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3303 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        dateTime0.withMillisOfDay((-282));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -282 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
      try { 
        dateTime0.withHourOfDay(487);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 487 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        dateTime0.withFieldAdded(durationFieldType0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime((Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      // Undeclared exception!
      try { 
        dateTime0.withField(dateTimeFieldType0, 1687);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1687 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1824L);
      // Undeclared exception!
      try { 
        dateTime0.withEra(1701);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1701 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = new DateTime((DateTimeZone) uTCDateTimeZone0);
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      // Undeclared exception!
      try { 
        dateTime0.withDurationAdded((ReadableDuration) duration0, (-236));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -1298798110310400000 * -236
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = new DateTime((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        dateTime0.withDurationAdded(1390737600000L, 2146768058);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 1390737600000 * 2146768058
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1);
      DateTime dateTime1 = dateTime0.withChronology(islamicChronology0);
      // Undeclared exception!
      try { 
        dateTime1.withDayOfYear(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTime0.withDate((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((-58565821119093L), (Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        dateTime0.withCenturyOfEra((-3148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3148 for centuryOfEra must be in the range [1,2922790]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) uTCDateTimeZone0);
      Interval interval0 = localDate0.toInterval((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime0 = interval0.getStart();
      // Undeclared exception!
      try { 
        dateTime0.plusYears((-2146405592));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2146403578 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now((Chronology) buddhistChronology0);
      LocalDate localDate0 = monthDay0.toLocalDate(120);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      // Undeclared exception!
      try { 
        dateTime0.plusWeeks((-2147483622));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Foo foo0 = Foo.FOUR;
      // Undeclared exception!
      try { 
        dateTime0.plus((ReadablePeriod) foo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        DateTime.parse("-;vY;r\"*{&", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L);
      Partial partial0 = new Partial(localTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
      try { 
        DateTime.parse("u/xy I", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"u/xy I\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime dateTime1 = dateTime0.withYear(1);
      // Undeclared exception!
      try { 
        dateTime1.minusYears(9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) uTCDateTimeZone0);
      Foo foo0 = Foo.SEVEN;
      // Undeclared exception!
      try { 
        dateTime0.minus((ReadablePeriod) foo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        dateTime0.minus((ReadablePeriod) years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-1), 5, 5, (-1), (-1), 5, (-1), copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, 0, 0, (-374), 1186, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -374 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(0, 0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      Seconds seconds0 = Seconds.ONE;
      DateTime dateTime1 = dateTime0.withPeriodAdded(seconds0, 1);
      assertEquals((-1108L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withDurationAdded((ReadableDuration) null, 2967);
      assertEquals(1392336000000L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime((Chronology) null);
      Hours hours0 = Hours.FIVE;
      Duration duration0 = hours0.toStandardDuration();
      DateTime dateTime1 = dateTime0.withDurationAdded((ReadableDuration) duration0, (-1));
      assertEquals((-18000000L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.withDurationAdded((long) 0, 0);
      assertSame(dateTime0, dateTime1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withDurationAdded((-2378L), 70);
      assertEquals(1392409114860L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      DateTime dateTime1 = dateTime0.withChronology(islamicChronology0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Instant instant0 = new Instant(3832L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = instant0.toDateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withMillis(3665L);
      assertEquals(3665L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.withEarlierOffsetAtOverlap();
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, 1, islamicChronology0);
      assertEquals((-42521583539000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime dateTime1 = dateTime0.withTime(1, 1, 1, 1);
      assertEquals((-82738999L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, dateTimeZone0);
      assertEquals((-62135593140000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, 1, 1, dateTimeZone0);
      assertEquals((-62135593138999L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = new DateTime((Object) null, buddhistChronology0);
      DateTime dateTime1 = dateTime0.minusYears((-1757));
      assertEquals(56837967681320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.parse("", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1, 2, 4, 5, 1, 4, 3);
      DateTime dateTime1 = dateTime0.withFields((ReadablePartial) null);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, 1, dateTimeZone0);
      assertEquals((-62135593139001L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
      DateTime dateTime0 = new DateTime((-1680), (-3386), (-1680), 1073741824, 3600000, 3600000, (-1680), lenientChronology0);
      assertEquals(3741455087998320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      DateTime dateTime1 = dateTime0.withWeekyear(3916);
      assertEquals(61413970881320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, buddhistChronology0);
      assertEquals((-79271564340000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = new DateTime(3L, (DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        dateTime0.withDate(100, 413, 1321);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 413 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        dateTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTime.Property dateTime_Property0 = dateTime0.property(dateTimeFieldType0);
      assertNotNull(dateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((-518L), (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.minusMillis(0);
      assertEquals((-518L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.minusMillis(413);
      assertEquals(1392409280907L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      DateTime dateTime1 = dateTime0.minusSeconds(1);
      assertEquals(1392409280320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      DateTime dateTime1 = dateTime0.minusMinutes(0);
      assertEquals(1392409281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.minusMinutes(1525);
      assertEquals((-91500000L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime dateTime1 = dateTime0.minusHours(0);
      assertEquals((-2108L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.minusHours(2);
      assertEquals(1392402081320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime dateTime1 = dateTime0.minusDays(0);
      assertEquals((-2108L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.minusDays(1525);
      assertEquals((-131760000000L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime dateTime1 = dateTime0.minusWeeks(0);
      assertEquals((-2108L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      DateTime dateTime1 = dateTime0.minusMonths(0);
      assertEquals(1392409281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = new DateTime((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.minusYears(0);
      assertEquals(1392409281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime dateTime1 = dateTime0.minusYears(9);
      DateTime dateTime2 = dateTime1.plusMonths(1);
      assertEquals((-281318402108L), dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime dateTime1 = dateTime0.plusMillis(0);
      assertEquals((-2108L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1824L);
      DateTime dateTime1 = dateTime0.plusSeconds(0);
      assertEquals(1824L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      DateTime dateTime1 = dateTime0.plusMinutes(0);
      assertEquals(1392409281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      DateTime dateTime1 = dateTime0.plusHours(0);
      assertEquals(1392409281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.plusDays((-2147394172));
      assertEquals((-185533464051518680L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      DateTime dateTime1 = dateTime0.plusWeeks(0);
      assertEquals(1392409281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.plusWeeks(1525);
      assertEquals(922320000000L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      DateTime dateTime1 = dateTime0.plusMonths(0);
      assertEquals(1392409281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      DateTime dateTime1 = dateTime0.plusYears(0);
      assertEquals(1392409281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        dateTime0.plusYears(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1435 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Period period0 = Period.hours(0);
      Weeks weeks0 = period0.toStandardWeeks();
      DateTime dateTime1 = dateTime0.withPeriodAdded(weeks0, 0);
      assertEquals(1392409281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      DateTime dateTime1 = dateTime0.withPeriodAdded((ReadablePeriod) null, (-1191));
      assertSame(dateTime0, dateTime1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = new DateTime(10000000000000L, (DateTimeZone) uTCDateTimeZone0);
      Duration duration0 = Duration.standardSeconds((-306L));
      DateTime dateTime1 = dateTime0.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals(10000000000000L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = new DateTime(3L, (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.minus((ReadableDuration) null);
      assertEquals(3L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      DateTime dateTime1 = dateTime0.withDurationAdded((-3545L), 0);
      assertEquals(1392409281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        dateTime0.withFieldAdded((DurationFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      DateTime dateTime1 = dateTime0.withFieldAdded(durationFieldType0, 0);
      assertEquals(1392409281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTime dateTime1 = dateTime0.withField(dateTimeFieldType0, 1);
      assertEquals((-42512787518680L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.withFields((ReadablePartial) null);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      LocalTime localTime0 = LocalTime.now();
      DateTime dateTime1 = dateTime0.withFields(localTime0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime((Chronology) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime1 = dateTime0.withZoneRetainFields(dateTimeZone0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      DateTime dateTime1 = dateTime0.withZoneRetainFields(dateTimeZone0);
      assertEquals(1392409281319L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      DateTime dateTime1 = dateTime0.toDateTime((Chronology) islamicChronology0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.toDateTime(dateTimeZone0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.toDateTimeISO();
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      DateTime dateTime1 = dateTime0.toDateTimeISO();
      assertNotSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.DateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = new DateTime((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.withHourOfDay(0);
      assertEquals(1392337281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      DateTime dateTime1 = dateTime0.withZone((DateTimeZone) null);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(buddhistChronology0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.BuddhistChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object object0 = new Object();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.secondOfMinute();
      assertNotNull(dateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      DateTime dateTime1 = dateTime0.plus((long) 0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = new DateTime(3L, (DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.withMillisOfSecond(1);
      assertEquals(1L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime0.millisOfSecond();
      assertNotNull(dateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.minus(0L);
      assertSame(dateTime0, dateTime1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.yearOfEra();
      DateTime dateTime1 = dateTime_Property0.roundCeilingCopy();
      DateTime dateTime2 = dateTime1.minusDays(0);
      assertEquals(0L, dateTime2.getMillis());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      DateTime.Property dateTime_Property0 = dateTime0.millisOfDay();
      assertNotNull(dateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime((Chronology) null);
      // Undeclared exception!
      try { 
        dateTime0.withYearOfCentury((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      DateTime dateTime1 = dateTime0.withEra(1);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-1451), (-1451), (-1451), (-1451), 2313, (-1451), (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1451 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.toDateTime();
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      LocalDate localDate0 = dateTime0.toLocalDate();
      DateTime dateTime1 = dateTime0.withDate(localDate0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      LocalTime localTime0 = dateTime0.toLocalTime();
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      DateTime dateTime1 = dateTime0.withFields(localDateTime0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(400);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-1661), (-1661), (-1661), 3030, 3030, (-1661), dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3030 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime dateTime1 = dateTime0.withMillisOfDay(1);
      assertEquals((-86399999L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime((Chronology) null);
      DateTime.Property dateTime_Property0 = dateTime0.hourOfDay();
      assertNotNull(dateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(3106, 3106, 3106, 3106, 604800, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3106 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      DateTime dateTime1 = dateTime0.withDayOfYear(1);
      assertEquals(1383682881320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
      try { 
        dateTime0.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Object object0 = new Object();
      Instant instant0 = Instant.ofEpochMilli(697L);
      Chronology chronology0 = instant0.getChronology();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(object0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = new DateTime((-1L), (Chronology) copticChronology0);
      DateTime dateTime1 = dateTime0.withTimeAtStartOfDay();
      assertEquals((-86400000L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      DateTime.Property dateTime_Property0 = dateTime0.secondOfDay();
      assertNotNull(dateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      DateTime.Property dateTime_Property0 = dateTime0.dayOfYear();
      assertNotNull(dateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = new DateTime((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime1 = dateTime0.withMinuteOfHour(0);
      assertEquals(1392408021320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime dateTime1 = dateTime0.withLaterOffsetAtOverlap();
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      Hours hours0 = Hours.MIN_VALUE;
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) hours0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTime.Property dateTime_Property0 = dateTime1.property(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dateTime_Property0.withMaximumValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292278992 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime((-23), (-180), 2147482454, (-23), (-180), 34, 34, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -23 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime((Chronology) null);
      DateTime.Property dateTime_Property0 = dateTime0.era();
      assertNotNull(dateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime0.centuryOfEra();
      assertNotNull(dateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      Duration duration0 = new Duration(mutableDateTime0, dateTime0);
      DateTime dateTime1 = dateTime0.plus((ReadableDuration) duration0);
      assertEquals(1392409281320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTime.parse(")2W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \")2W\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTime0.withDayOfMonth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      // Undeclared exception!
      try { 
        dateTime0.withWeekOfWeekyear((-2147483560));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483560 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(1, 167, 167, 1, 4, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 167 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withCenturyOfEra(1);
      assertEquals((-58565821118680L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      LocalTime localTime0 = LocalTime.now();
      DateTime dateTime1 = dateTime0.withTime(localTime0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime((Chronology) null);
      // Undeclared exception!
      try { 
        dateTime0.withDayOfWeek(1620);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1620 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(3044, 1, 2615625, 1, (-1), 2615625, 2726);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) islamicChronology0);
      DateTime dateTime1 = dateTime0.withSecondOfMinute(1);
      assertEquals(1392409261320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      Period period0 = Period.hours(0);
      Weeks weeks0 = period0.toStandardWeeks();
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) weeks0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, 1);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      DateTime dateTime1 = dateTime0.withFieldAdded(durationFieldType0, (-3798));
      assertEquals((-62463740339000L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime0.yearOfCentury();
      DateTime dateTime1 = dateTime_Property0.addWrapFieldToCopy((-1690));
      assertEquals(1707942081320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfHour();
      DateTime dateTime1 = dateTime_Property0.addToCopy((-2445L));
      assertEquals((-146700000L), dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime((-2108L), (Chronology) strictChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.weekyear();
      DateTime dateTime1 = dateTime_Property0.roundCeilingCopy();
      assertEquals(31795200000L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime0.dayOfWeek();
      Chronology chronology0 = dateTime_Property0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime((Chronology) null);
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfDay();
      DateTime dateTime1 = dateTime_Property0.roundHalfEvenCopy();
      assertEquals(1392409260000L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1824L);
      DateTime.Property dateTime_Property0 = dateTime0.monthOfYear();
      // Undeclared exception!
      try { 
        dateTime_Property0.setCopy("Field '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Field '\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfHour();
      DateTime dateTime1 = dateTime_Property0.addToCopy(0);
      assertSame(dateTime1, dateTime0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime.Property dateTime_Property0 = dateTime0.dayOfMonth();
      DateTime dateTime1 = dateTime_Property0.roundHalfCeilingCopy();
      assertEquals(1392422400000L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime0.year();
      DateTime dateTime1 = dateTime_Property0.roundFloorCopy();
      assertEquals(1388534400000L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      DateTime dateTime0 = instant0.toDateTime();
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfHour();
      DateTime dateTime1 = dateTime_Property0.getDateTime();
      assertEquals(0L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime0.year();
      DateTime dateTime1 = dateTime_Property0.withMaximumValue();
      assertEquals(9223371989468481320L, dateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.minuteOfHour();
      DateTime dateTime1 = dateTime_Property0.roundHalfFloorCopy();
      assertEquals(1392409260000L, dateTime1.getMillis());
  }
}
